{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/react/core/hooks/contract/useContractEvents.ts", "../../node_modules/thirdweb/src/react/core/hooks/contract/useReadContract.ts", "../../node_modules/thirdweb/src/react/core/hooks/others/useInvalidateQueries.ts", "../../node_modules/thirdweb/src/pay/getBuyHistory.ts", "../../node_modules/thirdweb/src/react/core/hooks/pay/useBuyHistory.ts", "../../node_modules/thirdweb/src/react/core/hooks/pay/useBuyWithCryptoHistory.ts", "../../node_modules/thirdweb/src/pay/buyWithFiat/getHistory.ts", "../../node_modules/thirdweb/src/react/core/hooks/pay/useBuyWithFiatHistory.ts", "../../node_modules/thirdweb/src/pay/buyWithFiat/getPostOnRampQuote.ts", "../../node_modules/thirdweb/src/react/core/hooks/pay/usePostOnrampQuote.ts", "../../node_modules/thirdweb/src/react/core/hooks/rpc/useBlockNumber.ts", "../../node_modules/thirdweb/src/react/core/hooks/transaction/useEstimateGas.ts", "../../node_modules/thirdweb/src/react/core/hooks/transaction/useEstimateGasCost.ts", "../../node_modules/thirdweb/src/react/core/hooks/transaction/useSendAndConfirmTransaction.ts", "../../node_modules/thirdweb/src/react/core/hooks/transaction/useSendBatchTransaction.ts", "../../node_modules/thirdweb/src/react/core/hooks/transaction/useSimulateTransaction.ts", "../../node_modules/thirdweb/src/react/core/errors/mapBridgeError.ts", "../../node_modules/thirdweb/src/react/core/hooks/useBridgeRoutes.ts", "../../node_modules/thirdweb/src/react/core/hooks/wallets/useAuthToken.ts", "../../node_modules/thirdweb/src/wallets/eip5792/get-capabilities.ts", "../../node_modules/thirdweb/src/react/core/hooks/wallets/useCapabilities.ts", "../../node_modules/thirdweb/src/react/core/hooks/wallets/useIsAutoConnecting.ts", "../../node_modules/thirdweb/src/wallets/eip5792/send-calls.ts", "../../node_modules/thirdweb/src/wallets/eip5792/get-calls-status.ts", "../../node_modules/thirdweb/src/wallets/eip5792/wait-for-calls-receipt.ts", "../../node_modules/thirdweb/src/wallets/eip5792/send-and-confirm-calls.ts", "../../node_modules/thirdweb/src/react/core/hooks/wallets/useSendAndConfirmCalls.ts", "../../node_modules/thirdweb/src/react/core/hooks/wallets/useSendCalls.ts", "../../node_modules/thirdweb/src/react/core/hooks/wallets/useWaitForCallsReceipt.ts", "../../node_modules/thirdweb/src/react/core/utils/createQuery.ts", "../../node_modules/thirdweb/src/react/web/hooks/transaction/useSendTransaction.tsx", "../../node_modules/thirdweb/src/react/core/hooks/transaction/useSendTransaction.ts", "../../node_modules/thirdweb/src/react/web/ui/TransactionButton/TransactionModal.tsx", "../../node_modules/thirdweb/src/react/web/adapters/WindowAdapter.ts", "../../node_modules/thirdweb/src/react/web/ui/Bridge/BridgeOrchestrator.tsx", "../../node_modules/thirdweb/src/react/core/machines/paymentMachine.ts", "../../node_modules/thirdweb/src/react/web/ui/TransactionButton/ExecutingScreen.tsx", "../../node_modules/thirdweb/src/react/web/ui/Bridge/common/TokenAndChain.tsx", "../../node_modules/thirdweb/src/react/web/ui/Bridge/common/WithHeader.tsx", "../../node_modules/thirdweb/src/react/web/ui/Bridge/DirectPayment.tsx", "../../node_modules/thirdweb/src/react/core/hooks/useBridgeError.ts", "../../node_modules/thirdweb/src/react/web/ui/Bridge/ErrorBanner.tsx", "../../node_modules/thirdweb/src/react/web/ui/Bridge/FundWallet.tsx", "../../node_modules/thirdweb/src/react/web/ui/Bridge/payment-details/PaymentDetails.tsx", "../../node_modules/thirdweb/src/contract/actions/compiler-metadata.ts", "../../node_modules/thirdweb/src/contract/actions/get-compiler-metadata.ts", "../../node_modules/thirdweb/src/react/core/hooks/useTransactionDetails.ts", "../../node_modules/thirdweb/src/react/web/ui/Bridge/common/TokenBalanceRow.tsx", "../../node_modules/thirdweb/src/react/web/ui/Bridge/payment-details/PaymentOverview.tsx", "../../node_modules/thirdweb/src/react/web/ui/Bridge/payment-selection/PaymentSelection.tsx", "../../node_modules/thirdweb/src/react/core/hooks/usePaymentMethods.ts", "../../node_modules/thirdweb/src/react/web/ui/Bridge/payment-selection/FiatProviderSelection.tsx", "../../node_modules/thirdweb/src/react/core/hooks/pay/useBuyWithFiatQuotesForProviders.ts", "../../node_modules/thirdweb/src/react/core/hooks/useBridgeQuote.ts", "../../node_modules/thirdweb/src/react/web/ui/Bridge/payment-selection/TokenSelection.tsx", "../../node_modules/thirdweb/src/react/web/ui/ConnectWallet/icons/CreditCardIcon.tsx", "../../node_modules/thirdweb/src/react/web/ui/Bridge/payment-selection/WalletFiatSelection.tsx", "../../node_modules/thirdweb/src/react/web/ui/Bridge/payment-success/SuccessScreen.tsx", "../../node_modules/thirdweb/src/react/web/ui/Bridge/payment-success/PaymentReceipt.tsx", "../../node_modules/thirdweb/src/react/web/ui/Bridge/QuoteLoader.tsx", "../../node_modules/thirdweb/src/react/core/hooks/useBridgePrepare.ts", "../../node_modules/thirdweb/src/react/core/hooks/useStepExecutor.ts", "../../node_modules/thirdweb/src/react/web/ui/Bridge/StepRunner.tsx", "../../node_modules/thirdweb/src/react/web/ui/Bridge/TransactionPayment.tsx", "../../node_modules/thirdweb/src/react/web/ui/TransactionButton/DepositScreen.tsx", "../../node_modules/thirdweb/src/react/web/hooks/wallets/useLinkProfile.ts", "../../node_modules/thirdweb/src/react/web/providers/thirdweb-provider.tsx", "../../node_modules/thirdweb/src/react/core/providers/thirdweb-provider.tsx", "../../node_modules/thirdweb/src/react/core/utils/structuralSharing.ts", "../../node_modules/thirdweb/src/react/web/ui/ConnectWallet/Modal/ConnectEmbed.tsx", "../../node_modules/thirdweb/src/react/web/ui/Bridge/UnsupportedTokenScreen.tsx", "../../node_modules/thirdweb/src/react/web/ui/Bridge/BuyWidget.tsx", "../../node_modules/thirdweb/src/react/web/ui/Bridge/CheckoutWidget.tsx", "../../node_modules/thirdweb/src/react/web/ui/Bridge/TransactionWidget.tsx", "../../node_modules/thirdweb/src/react/web/ui/ConnectWallet/useConnectModal.tsx", "../../node_modules/thirdweb/src/react/web/ui/PayEmbed.tsx", "../../node_modules/thirdweb/src/react/web/ui/prebuilt/NFT/provider.tsx", "../../node_modules/thirdweb/src/react/web/ui/prebuilt/NFT/utils.ts", "../../node_modules/thirdweb/src/react/web/ui/prebuilt/NFT/description.tsx", "../../node_modules/thirdweb/src/react/web/ui/prebuilt/NFT/media.tsx", "../../node_modules/thirdweb/src/react/web/ui/prebuilt/NFT/name.tsx", "../../node_modules/thirdweb/src/react/web/ui/prebuilt/Token/provider.tsx", "../../node_modules/thirdweb/src/react/web/ui/prebuilt/Token/icon.tsx", "../../node_modules/thirdweb/src/react/web/ui/prebuilt/Token/name.tsx", "../../node_modules/thirdweb/src/react/web/ui/prebuilt/Token/symbol.tsx", "../../node_modules/thirdweb/src/react/web/ui/prebuilt/thirdweb/BuyDirectListingButton/index.tsx", "../../node_modules/thirdweb/src/react/core/hooks/transaction/transaction-button-utils.ts", "../../node_modules/thirdweb/src/react/web/ui/TransactionButton/index.tsx", "../../node_modules/thirdweb/src/react/web/ui/prebuilt/thirdweb/ClaimButton/index.tsx", "../../node_modules/thirdweb/src/react/web/ui/prebuilt/thirdweb/CreateDirectListingButton/index.tsx", "../../node_modules/thirdweb/src/extensions/marketplace/__generated__/IDirectListings/write/createListing.ts", "../../node_modules/thirdweb/src/extensions/marketplace/direct-listings/write/createListing.ts", "../../node_modules/thirdweb/src/react/web/ui/prebuilt/Wallet/icon.tsx", "../../node_modules/thirdweb/src/react/core/utils/walletname.ts", "../../node_modules/thirdweb/src/react/web/ui/prebuilt/Wallet/name.tsx", "../../node_modules/thirdweb/src/react/web/ui/SiteEmbed.tsx", "../../node_modules/thirdweb/src/react/web/ui/SiteLink.tsx", "../../node_modules/thirdweb/src/react/web/utils/storage.ts"],
  "sourcesContent": ["import {\n  type UseQueryResult,\n  useQuery,\n  useQueryClient,\n} from \"@tanstack/react-query\";\nimport type { Abi, AbiEvent } from \"abitype\";\nimport { useEffect, useMemo, useRef } from \"react\";\nimport { getContractEvents } from \"../../../../event/actions/get-events.js\";\nimport type { ParseEventLogsResult } from \"../../../../event/actions/parse-logs.js\";\nimport {\n  type WatchContractEventsOptions,\n  watchContractEvents,\n} from \"../../../../event/actions/watch-events.js\";\nimport type { PreparedEvent } from \"../../../../event/prepare-event.js\";\nimport { eth_blockNumber } from \"../../../../rpc/actions/eth_blockNumber.js\";\nimport { getRpcClient } from \"../../../../rpc/rpc.js\";\n\ntype UseContractEventsOptions<\n  abi extends Abi,\n  abiEvents extends PreparedEvent<AbiEvent>[],\n> = Omit<WatchContractEventsOptions<abi, abiEvents, true>, \"onEvents\"> & {\n  blockRange?: number;\n  enabled?: boolean;\n  watch?: boolean;\n};\n\n/**\n * Watches contract events and returns the parsed logs.\n * @param options - The options for watching contract events.\n * @param options.contract - The contract to watch events for.\n * @param options.events - The events to watch. Shuould be an array of [prepared events](https://portal.thirdweb.com/references/typescript/v5/prepareEvent).\n * @param options.blockRange - The number of blocks to search for events.\n * @param options.enabled - Whether to enable the query.\n * @param options.watch - Whether to watch for new events.\n * @returns The contract events of the watched contract events.\n * @example\n *\n * ### Using event extensions\n *\n * The `thirdweb/extesions` export contains event definitions for many popular contracts.\n * You can use these event definitions to watch for specific events with a type-safe API.\n *\n * ```jsx\n * import { useContractEvents } from \"thirdweb/react\";\n * import { tokensClaimedEvent } from \"thirdweb/extensions/erc721\";\n *\n * const account = useActiveAccount();\n * const contractEvents = useContractEvents({\n *  contract,\n *  events: [tokensClaimedEvent({ claimer: account?.address })],\n * });\n * ```\n *\n * ### Using custom events\n *\n * You can also watch for custom events by passing an array of [prepared events](https://portal.thirdweb.com/references/typescript/v5/prepareEvent).\n *\n * ```jsx\n * import { useContractEvents } from \"thirdweb/react\";\n * import { prepareEvent } from \"thirdweb\";\n *\n * const myEvent = prepareEvent({\n *  signature: \"event MyEvent(uint256 myArg)\",\n * });\n *\n * const contractEvents = useContractEvents({\n *  contract,\n *  events: [myEvent],\n * });\n * ```\n *\n * @contract\n */\nexport function useContractEvents<\n  const abi extends Abi,\n  const abiEvents extends PreparedEvent<AbiEvent>[],\n>(\n  options: UseContractEventsOptions<abi, abiEvents>,\n): UseQueryResult<ParseEventLogsResult<abiEvents, true>, Error> {\n  const {\n    contract,\n    events,\n    blockRange = 2000,\n    enabled = true,\n    watch = true,\n  } = options;\n  const latestBlockNumber = useRef<bigint>(undefined); // We use this to keep track of the latest block number when new pollers are spawned\n\n  const queryClient = useQueryClient();\n\n  const eventsKey = useMemo(\n    () =>\n      events?.reduce((acc, curr) => {\n        // we can use the event hash as a unique identifier?\n        return `${acc}${curr.hash}_`;\n      }, \"\") || \"__all__\",\n    [events],\n  );\n\n  const queryKey = useMemo(\n    () => [contract.chain.id, contract.address, \"logs\", eventsKey] as const,\n    [contract.address, contract.chain, eventsKey],\n  );\n\n  const query = useQuery({\n    enabled,\n    queryFn: async () => {\n      const rpcRequest = getRpcClient(contract);\n      const currentBlockNumber = await eth_blockNumber(rpcRequest);\n      latestBlockNumber.current = currentBlockNumber;\n      const initialEvents = await getContractEvents({\n        contract,\n        events: events,\n        fromBlock: currentBlockNumber - BigInt(blockRange),\n      });\n      return initialEvents;\n    },\n    queryKey,\n  });\n\n  useEffect(() => {\n    if (!enabled || !watch) {\n      // don't watch if not enabled or if watch is false\n      return;\n    }\n\n    // the return is important here because it will unwatch the events\n    return watchContractEvents<abi, abiEvents>({\n      contract,\n      events,\n      latestBlockNumber: latestBlockNumber.current,\n      onEvents: (newEvents) => {\n        if (newEvents.length > 0 && newEvents[0]) {\n          latestBlockNumber.current = newEvents[0].blockNumber; // Update the latest block number to avoid duplicate events if a new poller is spawned during this block\n        }\n        // biome-ignore lint/suspicious/noExplicitAny: TODO: fix any\n        queryClient.setQueryData(queryKey, (oldEvents: any = []) => [\n          ...oldEvents,\n          ...newEvents,\n        ]);\n      },\n    });\n  }, [contract, enabled, events, queryClient, queryKey, watch]);\n\n  return query;\n}\n", "import {\n  queryOptions as defineQuery,\n  type UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport type { Abi, AbiFunction, ExtractAbiFunctionNames } from \"abitype\";\nimport type {\n  AbiOfLength,\n  AsyncGetAbiFunctionFromContract,\n} from \"../../../../contract/types.js\";\nimport type { Extension } from \"../../../../extensions/types.js\";\nimport {\n  type ReadContractOptions,\n  type ReadContractResult,\n  readContract,\n} from \"../../../../transaction/read-contract.js\";\nimport type {\n  BaseTransactionOptions,\n  ParseMethod,\n} from \"../../../../transaction/types.js\";\nimport type { PreparedMethod } from \"../../../../utils/abi/prepare-method.js\";\nimport { getFunctionId } from \"../../../../utils/function-id.js\";\nimport { stringify } from \"../../../../utils/json.js\";\nimport type {\n  PickedOnceQueryOptions,\n  WithPickedOnceQueryOptions,\n} from \"../types.js\";\n\n/**\n * A hook to read state from a contract that automatically updates when the contract changes.\n *\n * You can use raw read calls or read [extensions](https://portal.thirdweb.com/react/v5/extensions) to read from a\n * contract.\n *\n * @param options - The options for reading from a contract\n * @returns a UseQueryResult object.\n * @example\n * ```jsx\n * import { getContract } from \"thirdweb\";\n * import { sepolia } from \"thirdweb/chains\";\n * import { useReadContract } from \"thirdweb/react\";\n *\n * const contract = getContract({\n *   client,\n *   address: \"0x...\",\n *   chain: sepolia,\n * });\n *\n * const { data, isLoading } = useReadContract({\n *   contract,\n *   method: \"function tokenURI(uint256 tokenId) returns (string)\"\n *   params: [1n],\n * });\n * ```\n * @contract\n */\nexport function useReadContract<\n  const TAbi extends Abi,\n  const TMethod extends TAbi extends AbiOfLength<0>\n    ? AbiFunction | string\n    : ExtractAbiFunctionNames<TAbi>,\n>(\n  options: WithPickedOnceQueryOptions<ReadContractOptions<TAbi, TMethod>>,\n): UseQueryResult<\n  ReadContractResult<PreparedMethod<ParseMethod<TAbi, TMethod>>[2]>\n>;\n/**\n * A hook to read state from a contract that automatically updates when the contract changes.\n * You can use raw read calls or read [extensions](https://portal.thirdweb.com/react/v5/extensions) to read from a\n * contract.\n *\n * @param extension - An extension to call.\n * @param options - The read extension params.\n * @returns a UseQueryResult object.\n * @example\n *\n * Read a contract extension let you do complex contract queries with less code.\n *\n * ```jsx\n * import { useReadContract } from \"thirdweb/react\";\n * import { getOwnedNFTs } form \"thirdweb/extensions/erc721\";\n *\n * const { data, isLoading } = useReadContract(getOwnedNFTs, { contract, owner: address });\n * ```\n */\nexport function useReadContract<\n  const TAbi extends Abi,\n  const TParams extends object,\n  TResult,\n>(\n  extension: Extension<TAbi, TParams, TResult>,\n  options: WithPickedOnceQueryOptions<BaseTransactionOptions<TParams, TAbi>>,\n): UseQueryResult<TResult>;\n\nexport function useReadContract<\n  const TAbi extends Abi,\n  const TMethod extends TAbi extends AbiOfLength<0>\n    ? AbiFunction | `function ${string}` | AsyncGetAbiFunctionFromContract<TAbi>\n    : ExtractAbiFunctionNames<TAbi>,\n  const TParams extends object,\n  TResult,\n>(\n  extensionOrOptions:\n    | Extension<TAbi, TParams, TResult>\n    | WithPickedOnceQueryOptions<ReadContractOptions<TAbi, TMethod>>,\n  options?: WithPickedOnceQueryOptions<BaseTransactionOptions<TParams, TAbi>>,\n) {\n  type QueryKey = readonly [\n    \"readContract\",\n    number | string,\n    string,\n    string | PreparedMethod<ParseMethod<TAbi, TMethod>>,\n    string,\n  ];\n  type QueryFn = () => Promise<\n    TResult | ReadContractResult<PreparedMethod<ParseMethod<TAbi, TMethod>>[2]>\n  >;\n\n  let queryKey: QueryKey | undefined;\n  let queryFn: QueryFn | undefined;\n  let queryOpts: PickedOnceQueryOptions | undefined;\n\n  // extension case\n  if (typeof extensionOrOptions === \"function\") {\n    if (!options) {\n      throw new Error(\n        `Missing second argument for \"useReadContract(<extension>, <options>)\" hook.`,\n      ) as never;\n    }\n    const { queryOptions, contract, ...params } = options;\n    queryOpts = queryOptions;\n\n    queryKey = [\n      \"readContract\",\n      contract.chain.id,\n      contract.address,\n      getFunctionId(extensionOrOptions),\n      stringify(params),\n    ] as const;\n\n    queryFn = () =>\n      extensionOrOptions({\n        ...(params as TParams),\n        contract,\n      });\n  }\n  // raw tx case\n  if (\"method\" in extensionOrOptions) {\n    const { queryOptions, ...tx } = extensionOrOptions;\n    queryOpts = queryOptions;\n\n    queryKey = [\n      \"readContract\",\n      tx.contract.chain.id,\n      tx.contract.address,\n      tx.method,\n      stringify(tx.params),\n    ] as const;\n\n    queryFn = () => readContract(extensionOrOptions);\n  }\n\n  if (!queryKey || !queryFn) {\n    throw new Error(\n      `Invalid \"useReadContract\" options. Expected either a read extension or a transaction object.`,\n    ) as never;\n  }\n\n  return useQuery(\n    defineQuery({\n      queryFn: queryFn as QueryFn,\n      queryKey: queryKey as QueryKey,\n      ...(queryOpts ?? {}),\n    }),\n  );\n}\n", "import { useQueryClient } from \"@tanstack/react-query\";\n\n/**\n * @internal\n */\nexport function useInvalidateContractQuery() {\n  const queryClient = useQueryClient();\n\n  return ({\n    chainId,\n    contractAddress,\n  }: {\n    chainId: number;\n    contractAddress: string;\n  }) => {\n    queryClient.invalidateQueries({\n      queryKey: [\"readContract\", chainId, contractAddress],\n    });\n  };\n}\n", "import type { ThirdwebClient } from \"../client/client.js\";\nimport { getClientFetch } from \"../utils/fetch.js\";\nimport type { BuyWithCryptoStatus } from \"./buyWithCrypto/getStatus.js\";\nimport type { BuyWithFiatStatus } from \"./buyWithFiat/getStatus.js\";\nimport { getPayBuyHistoryEndpoint } from \"./utils/definitions.js\";\n\n/**\n * The parameters for [`getBuyHistory`](https://portal.thirdweb.com/references/typescript/v5/getBuyHistory) function\n * @buyCrypto\n */\nexport type BuyHistoryParams = {\n  /**\n   * A client is the entry point to the thirdweb SDK. It is required for all other actions.\n   *\n   * You can create a client using the `createThirdwebClient` function.\n   * Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   */\n  client: ThirdwebClient;\n  /**\n   * The wallet address to get the buy history for.\n   */\n  walletAddress: string;\n  /**\n   * The number of results to return.\n   *\n   * The default value is `10`.\n   */\n  count: number;\n  /**\n   * Index of the first result to return. The default value is `0`.\n   */\n  start: number;\n};\n\n/**\n * The result for [`getBuyHistory`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoHistory) function\n *\n * It includes both \"Buy with Crypto\" and \"Buy with Fiat\" transactions\n *\n * @buyCrypto\n */\nexport type BuyHistoryData = {\n  /**\n   * The list of buy transactions.\n   */\n  page: Array<\n    | {\n        buyWithFiatStatus: BuyWithFiatStatus;\n      }\n    | {\n        buyWithCryptoStatus: BuyWithCryptoStatus;\n      }\n  >;\n  /**\n   * Whether there are more pages of results.\n   */\n  hasNextPage: boolean;\n};\n\n/**\n * Get Buy transaction history for a given wallet address.\n *\n * This includes both \"Buy with Cryto\" and \"Buy with Fiat\" transactions\n *\n * @param params Object of type [`BuyHistoryParams`](https://portal.thirdweb.com/references/typescript/v5/BuyHistoryParams)\n * @example\n * ```ts\n * import { createThirdwebClient } from \"thirdweb\";\n * import { getBuyHistory } from \"thirdweb/pay\";\n *\n * const client = createThirdwebClient({ clientId: \"...\" });\n *\n * const history = await getBuyHistory({\n *  client,\n *  walletAddress: \"0x...\",\n * })\n * ```\n * @buyCrypto\n */\nexport async function getBuyHistory(\n  params: BuyHistoryParams,\n): Promise<BuyHistoryData> {\n  try {\n    const queryParams = new URLSearchParams();\n    queryParams.append(\"walletAddress\", params.walletAddress);\n    queryParams.append(\"start\", params.start.toString());\n    queryParams.append(\"count\", params.count.toString());\n\n    const queryString = queryParams.toString();\n    const url = `${getPayBuyHistoryEndpoint()}?${queryString}`;\n\n    const response = await getClientFetch(params.client)(url);\n\n    // Assuming the response directly matches the SwapResponse interface\n    if (!response.ok) {\n      const error = await response.text().catch(() => null);\n      throw new Error(\n        `HTTP error! status: ${response.status} - ${response.statusText}: ${error || \"unknown error\"}`,\n      );\n    }\n\n    const data: BuyHistoryData = (await response.json()).result;\n    return data;\n  } catch (error) {\n    throw new Error(`Fetch failed: ${error}`);\n  }\n}\n", "import {\n  type UseQueryOptions,\n  type UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport {\n  type BuyHistoryData,\n  type BuyHistoryParams,\n  getBuyHistory,\n} from \"../../../../pay/getBuyHistory.js\";\n\n/**\n * @internal\n */\nexport type BuyHistoryQueryOptions = Omit<\n  UseQueryOptions<BuyHistoryData>,\n  \"queryFn\" | \"queryKey\" | \"enabled\"\n>;\n\n/**\n * Hook to get the history of Buy transactions for a given wallet - This includes both \"buy with crypto\" and \"buy with fiat\" transactions.\n *\n * This hook is a React Query wrapper of the [`getBuyHistory`](https://portal.thirdweb.com/references/typescript/v5/getBuyHistory) function.\n * You can also use that function directly\n *\n * @param params - object of type [`BuyHistoryParams`](https://portal.thirdweb.com/references/typescript/v5/BuyHistoryParams)\n * @param queryParams - options to configure the react query\n * @returns A React Query object which contains the data of type [`BuyHistoryData`](https://portal.thirdweb.com/references/typescript/v5/BuyHistoryData)\n * @example\n * ```tsx\n * import { useBuyHistory } from \"thirdweb/react\";\n *\n * function Component() {\n *  const buyHistoryQuery = useBuyHistory(params);\n *  return <div> ... </div>\n * }\n * ```\n * @buyCrypto\n */\nexport function useBuyHistory(\n  params?: BuyHistoryParams,\n  queryParams?: BuyHistoryQueryOptions,\n): UseQueryResult<BuyHistoryData> {\n  return useQuery({\n    ...queryParams,\n    enabled: !!params,\n    queryFn: () => {\n      if (!params) {\n        throw new Error(\"params are required\");\n      }\n      return getBuyHistory(params);\n    },\n    queryKey: [\"getBuyHistory\", params],\n  });\n}\n", "import {\n  type UseQueryOptions,\n  type UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport {\n  type BuyWithCryptoHistoryData,\n  type BuyWithCryptoHistoryParams,\n  getBuyWithCryptoHistory,\n} from \"../../../../pay/buyWithCrypto/getHistory.js\";\n\n/**\n * @internal\n */\nexport type BuyWithCryptoHistoryQueryOptions = Omit<\n  UseQueryOptions<BuyWithCryptoHistoryData>,\n  \"queryFn\" | \"queryKey\" | \"enabled\"\n>;\n\n/**\n * Hook to get the \"Buy with crypto\" transaction history for a given wallet address.\n *\n * This hook is a React Query wrapper of the [`getBuyWithCryptoHistory`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoHistory) function.\n * You can also use that function directly\n * @param params - object of type [`BuyWithCryptoHistoryParams`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoHistoryParams)\n * @param queryParams - options to configure the react query\n * @returns A React Query object which contains the data of type [`BuyWithCryptoHistoryData`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoHistoryData)\n * @example\n * ```tsx\n * import { useBuyWithCryptoHistory } from \"thirdweb/react\";\n *\n * function Component() {\n *  const buyWithCryptoHistory = useBuyWithCryptoHistory(params);\n *  return <div> ... </div>\n * }\n * ```\n * @deprecated\n * @buyCrypto\n */\nexport function useBuyWithCryptoHistory(\n  params?: BuyWithCryptoHistoryParams,\n  queryParams?: BuyWithCryptoHistoryQueryOptions,\n): UseQueryResult<BuyWithCryptoHistoryData> {\n  return useQuery({\n    ...queryParams,\n    enabled: !!params,\n    queryFn: () => {\n      if (!params) {\n        throw new Error(\"Swap params are required\");\n      }\n      return getBuyWithCryptoHistory(params);\n    },\n    queryKey: [\"getBuyWithCryptoHistory\", params],\n  });\n}\n", "import type { ThirdwebClient } from \"../../client/client.js\";\nimport { getClientFetch } from \"../../utils/fetch.js\";\nimport { getPayBuyWithFiatHistoryEndpoint } from \"../utils/definitions.js\";\nimport type { BuyWithFiatStatus } from \"./getStatus.js\";\n\n/**\n * The parameters for [`getBuyWithFiatHistory`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatHistory) function\n * @deprecated\n * @buyCrypto\n */\nexport type BuyWithFiatHistoryParams = {\n  /**\n   * A client is the entry point to the thirdweb SDK. It is required for all other actions.\n   *\n   * You can create a client using the `createThirdwebClient` function.\n   * Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   */\n  client: ThirdwebClient;\n  /**\n   * The address of the wallet to get the wallet history for\n   */\n  walletAddress: string;\n  /**\n   * The number of results to return in a single page. The default value is `10`.\n   */\n  count: number;\n  /**\n   * index of the first result to return. The default value is `0`.\n   *\n   * If you want to start the list from nth item, you can set the start value to (n-1).\n   */\n  start: number;\n};\n\n/**\n * The results for [`getBuyWithFiatHistory`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatHistory) function\n * @buyCrypto\n */\nexport type BuyWithFiatHistoryData = {\n  page: BuyWithFiatStatus[];\n  hasNextPage: boolean;\n};\n\n/**\n * Get the \"Buy with fiat\" transaction history for a given wallet address\n * @param params Object of type [`BuyWithFiatHistoryParams`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatHistoryParams)\n * @example\n *\n * ```ts\n * import { createThirdwebClient } from \"thirdweb\";\n * import { getBuyWithFiatHistory } from \"thirdweb/pay\";\n *\n * const client = createThirdwebClient({ clientId: \"...\" });\n *\n * // get the 10 latest \"Buy with fiat\" transactions dony by the wallet\n * const history = await getBuyWithFiatHistory({\n *  client: client,\n *  walletAddress: '0x...',\n *  start: 0,\n *  count: 10,\n * })\n * ```\n * @returns Object of type [`BuyWithFiatHistoryData`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatHistoryData)\n * @deprecated\n * @buyCrypto\n */\nexport async function getBuyWithFiatHistory(\n  params: BuyWithFiatHistoryParams,\n): Promise<BuyWithFiatHistoryData> {\n  try {\n    const queryParams = new URLSearchParams();\n    queryParams.append(\"walletAddress\", params.walletAddress);\n    queryParams.append(\"start\", params.start.toString());\n    queryParams.append(\"count\", params.count.toString());\n\n    const queryString = queryParams.toString();\n    const url = `${getPayBuyWithFiatHistoryEndpoint()}?${queryString}`;\n\n    const response = await getClientFetch(params.client)(url);\n\n    // Assuming the response directly matches the BuyWithFiatStatus response interface\n    if (!response.ok) {\n      const error = await response.text().catch(() => null);\n      throw new Error(\n        `HTTP error! status: ${response.status} - ${response.statusText}: ${error || \"unknown error\"}`,\n      );\n    }\n\n    const data: BuyWithFiatHistoryData = (await response.json()).result;\n    return data;\n  } catch (error) {\n    throw new Error(`Fetch failed: ${error}`);\n  }\n}\n", "import {\n  type UseQueryOptions,\n  type UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport {\n  type BuyWithFiatHistoryData,\n  type BuyWithFiatHistoryParams,\n  getBuyWithFiatHistory,\n} from \"../../../../pay/buyWithFiat/getHistory.js\";\n\n/**\n * @internal\n */\nexport type BuyWithFiatHistoryQueryOptions = Omit<\n  UseQueryOptions<BuyWithFiatHistoryData>,\n  \"queryFn\" | \"queryKey\" | \"enabled\"\n>;\n\n/**\n * Hook to get the \"Buy with Fiat\" transaction history for a given wallet address.\n *\n * This hook is a React Query wrapper of the [`getBuyWithFiatHistory`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatHistory) function.\n * You can also use that function directly\n * @param params - object of type [`BuyWithFiatHistoryParams`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatHistoryParams)\n * @param queryParams - options to configure the react query\n * @returns A React Query object which contains the data of type [`BuyWithFiatHistoryData`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatHistoryData)\n * @example\n * ```tsx\n * import { useBuyWithFiatHistory } from \"thirdweb/react\";\n *\n * function Component() {\n *  const historyQuery = useBuyWithFiatHistory(params);\n *  return <div> ... </div>\n * }\n * ```\n * @deprecated\n * @buyCrypto\n */\nexport function useBuyWithFiatHistory(\n  params?: BuyWithFiatHistoryParams,\n  queryParams?: BuyWithFiatHistoryQueryOptions,\n): UseQueryResult<BuyWithFiatHistoryData> {\n  return useQuery({\n    ...queryParams,\n    enabled: !!params,\n    queryFn: () => {\n      if (!params) {\n        throw new Error(\"params are required\");\n      }\n      return getBuyWithFiatHistory(params);\n    },\n    queryKey: [\"buyWithFiatHistory\", params],\n  });\n}\n", "import type { ThirdwebClient } from \"../../client/client.js\";\nimport {\n  type BuyWithCryptoQuote,\n  getBuyWithCryptoQuote,\n} from \"../buyWithCrypto/getQuote.js\";\nimport type { BuyWithFiatStatus } from \"./getStatus.js\";\n\n/**\n * The parameters for [`getPostOnRampQuote`](https://portal.thirdweb.com/references/typescript/v5/getPostOnRampQuote) function\n * @buyCrypto\n */\nexport type GetPostOnRampQuoteParams = {\n  /**\n   * A client is the entry point to the thirdweb SDK. It is required for all other actions.\n   *\n   * You can create a client using the `createThirdwebClient` function.\n   * Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   */\n  client: ThirdwebClient;\n  /**\n   * The \"Buy with fiat\" transaction status object returned by [`getBuyWithFiatStatus`](https://portal.thirdweb.com/typescript/v5/getBuyWithFiatStatus) function\n   */\n  buyWithFiatStatus: BuyWithFiatStatus;\n\n  /**\n   * @hidden\n   */\n  paymentLinkId?: string;\n};\n\n/**\n * When buying a token with fiat currency - It only involes doing on-ramp if the on-ramp provider supports buying the given destination token directly.\n *\n * If the on-ramp provider does not support buying the destination token directly, user can be sent an intermediate token with fiat currency from the on-ramp provider which\n * can be swapped to destination token onchain.\n *\n * `getPostOnRampQuote` function is used to get the quote for swapping the on-ramp token to destination token.\n *\n * When you get a \"Buy with Fiat\" status of type \"CRYPTO_SWAP_REQUIRED\" from the [`getBuyWithFiatStatus`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatStatus) function,\n *  you can use `getPostOnRampQuote` function to get the quote of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote) for swapping the on-ramp token to destination token\n *\n * Once you have the quote, you can start the Swap process by following the same steps as mentioned in the [`getBuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoQuote) documentation.\n *\n * @param params - object of type [`GetPostOnRampQuoteParams`](https://portal.thirdweb.com/references/typescript/v5/GetPostOnRampQuoteParams)\n * @returns Object of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote) which contains the information about the quote such as processing fees, estimated time, converted token amounts, etc.\n * @example\n * ```ts\n * import { getPostOnRampQuote, getBuyWithFiatStatus } from \"thirdweb/pay\";\n *\n * // previous steps\n * const fiatQuote = await getBuyWithFiatQuote(fiatQuoteParams);\n * window.open(fiatQuote.onRampLink, \"_blank\");\n * const buyWithFiatStatus = await getBuyWithFiatStatus({ client, intentId }); // keep calling this until status is \"settled\" state\n *\n * // when a swap is required after onramp\n * if (buyWithFiatStatus.status === \"CRYPTO_SWAP_REQUIRED\") {\n *  const buyWithCryptoQuote = await getPostOnRampQuote({\n *    client,\n *    buyWithFiatStatus\n *  });\n * }\n * ```\n * @deprecated\n * @buyCrypto\n */\nexport async function getPostOnRampQuote({\n  client,\n  buyWithFiatStatus,\n  paymentLinkId,\n}: GetPostOnRampQuoteParams): Promise<BuyWithCryptoQuote> {\n  if (buyWithFiatStatus.status === \"NOT_FOUND\") {\n    throw new Error(\"Invalid buyWithFiatStatus\");\n  }\n\n  return getBuyWithCryptoQuote({\n    client,\n    // onramp always happens to fromAddress, and then swap is done from - fromAddress to toAddress\n    fromAddress: buyWithFiatStatus.fromAddress,\n    fromChainId: buyWithFiatStatus.quote.onRampToken.chainId,\n    fromTokenAddress: buyWithFiatStatus.quote.onRampToken.tokenAddress,\n    intentId: buyWithFiatStatus.intentId,\n    paymentLinkId: paymentLinkId,\n    toAddress: buyWithFiatStatus.toAddress,\n    toAmount: buyWithFiatStatus.quote.estimatedToTokenAmount,\n    toChainId: buyWithFiatStatus.quote.toToken.chainId,\n    toTokenAddress: buyWithFiatStatus.quote.toToken.tokenAddress,\n  });\n}\n", "import {\n  type UseQueryOptions,\n  type UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport type { BuyWithCryptoQuote } from \"../../../../pay/buyWithCrypto/getQuote.js\";\nimport {\n  type GetPostOnRampQuoteParams,\n  getPostOnRampQuote,\n} from \"../../../../pay/buyWithFiat/getPostOnRampQuote.js\";\n\n/**\n * @internal\n */\nexport type PostOnRampQuoteQueryOptions = Omit<\n  UseQueryOptions<BuyWithCryptoQuote>,\n  \"queryFn\" | \"queryKey\" | \"enabled\"\n>;\n\n/**\n * When buying a token with fiat currency - It only involes doing on-ramp if the on-ramp provider supports buying the given destination token directly.\n *\n * If the on-ramp provider does not support buying the destination token directly, user can be sent an intermediate token with fiat currency from the on-ramp provider which\n * can be swapped to destination token onchain.\n *\n * `usePostOnRampQuote` hook is used to get the quote for swapping the on-ramp token to destination token.\n *\n * When you get a \"Buy with Fiat\" status of type `\"CRYPTO_SWAP_REQUIRED\"` from the [`useBuyWithFiatStatus`](https://portal.thirdweb.com/references/typescript/v5/useBuyWithFiatStatus) hook,\n * you can use `usePostOnRampQuote` hook to get the quote of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote) for swapping the on-ramp token to destination token to complete the step-2 of the process.\n *\n * Once you have the quote, you can start the Swap process by following the same steps as mentioned in the [`useBuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/useBuyWithCryptoQuote) documentation.\n *\n * @param params - object of type [`GetPostOnRampQuoteParams`](https://portal.thirdweb.com/references/typescript/v5/GetPostOnRampQuoteParams)\n * @returns Object of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote) which contains the information about the quote such as processing fees, estimated time, converted token amounts, etc.\n * @buyCrypto\n */\nexport function usePostOnRampQuote(\n  params?: GetPostOnRampQuoteParams,\n  queryOptions?: PostOnRampQuoteQueryOptions,\n): UseQueryResult<BuyWithCryptoQuote> {\n  return useQuery({\n    ...queryOptions,\n    enabled: !!params,\n    queryFn: async () => {\n      if (!params) {\n        throw new Error(\"No params provided\");\n      }\n      return getPostOnRampQuote(params);\n    },\n    queryKey: [\"getPostOnRampQuote\", params],\n  });\n}\n", "import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useEffect, useMemo } from \"react\";\nimport type { Chain } from \"../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport { eth_blockNumber } from \"../../../../rpc/actions/eth_blockNumber.js\";\nimport { getRpcClient } from \"../../../../rpc/rpc.js\";\nimport { watchBlockNumber } from \"../../../../rpc/watchBlockNumber.js\";\n\nexport type UseBlockNumberOptions = {\n  client: ThirdwebClient;\n  chain: Chain;\n  enabled?: boolean;\n  watch?: boolean;\n};\n\n/**\n * Hook that watches for changes in the block number on a given chain.\n * @param options - The options for the hook.\n * @returns The latest block number.\n * @example\n * ```ts\n * import { useBlockNumber } from \"thirdweb/react\";\n * const blockNumber = useBlockNumber({client, chain});\n * ```\n * @utils\n */\nexport function useBlockNumber(options: UseBlockNumberOptions) {\n  const { client, chain, enabled = true, watch = true } = options;\n\n  const queryClient = useQueryClient();\n\n  const queryKey = useMemo(() => [chain.id, \"blockNumber\"] as const, [chain]);\n  const query = useQuery({\n    enabled,\n    queryFn: async () => {\n      const rpcRequest = getRpcClient({ chain, client });\n      return await eth_blockNumber(rpcRequest);\n    },\n    // TODO: technically client should be part of the queryKey here...\n\n    queryKey: queryKey,\n  });\n\n  useEffect(() => {\n    if (!enabled || !watch) {\n      // don't watch if not enabled or not watching\n      return;\n    }\n    return watchBlockNumber({\n      chain,\n      client,\n      onNewBlockNumber: (newBlockNumber) => {\n        queryClient.setQueryData(queryKey, newBlockNumber);\n      },\n    });\n  }, [client, chain, enabled, queryClient, queryKey, watch]);\n\n  return query.data;\n}\n", "import { type UseMutationResult, useMutation } from \"@tanstack/react-query\";\nimport {\n  type EstimateGasResult,\n  estimateGas,\n} from \"../../../../transaction/actions/estimate-gas.js\";\nimport type { PreparedTransaction } from \"../../../../transaction/prepare-transaction.js\";\nimport { useActiveAccount } from \"../wallets/useActiveAccount.js\";\n\n/**\n * A hook to estimate the gas for a given transaction.\n * @returns A mutation object to estimate gas.\n * @example\n * ```jsx\n * import { useEstimateGas } from \"thirdweb/react\";\n * const { mutate: estimateGas, data: gasEstimate } = useEstimateGas();\n *\n * // later\n * const estimatedGas = await estimateGas(tx);\n * ```\n * @transaction\n */\nexport function useEstimateGas(): UseMutationResult<\n  EstimateGasResult,\n  Error,\n  PreparedTransaction\n> {\n  const account = useActiveAccount();\n  return useMutation({\n    mutationFn: (transaction) => estimateGas({ account, transaction }),\n  });\n}\n", "import { type UseMutationResult, useMutation } from \"@tanstack/react-query\";\nimport {\n  type EstimateGasCostResult,\n  estimateGasCost,\n} from \"../../../../transaction/actions/estimate-gas-cost.js\";\nimport type { PreparedTransaction } from \"../../../../transaction/prepare-transaction.js\";\nimport { useActiveAccount } from \"../wallets/useActiveAccount.js\";\n\n/**\n * A hook to estimate the gas cost in ether and wei for a given transaction.\n * @returns A mutation object to estimate gas cost.\n * @example\n * ```jsx\n * import { useEstimateGasCost } from \"thirdweb/react\";\n * const { mutate: estimateGasCost, data: gasEstimate } = useEstimateGas();\n *\n * // later\n * const estimatedGas = await estimateGasCost(tx);\n * console.log(\"gas cost in ether\", estimatedGas.ether);\n * ```\n * @transaction\n */\nexport function useEstimateGasCost(): UseMutationResult<\n  EstimateGasCostResult,\n  Error,\n  PreparedTransaction\n> {\n  const account = useActiveAccount();\n  return useMutation({\n    mutationFn: (transaction) => estimateGasCost({ account, transaction }),\n  });\n}\n", "import { type UseMutationResult, useMutation } from \"@tanstack/react-query\";\nimport type { GaslessOptions } from \"../../../../transaction/actions/gasless/types.js\";\nimport { sendAndConfirmTransaction } from \"../../../../transaction/actions/send-and-confirm-transaction.js\";\nimport type { PreparedTransaction } from \"../../../../transaction/prepare-transaction.js\";\nimport type { TransactionReceipt } from \"../../../../transaction/types.js\";\nimport { useActiveAccount } from \"../wallets/useActiveAccount.js\";\n\n/**\n * Configuration for the `useSendTransaction` hook.\n */\ntype SendAndConfirmTransactionConfig = {\n  /**\n   * Configuration for gasless transactions.\n   * Refer to [`GaslessOptions`](https://portal.thirdweb.com/references/typescript/v5/GaslessOptions) for more details.\n   */\n  gasless?: GaslessOptions;\n};\n\n/**\n * A hook to send a transaction.\n * @returns A mutation object to send a transaction.\n * @example\n * ```jsx\n * import { useSendAndConfirmTransaction } from \"thirdweb/react\";\n * const { mutate: sendAndConfirmTx, data: transactionReceipt } = useSendAndConfirmTransaction();\n *\n * // later\n * sendAndConfirmTx(tx);\n * ```\n *\n *\n * ### Gasless usage with [thirdweb Engine](https://portal.thirdweb.com/engine)\n * ```tsx\n * import { useSendAndConfirmTransaction } from \"thirdweb/react\";\n * const mutation = useSendAndConfirmTransaction({\n *   gasless: {\n *     provider: \"engine\",\n *     relayerUrl: \"https://thirdweb.engine-***.thirdweb.com/relayer/***\",\n *     relayerForwarderAddress: \"0x...\",\n *   }\n * });\n * ```\n *\n * ### Gasless usage with OpenZeppelin\n * ```tsx\n * import { useSendAndConfirmTransaction } from \"thirdweb/react\";\n * const mutation = useSendAndConfirmTransaction({\n *   gasless: {\n *     provider: \"openzeppelin\",\n *     relayerUrl: \"https://...\",\n *     relayerForwarderAddress: \"0x...\",\n *   }\n * });\n * ```\n * @transaction\n */\nexport function useSendAndConfirmTransaction(\n  config: SendAndConfirmTransactionConfig = {},\n): UseMutationResult<TransactionReceipt, Error, PreparedTransaction> {\n  const account = useActiveAccount();\n  const { gasless } = config;\n  return useMutation({\n    mutationFn: async (transaction) => {\n      if (!account) {\n        throw new Error(\"No active account\");\n      }\n      return await sendAndConfirmTransaction({\n        account,\n        gasless,\n        transaction,\n      });\n    },\n  });\n}\n", "import { type UseMutationResult, useMutation } from \"@tanstack/react-query\";\nimport { sendBatchTransaction } from \"../../../../transaction/actions/send-batch-transaction.js\";\nimport type { WaitForReceiptOptions } from \"../../../../transaction/actions/wait-for-tx-receipt.js\";\nimport type { PreparedTransaction } from \"../../../../transaction/prepare-transaction.js\";\nimport { useActiveAccount } from \"../wallets/useActiveAccount.js\";\n\n/**\n * A hook to send a transaction.\n * @returns A mutation object to send a transaction.\n * @example\n * ```jsx\n * import { useSendBatchTransaction } from \"thirdweb/react\";\n * const { mutate: sendBatch, data: transactionResult } = useSendBatchTransaction();\n *\n * // later\n * sendBatch([tx1, tx2]);\n * ```\n * @transaction\n */\nexport function useSendBatchTransaction(): UseMutationResult<\n  WaitForReceiptOptions,\n  Error,\n  PreparedTransaction[]\n> {\n  const account = useActiveAccount();\n  return useMutation({\n    mutationFn: async (transactions) => {\n      if (!account) {\n        throw new Error(\"No active account\");\n      }\n      return await sendBatchTransaction({\n        account,\n        transactions,\n      });\n    },\n  });\n}\n", "import { type UseMutationResult, useMutation } from \"@tanstack/react-query\";\nimport type { Abi, AbiFunction } from \"abitype\";\nimport {\n  type SimulateOptions,\n  simulateTransaction,\n} from \"../../../../transaction/actions/simulate.js\";\n\n/**\n * A hook to simulate a transaction.\n * @returns A mutation object to simulate a transaction.\n * @example\n * ```jsx\n * import { useSimulateTransaction } from \"thirdweb/react\";\n * const { mutate: simulateTx } = useSimulateTransaction();\n *\n * // later\n * const result = await simulateTx(tx);\n * ```\n * @transaction\n */\nexport function useSimulateTransaction<\n  const abi extends Abi,\n  const abiFn extends AbiFunction,\n>(): UseMutationResult<\n  Awaited<ReturnType<typeof simulateTransaction>>,\n  Error,\n  SimulateOptions<abi, abiFn>\n> {\n  return useMutation({\n    mutationFn: (options) => simulateTransaction(options),\n  });\n}\n", "import type { ApiError } from \"../../../bridge/types/Errors.js\";\n\n/**\n * Maps raw ApiError instances from the Bridge SDK into UI-friendly domain errors.\n * Currently returns the same error; will evolve to provide better user-facing messages.\n *\n * @param e - The raw ApiError from the Bridge SDK\n * @returns The mapped ApiError (currently unchanged)\n */\nexport function mapBridgeError(e: ApiError): ApiError {\n  // For now, return the same error\n  // TODO: This will evolve to provide better user-facing error messages\n  return e;\n}\n\n/**\n * Determines if an error code represents a retryable error condition.\n *\n * @param code - The error code from ApiError\n * @returns true if the error is retryable, false otherwise\n */\nexport function isRetryable(code: ApiError[\"code\"]): boolean {\n  // Treat INTERNAL_SERVER_ERROR & UNKNOWN_ERROR as retryable\n  return code === \"INTERNAL_SERVER_ERROR\" || code === \"UNKNOWN_ERROR\";\n}\n", "import { useQuery } from \"@tanstack/react-query\";\nimport type { routes as RoutesTypes } from \"../../../bridge/Routes.js\";\nimport { routes } from \"../../../bridge/Routes.js\";\nimport { ApiError } from \"../../../bridge/types/Errors.js\";\nimport { mapBridgeError } from \"../errors/mapBridgeError.js\";\n\n/**\n * Parameters for the useBridgeRoutes hook\n */\nexport type UseBridgeRoutesParams = RoutesTypes.Options & {\n  /**\n   * Whether to enable the query. Useful for conditional fetching.\n   * @default true\n   */\n  enabled?: boolean;\n};\n\n/**\n * Hook that fetches available bridge routes with caching and retry logic\n *\n * @param params - Parameters for fetching routes including client and filter options\n * @returns React Query result with routes data, loading state, and error handling\n *\n * @example\n * ```tsx\n * const { data: routes, isLoading, error } = useBridgeRoutes({\n *   client: thirdwebClient,\n *   originChainId: 1,\n *   destinationChainId: 137,\n *   originTokenAddress: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\"\n * });\n * ```\n */\nexport function useBridgeRoutes(params: UseBridgeRoutesParams) {\n  const { enabled = true, ...routeParams } = params;\n\n  return useQuery({\n    enabled: enabled && !!routeParams.client,\n    gcTime: 10 * 60 * 1000,\n    queryFn: () => routes(routeParams),\n    queryKey: [\n      \"bridge-routes\",\n      {\n        destinationChainId: routeParams.destinationChainId,\n        destinationTokenAddress: routeParams.destinationTokenAddress,\n        limit: routeParams.limit,\n        maxSteps: routeParams.maxSteps,\n        offset: routeParams.offset,\n        originChainId: routeParams.originChainId,\n        originTokenAddress: routeParams.originTokenAddress,\n        sortBy: routeParams.sortBy,\n      },\n    ], // 5 minutes - routes are relatively stable\n    retry: (failureCount, error) => {\n      // Handle both ApiError and generic Error instances\n      if (error instanceof ApiError) {\n        const bridgeError = mapBridgeError(error);\n\n        // Don't retry on client-side errors (4xx)\n        if (\n          bridgeError.statusCode &&\n          bridgeError.statusCode >= 400 &&\n          bridgeError.statusCode < 500\n        ) {\n          return false;\n        }\n      }\n\n      // Retry up to 3 times for server errors or network issues\n      return failureCount < 3;\n    }, // 10 minutes garbage collection\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\n    staleTime: 5 * 60 * 1000, // Exponential backoff, max 30s\n  });\n}\n", "import { useActiveAccount } from \"./useActiveAccount.js\";\nimport { useActiveWallet } from \"./useActiveWallet.js\";\n\n/**\n * A hook that returns the authentication token (JWT) for the currently active wallet.\n * This token can be used to authorize API calls to your backend server.\n *\n * @returns The JWT string if the active wallet is an in-app wallet and matches the active account, null otherwise\n *\n * @example\n * ```tsx\n * function MyComponent() {\n *   const authToken = useAuthToken();\n *\n *   const fetchData = async () => {\n *     const response = await fetch('https://api.example.com/data', {\n *       headers: {\n *         'Authorization': `Bearer ${authToken}`\n *       }\n *     });\n *     // ... handle response\n *   };\n * }\n * ```\n *\n * @wallet\n */\nexport function useAuthToken() {\n  const activeWallet = useActiveWallet();\n  const activeAccount = useActiveAccount();\n  // if the active wallet is an in-app wallet and the active account is the same as the active wallet's account, return the auth token for the in-app wallet\n  if (\n    activeWallet?.getAuthToken &&\n    activeAccount &&\n    activeAccount.address === activeWallet.getAccount()?.address\n  ) {\n    return activeWallet.getAuthToken();\n  }\n  // all other wallets don't expose an auth token for now\n  return null;\n}\n", "import { getAddress } from \"../../utils/address.js\";\nimport type { Prettify } from \"../../utils/type-utils.js\";\nimport {\n  type CoinbaseWalletCreationOptions,\n  isCoinbaseSDKWallet,\n} from \"../coinbase/coinbase-web.js\";\nimport { isInAppWallet } from \"../in-app/core/wallet/index.js\";\nimport { getInjectedProvider } from \"../injected/index.js\";\nimport type { Ethereum } from \"../interfaces/ethereum.js\";\nimport type { Wallet } from \"../interfaces/wallet.js\";\nimport { isWalletConnect } from \"../wallet-connect/controller.js\";\nimport type { WalletId } from \"../wallet-types.js\";\nimport type { WalletCapabilities, WalletCapabilitiesRecord } from \"./types.js\";\n\nexport type GetCapabilitiesOptions<ID extends WalletId = WalletId> = {\n  wallet: Wallet<ID>;\n  chainId?: number;\n};\n\nexport type GetCapabilitiesResult = Prettify<\n  WalletCapabilitiesRecord<WalletCapabilities, number>\n>;\n\n/**\n * Get the capabilities of a wallet based on the [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792) specification.\n *\n *  This function is dependent on the wallet's support for EIP-5792, but will not throw.\n * **The returned object contains a `message` field detailing any issues with the wallet's support for EIP-5792.**\n *\n * @param {GetCapabilitiesOptions} options\n * @param {Wallet} options.wallet - The wallet to get the capabilities of.\n * @returns {Promise<GetCapabilitiesResult>} - A promise that resolves to the capabilities of the wallet based on the [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792) spec.\n * @beta\n * @example\n * ```ts\n * import { getCapabilities } from \"thirdweb/wallets/eip5792\";\n *\n * const wallet = createWallet(\"com.coinbase.wallet\");\n * const capabilities = await getCapabilities({ wallet });\n * ```\n *\n * @extension EIP5792\n */\nexport async function getCapabilities<const ID extends WalletId = WalletId>({\n  wallet,\n  chainId,\n}: GetCapabilitiesOptions<ID>): Promise<GetCapabilitiesResult> {\n  const account = wallet.getAccount();\n  if (!account) {\n    return {\n      message: `Can't get capabilities, no account connected for wallet: ${wallet.id}`,\n    };\n  }\n\n  if (wallet.id === \"smart\") {\n    const { smartWalletGetCapabilities } = await import(\n      \"../smart/lib/smart-wallet-capabilities.js\"\n    );\n    return smartWalletGetCapabilities({ wallet });\n  }\n\n  if (isInAppWallet(wallet)) {\n    const { inAppWalletGetCapabilities } = await import(\n      \"../in-app/core/eip5972/in-app-wallet-capabilities.js\"\n    );\n    return inAppWalletGetCapabilities({ wallet });\n  }\n\n  // TODO: Add Wallet Connect support\n  if (isWalletConnect(wallet)) {\n    return {\n      message: \"getCapabilities is not yet supported with Wallet Connect\",\n    };\n  }\n\n  let provider: Ethereum;\n  if (isCoinbaseSDKWallet(wallet)) {\n    const { getCoinbaseWebProvider } = await import(\n      \"../coinbase/coinbase-web.js\"\n    );\n    const config = wallet.getConfig() as CoinbaseWalletCreationOptions;\n    provider = (await getCoinbaseWebProvider(config)) as Ethereum;\n  } else {\n    provider = getInjectedProvider(wallet.id);\n  }\n\n  try {\n    const result = await provider.request({\n      method: \"wallet_getCapabilities\",\n      params: [getAddress(account.address)],\n    });\n    const capabilities = {} as WalletCapabilitiesRecord<\n      WalletCapabilities,\n      number\n    >;\n    for (const [chainId, capabilities_] of Object.entries(result)) {\n      capabilities[Number(chainId)] = {};\n      const capabilitiesCopy = {} as WalletCapabilities;\n      for (const [key, value] of Object.entries(capabilities_)) {\n        capabilitiesCopy[key] = value;\n      }\n      capabilities[Number(chainId)] = capabilitiesCopy;\n    }\n    return (\n      typeof chainId === \"number\" ? capabilities[chainId] : capabilities\n    ) as never;\n  } catch (error: unknown) {\n    if (/unsupport|not support|not available/i.test((error as Error).message)) {\n      return {\n        message: `${wallet.id} does not support wallet_getCapabilities, reach out to them directly to request EIP-5792 support.`,\n      };\n    }\n    throw error;\n  }\n}\n", "import { type UseQueryResult, useQuery } from \"@tanstack/react-query\";\nimport {\n  type GetCapabilitiesResult,\n  getCapabilities,\n} from \"../../../../wallets/eip5792/get-capabilities.js\";\nimport { useActiveWallet } from \"./useActiveWallet.js\";\n\n/**\n * A hook to get the current wallet's capabilities according to [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792).\n *\n *  This function is dependent on the wallet's support for EIP-5792, but will not throw.\n * **The returned object contains a `message` field detailing any issues with the wallet's support for EIP-5792.**\n *\n * @returns a React Query object.\n * @beta\n * @example\n * ```tsx\n * import { useCapabilities } from \"thirdweb/react\";\n * const { data: capabilities, isLoading } = useCapabilities();\n * ```\n * @extension EIP5792\n */\nexport function useCapabilities(options?: {\n  chainId?: number;\n  queryOptions?: {\n    enabled?: boolean;\n    retry?: number;\n  };\n}): UseQueryResult<GetCapabilitiesResult> {\n  const wallet = useActiveWallet();\n  return useQuery({\n    queryFn: async () => {\n      if (!wallet) {\n        return {\n          message: \"Can't get capabilities, no wallet connected\",\n        } as const;\n      }\n      return getCapabilities({\n        chainId: options?.chainId,\n        wallet,\n      });\n    },\n    queryKey: [\"getCapabilities\", wallet?.id, options?.chainId] as const,\n    retry: false,\n    ...options?.queryOptions,\n  });\n}\n", "\"use client\";\n\nimport { useSyncExternalStore } from \"react\";\nimport { useConnectionManagerCtx } from \"../../providers/connection-manager.js\";\n\n/**\n * A hook to check if the auto connect is in progress.\n * @example\n * ```jsx\n * function Example() {\n *   const isAutoConnecting = useIsAutoConnecting();\n *\n *   return <div> ... </div>;\n * }\n * ```\n * @returns A boolean indicating if the auto connect is in progress.\n * @walletConnection\n */\nexport function useIsAutoConnecting() {\n  const manager = useConnectionManagerCtx(\"useIsAutoConnecting\");\n  const store = manager.isAutoConnecting;\n  return useSyncExternalStore(store.subscribe, store.getValue, store.getValue);\n}\n", "import type { Abi, AbiFunction } from \"abitype\";\nimport type { WalletSendCallsParameters as ViemWalletSendCallsParameters } from \"viem\";\nimport type { Chain } from \"../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../client/client.js\";\nimport { encode } from \"../../transaction/actions/encode.js\";\nimport type { PreparedTransaction } from \"../../transaction/prepare-transaction.js\";\nimport { type Address, getAddress } from \"../../utils/address.js\";\nimport { type Hex, numberToHex } from \"../../utils/encoding/hex.js\";\nimport { stringify } from \"../../utils/json.js\";\nimport {\n  type PromisedObject,\n  resolvePromisedValue,\n} from \"../../utils/promise/resolve-promised-value.js\";\nimport type { OneOf, Prettify } from \"../../utils/type-utils.js\";\nimport {\n  type CoinbaseWalletCreationOptions,\n  isCoinbaseSDKWallet,\n} from \"../coinbase/coinbase-web.js\";\nimport { isInAppWallet } from \"../in-app/core/wallet/index.js\";\nimport { getInjectedProvider } from \"../injected/index.js\";\nimport type { Ethereum } from \"../interfaces/ethereum.js\";\nimport type { Wallet } from \"../interfaces/wallet.js\";\nimport { isSmartWallet } from \"../smart/index.js\";\nimport { isWalletConnect } from \"../wallet-connect/controller.js\";\nimport type { WalletId } from \"../wallet-types.js\";\nimport type {\n  EIP5792Call,\n  WalletSendCallsId,\n  WalletSendCallsParameters,\n} from \"./types.js\";\n\ntype WalletCall = OneOf<{\n  to?: string | undefined; // TODO: Make this required but compatible with StaticPrepareTransactionOptions to prevent runtime error\n  data?: Hex | undefined;\n  value?: bigint | undefined;\n}>;\n\nexport type PreparedSendCall<\n  abi extends Abi = [],\n  abiFunction extends AbiFunction = AbiFunction,\n> = PreparedTransaction<abi, abiFunction, PrepareCallOptions>;\n\nexport type PrepareCallOptions = {\n  chain: Chain;\n  client: ThirdwebClient;\n} & PromisedObject<WalletCall>;\n\nexport type SendCallsOptions<\n  ID extends WalletId = WalletId,\n  abi extends Abi = [],\n  abiFunction extends AbiFunction = AbiFunction,\n> = Prettify<{\n  wallet: Wallet<ID>;\n  calls: PreparedSendCall<abi, abiFunction>[];\n  capabilities?: WalletSendCallsParameters[number][\"capabilities\"];\n  version?: WalletSendCallsParameters[number][\"version\"];\n  chain?: Chain;\n  atomicRequired?: boolean;\n}>;\n\nexport type SendCallsResult = Prettify<{\n  id: WalletSendCallsId;\n  client: ThirdwebClient;\n  chain: Chain;\n  wallet: Wallet;\n}>;\n\n/**\n * Send [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792) calls to a wallet.\n * This function works with all Thirdweb wallets (in-app and smart) and certain injected wallets that already support EIP-5792.\n * Transactions will be bundled and sponsored when those capabilities are supported, otherwise they will be sent as individual transactions.\n *\n *  This function is dependent on the wallet's support for EIP-5792 and could fail.\n *\n * @param {SendCallsOptions} options\n * @param {Wallet} options.wallet - The wallet to send the calls to.\n * @param {PreparedSendCall[]} options.calls - An array of prepared transactions to send.\n * @param {WalletSendCallsParameters[number][\"capabilities\"]} [options.capabilities] - Capabilities objects to use, see the [EIP-5792 spec](https://eips.ethereum.org/EIPS/eip-5792) for details.\n * @param {string} [options.version=\"1.0\"] - The `wallet_sendCalls` version to use, defaults to \"1.0\".\n * @param {Chain} [options.chain] - A {@link Chain} instance to override the wallet's current chain.\n * @throws an error if the wallet does not support EIP-5792.\n * @returns The ID of the bundle of the calls.\n *\n * @see getCallsStatus for how to retrieve the status of the bundle.\n * @see getCapabilities for how to retrieve the capabilities of the wallet.\n * @beta\n * @example\n * ```ts\n * import { createThirdwebClient } from \"thirdweb\";\n * import { sendCalls } from \"thirdweb/wallets/eip5792\";\n *\n * const client = createThirdwebClient({ clientId: ... });\n * const wallet = createWallet(\"com.coinbase.wallet\");\n * await wallet.connect({ client });\n *\n * const sendTx1 = approve({\n      contract: USDT_CONTRACT,\n      amount: 100,\n      spender: \"0x33d9B8BEfE81027E2C859EDc84F5636cbb202Ed6\",\n    });\n * const sendTx2 = approve({\n      contract: USDT_CONTRACT,\n      amount: 100,\n      spender: \"0x2a4f24F935Eb178e3e7BA9B53A5Ee6d8407C0709\",\n    });\n * const bundleId = await sendCalls({\n *   wallet,\n *   client,\n *   calls: [sendTx1, sendTx2],\n * });\n * ```\n * Sponsor transactions with a paymaster:\n * ```ts\n * const bundleId = await sendCalls({\n *   wallet,\n *   client,\n *   calls: [send1, send2],\n *   capabilities: {\n *     paymasterService: {\n *       url: `https://${CHAIN.id}.bundler.thirdweb.com/${client.clientId}`\n *     }\n *   }\n * });\n * ```\n * We recommend proxying any paymaster calls via an API route you setup and control.\n * \n * @extension EIP5792\n */\nexport async function sendCalls<const ID extends WalletId>(\n  options: SendCallsOptions<ID>,\n): Promise<SendCallsResult> {\n  const {\n    wallet,\n    calls,\n    capabilities,\n    version = \"2.0.0\",\n    chain = wallet.getChain(),\n  } = options;\n\n  if (!chain) {\n    throw new Error(\n      `Cannot send calls, no active chain found for wallet: ${wallet.id}`,\n    );\n  }\n\n  const account = wallet.getAccount();\n  if (!account) {\n    throw new Error(\n      `Cannot send calls, no account connected for wallet: ${wallet.id}`,\n    );\n  }\n\n  const firstCall = options.calls[0];\n  if (!firstCall) {\n    throw new Error(\"No calls to send\");\n  }\n  const client = firstCall.client;\n\n  // These conveniently operate the same\n  if (isSmartWallet(wallet) || isInAppWallet(wallet)) {\n    const { inAppWalletSendCalls } = await import(\n      \"../in-app/core/eip5972/in-app-wallet-calls.js\"\n    );\n    const id = await inAppWalletSendCalls({ account, calls });\n    return { chain, client, id, wallet };\n  }\n\n  const preparedCalls: EIP5792Call[] = await Promise.all(\n    calls.map(async (call) => {\n      const { to, value } = call;\n      if (to === undefined && call.data === undefined) {\n        throw new Error(\"Cannot send call, `to` or `data` must be provided.\");\n      }\n\n      const [_to, _data, _value] = await Promise.all([\n        resolvePromisedValue(to),\n        encode(call),\n        resolvePromisedValue(value),\n      ]);\n\n      return {\n        data: _data as Hex,\n        to: _to as Address,\n        value:\n          typeof _value === \"bigint\" || typeof _value === \"number\"\n            ? numberToHex(_value)\n            : undefined,\n      };\n    }),\n  );\n\n  const injectedWalletCallParams: WalletSendCallsParameters = [\n    {\n      // see: https://eips.ethereum.org/EIPS/eip-5792#wallet_sendcalls\n      atomicRequired: options.atomicRequired ?? false,\n      calls: preparedCalls,\n      capabilities,\n      chainId: numberToHex(chain.id),\n      from: getAddress(account.address),\n      version,\n    },\n  ];\n\n  if (isWalletConnect(wallet)) {\n    throw new Error(\"sendCalls is not yet supported for Wallet Connect\");\n  }\n\n  let provider: Ethereum;\n  if (isCoinbaseSDKWallet(wallet)) {\n    const { getCoinbaseWebProvider } = await import(\n      \"../coinbase/coinbase-web.js\"\n    );\n    const config = wallet.getConfig() as CoinbaseWalletCreationOptions;\n    provider = (await getCoinbaseWebProvider(config)) as Ethereum;\n  } else {\n    provider = getInjectedProvider(wallet.id);\n  }\n\n  try {\n    const callId = await provider.request({\n      method: \"wallet_sendCalls\",\n      params: injectedWalletCallParams as ViemWalletSendCallsParameters, // The viem type definition is slightly different\n    });\n    if (typeof callId === \"object\" && \"id\" in callId) {\n      return { chain, client, id: callId.id, wallet };\n    }\n    return { chain, client, id: callId, wallet };\n  } catch (error) {\n    if (/unsupport|not support/i.test((error as Error).message)) {\n      throw new Error(\n        `${wallet.id} errored calling wallet_sendCalls, with error: ${error instanceof Error ? error.message : stringify(error)}`,\n      );\n    }\n    throw error;\n  }\n}\n", "import type { ThirdwebClient } from \"../../client/client.js\";\nimport { hexToBigInt, hexToNumber } from \"../../utils/encoding/hex.js\";\nimport { isCoinbaseSDKWallet } from \"../coinbase/coinbase-web.js\";\nimport { isInAppWallet } from \"../in-app/core/wallet/index.js\";\nimport { getInjectedProvider } from \"../injected/index.js\";\nimport type { Ethereum } from \"../interfaces/ethereum.js\";\nimport type { Wallet } from \"../interfaces/wallet.js\";\nimport { isSmartWallet } from \"../smart/index.js\";\nimport { isWalletConnect } from \"../wallet-connect/controller.js\";\nimport type {\n  GetCallsStatusRawResponse,\n  GetCallsStatusResponse,\n  WalletSendCallsId,\n} from \"./types.js\";\n\nexport type GetCallsStatusOptions = {\n  wallet: Wallet;\n  client: ThirdwebClient;\n  id: WalletSendCallsId;\n};\n\n/**\n * Get the status of an [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792) bundle.\n *\n *  This function is dependent on the wallet's support for EIP-5792 and could fail.\n *\n * @param {GetCallsStatusOptions} options\n * @param {Wallet} options.wallet - The wallet that send the original calls.\n * @param {ThirdwebClient} options.client - A {@link ThirdwebClient} instance.\n * @param {WalletSendCallsId} options.bundleId - The ID of the bundle to get the status of.\n * @throws an error if the wallet does not support EIP-5792.\n * @returns {Promise<GetCallsStatusResponse>} - A promise that resolves to the bundle's status and receipts (if available). {@link GetCallsStatusResponse}\n * @beta\n * @example\n * ```ts\n *  import { createThirdwebClient } from \"thirdweb\";\n *  import { sendCalls, getCallsStatus } from \"thirdweb/wallets/eip5792\";\n *\n *  const client = createThirdwebClient({ clientId: ... });\n *\n *  const result = await sendCalls({ wallet, client, calls });\n *\n *  let result;\n *  while (result.status !== \"success\") {\n *    result = await getCallsStatus(result);\n *  }\n * ```\n * @extension EIP5792\n */\nexport async function getCallsStatus({\n  wallet,\n  client,\n  id,\n}: GetCallsStatusOptions): Promise<GetCallsStatusResponse> {\n  const account = wallet.getAccount();\n  if (!account) {\n    throw new Error(\n      `Failed to get call status, no account found for wallet ${wallet.id}`,\n    );\n  }\n\n  // These conveniently operate the same\n  if (isSmartWallet(wallet) || isInAppWallet(wallet)) {\n    const { inAppWalletGetCallsStatus } = await import(\n      \"../in-app/core/eip5972/in-app-wallet-calls.js\"\n    );\n    return inAppWalletGetCallsStatus({ client, id, wallet });\n  }\n\n  if (isWalletConnect(wallet)) {\n    throw new Error(\"getCallsStatus is not yet supported for Wallet Connect\");\n  }\n\n  let provider: Ethereum;\n  if (isCoinbaseSDKWallet(wallet)) {\n    const { getCoinbaseWebProvider } = await import(\n      \"../coinbase/coinbase-web.js\"\n    );\n    const config = wallet.getConfig();\n    provider = (await getCoinbaseWebProvider(config)) as Ethereum;\n  } else {\n    provider = getInjectedProvider(wallet.id);\n  }\n\n  try {\n    const {\n      atomic = false,\n      chainId,\n      receipts,\n      version = \"2.0.0\",\n      ...response\n    } = (await provider.request({\n      method: \"wallet_getCallsStatus\",\n      params: [id],\n    })) as GetCallsStatusRawResponse;\n    const [status, statusCode] = (() => {\n      const statusCode = response.status;\n      if (statusCode >= 100 && statusCode < 200)\n        return [\"pending\", statusCode] as const;\n      if (statusCode >= 200 && statusCode < 300)\n        return [\"success\", statusCode] as const;\n      if (statusCode >= 300 && statusCode < 700)\n        return [\"failure\", statusCode] as const;\n      // @ts-expect-error: for backwards compatibility\n      if (statusCode === \"CONFIRMED\") return [\"success\", 200] as const;\n      // @ts-expect-error: for backwards compatibility\n      if (statusCode === \"PENDING\") return [\"pending\", 100] as const;\n      return [undefined, statusCode];\n    })();\n    return {\n      ...response,\n      atomic,\n      // @ts-expect-error: for backwards compatibility\n      chainId: chainId ? hexToNumber(chainId) : undefined,\n      receipts:\n        receipts?.map((receipt) => ({\n          ...receipt,\n          blockNumber: hexToBigInt(receipt.blockNumber),\n          gasUsed: hexToBigInt(receipt.gasUsed),\n          status: receiptStatuses[receipt.status as \"0x0\" | \"0x1\"],\n        })) ?? [],\n      status,\n      statusCode,\n      version,\n    };\n  } catch (error) {\n    if (/unsupport|not support/i.test((error as Error).message)) {\n      throw new Error(\n        `${wallet.id} does not support wallet_getCallsStatus, reach out to them directly to request EIP-5792 support.`,\n      );\n    }\n    throw error;\n  }\n}\n\nconst receiptStatuses = {\n  \"0x0\": \"reverted\",\n  \"0x1\": \"success\",\n} as const;\n", "import type { Chain } from \"../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../client/client.js\";\nimport { watchBlockNumber } from \"../../rpc/watchBlockNumber.js\";\nimport type { Prettify } from \"../../utils/type-utils.js\";\nimport type { Wallet } from \"../interfaces/wallet.js\";\nimport { getCallsStatus } from \"./get-calls-status.js\";\nimport type { GetCallsStatusResponse } from \"./types.js\";\n\nconst DEFAULT_MAX_BLOCKS_WAIT_TIME = 100;\n\nconst map = new Map<string, Promise<GetCallsStatusResponse>>();\n\nexport type WaitForCallsReceiptOptions = Prettify<{\n  id: string;\n  client: ThirdwebClient;\n  chain: Chain;\n  wallet: Wallet;\n  maxBlocksWaitTime?: number;\n}>;\n/**\n * Waits for the [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792) bundle to be confirmed.\n *\n *  This function is dependent on the wallet's support for EIP-5792 and could fail.\n *\n * @param options - The options for waiting for the bundle.\n * By default, the max wait time is 100 blocks.\n * @returns A promise that resolves with the final {@link getCallsStatus} result.\n * @throws an error if the wallet does not support EIP-5792.\n * @beta\n * @example\n * ```ts\n * import { waitForCallsReceipt } from \"thirdweb/wallets/eip5792\";\n * const result = await waitForCallsReceipt({\n *   client,\n *   chain,\n *   wallet,\n *   id: \"0x123...\",\n * });\n * ```\n *\n * Example with useSendCalls:\n * ```ts\n * const sendResult = await sendCalls({\n *   client,\n *   chain,\n *   wallet,\n *   calls: [...],\n * });\n * const confirmResult = await waitForCallsReceipt(sendResult);\n * console.log(\"Transaction confirmed: \", confirmResult.receipts?.[0].transactionHash);\n * ```\n * @extension EIP5792\n */\nexport function waitForCallsReceipt(\n  options: WaitForCallsReceiptOptions,\n): Promise<GetCallsStatusResponse> {\n  const { id, chain, wallet, client } = options;\n\n  const chainId = chain.id;\n  const key = `${chainId}:calls_${id}`;\n  const maxBlocksWaitTime =\n    options.maxBlocksWaitTime ?? DEFAULT_MAX_BLOCKS_WAIT_TIME;\n\n  if (map.has(key)) {\n    // biome-ignore lint/style/noNonNullAssertion: the `has` above ensures that this will always be set\n    return map.get(key)!;\n  }\n  const promise = new Promise<GetCallsStatusResponse>((resolve, reject) => {\n    // start at -1 because the first block doesn't count\n    let blocksWaited = -1;\n\n    const unwatch = watchBlockNumber({\n      chain: chain,\n      client: client,\n      onNewBlockNumber: async () => {\n        blocksWaited++;\n        if (blocksWaited >= maxBlocksWaitTime) {\n          unwatch();\n          reject(\n            new Error(`Bundle not confirmed after ${maxBlocksWaitTime} blocks`),\n          );\n          return;\n        }\n        try {\n          const result = await getCallsStatus({\n            client,\n            id,\n            wallet,\n          });\n          if (result.status === \"success\" || result.status === \"failure\") {\n            // stop the polling\n            unwatch();\n            // resolve the top level promise with the result\n            resolve(result);\n            return;\n          }\n        } catch {\n          // noop, we'll try again on the next blocks\n        }\n      },\n    });\n    // remove the promise from the map when it's done (one way or the other)\n  }).finally(() => {\n    map.delete(key);\n  });\n\n  map.set(key, promise);\n  return promise;\n}\n", "import type { WalletId } from \"../wallet-types.js\";\nimport { type SendCallsOptions, sendCalls } from \"./send-calls.js\";\nimport type { GetCallsStatusResponse } from \"./types.js\";\nimport { waitForCallsReceipt } from \"./wait-for-calls-receipt.js\";\n\n/**\n * Send and confirm calls in a single transaction.\n *\n * This is a convenience function that sends the calls with `sendCalls` and then waits for the receipts with `waitForCallsReceipt`.\n *\n * @param options - The options for sending and confirming calls.\n * @returns The receipts of the calls.\n * @example\n * ```ts\n * const call1 = approve({\n *   contract: USDT_CONTRACT,\n *   amount: 100,\n *   spender: \"0x2a4f24F935Eb178e3e7BA9B53A5Ee6d8407C0709\",\n * });\n * const call2 = transfer({\n *   contract: USDT_CONTRACT,\n *   to: \"0x2a4f24F935Eb178e3e7BA9B53A5Ee6d8407C0709\",\n *   amount: 100,\n * });\n * const result = await sendAndConfirmCalls({\n *   calls: [call1, call2],\n *   wallet: wallet,\n * });\n * console.log(\"Transaction receipts:\", result.receipts);\n * ```\n * @extension EIP5792\n * @beta\n */\nexport async function sendAndConfirmCalls<const ID extends WalletId>(\n  options: SendCallsOptions<ID> & {\n    /**\n     * The maximum number of blocks to wait for the calls to be confirmed.\n     * @defaultValue 100\n     */\n    maxBlocksWaitTime?: number;\n  },\n): Promise<GetCallsStatusResponse> {\n  const sendCallsResult = await sendCalls(options);\n  return waitForCallsReceipt({\n    ...sendCallsResult,\n    maxBlocksWaitTime: options.maxBlocksWaitTime,\n  });\n}\n", "import {\n  type UseMutationResult,\n  useMutation,\n  useQueryClient,\n} from \"@tanstack/react-query\";\nimport { sendAndConfirmCalls } from \"../../../../wallets/eip5792/send-and-confirm-calls.js\";\nimport type { SendCallsOptions } from \"../../../../wallets/eip5792/send-calls.js\";\nimport type { GetCallsStatusResponse } from \"../../../../wallets/eip5792/types.js\";\nimport type { Wallet } from \"../../../../wallets/interfaces/wallet.js\";\nimport { invalidateWalletBalance } from \"../../providers/invalidateWalletBalance.js\";\nimport { useActiveWallet } from \"./useActiveWallet.js\";\n\n/**\n * A hook to send [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792) calls to a wallet.\n * This hook works with all Thirdweb wallets (in-app and smart) and certain injected wallets that already support EIP-5792.\n * Transactions will be batched and sponsored when those capabilities are supported, otherwise they will be sent as individual transactions.\n *\n * When calls are sent, all contracts that are interacted with will have their corresponding reads revalidated via React Query.\n *\n * This hook is dependent on the wallet's support for EIP-5792 and could fail.\n * The mutation function will use your currently connected wallet by default, but you can pass it a specific wallet to use if you'd like.\n *\n * @returns A React Query mutation object to interact with {@link sendAndConfirmCalls}\n * @throws an error if the wallet does not support EIP-5792.\n * @returns The ID of the bundle of the calls.\n *\n * @beta\n * @example\n * ```tsx\n * import { useSendCalls } from \"thirdweb/react\";\n *\n * const sendTx1 = approve({\n      contract: USDT_CONTRACT,\n      amount: 100,\n      spender: \"0x33d9B8BEfE81027E2C859EDc84F5636cbb202Ed6\",\n    });\n * const sendTx2 = approve({\n      contract: USDT_CONTRACT,\n      amount: 100,\n      spender: \"0x2a4f24F935Eb178e3e7BA9B53A5Ee6d8407C0709\",\n    });\n * const { mutate: sendCalls, data: result } = useSendAndConfirmCalls();\n * await sendCalls({\n *   client,\n *   calls: [sendTx1, sendTx2],\n * });\n * \n * console.log(\"Transaction hash:\", result.receipts?.[0]?.transactionHash);\n * ```\n\n * Sponsor transactions with a paymaster:\n * ```ts\n * const { mutate: sendAndConfirmCalls, data: id } = useSendAndConfirmCalls();\n * const result = await sendAndConfirmCalls({\n *   client,\n *   calls: [sendTx1, sendTx2],\n *   capabilities: {\n *     paymasterService: {\n *       url: `https://${CHAIN.id}.bundler.thirdweb.com/${client.clientId}`\n *     }\n *   }\n * });\n * console.log(\"Transaction hash:\", result.receipts?.[0]?.transactionHash);\n * ```\n *\n *  We recommend proxying any paymaster calls via an API route you setup and control.\n * @extension EIP5792\n */\nexport function useSendAndConfirmCalls(args?: {\n  maxBlocksWaitTime?: number;\n}): UseMutationResult<\n  GetCallsStatusResponse,\n  Error,\n  Omit<SendCallsOptions, \"chain\" | \"wallet\"> & { wallet?: Wallet } // Optional wallet override\n> {\n  const activeWallet = useActiveWallet();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (options) => {\n      const { wallet = activeWallet } = options;\n      if (!wallet) {\n        throw new Error(\n          \"Failed to send transactions, no connected wallet found.\",\n        );\n      }\n\n      return sendAndConfirmCalls({\n        ...options,\n        maxBlocksWaitTime: args?.maxBlocksWaitTime,\n        wallet,\n      });\n    },\n    onSettled: async (_result, _error, variables) => {\n      // Attempt to invalidate any reads related to the sent transactions\n      const call = variables.calls[0];\n      if (!call) {\n        return;\n      }\n      const chain = call.__contract?.chain || call.chain;\n\n      for (const call of variables.calls) {\n        queryClient.invalidateQueries({\n          queryKey: [\n            \"readContract\",\n            call.__contract?.chain.id || call.chain.id,\n            call.__contract?.address || call.to,\n          ],\n        });\n      }\n      invalidateWalletBalance(queryClient, chain.id);\n    },\n  });\n}\n", "import {\n  type UseMutationResult,\n  useMutation,\n  useQueryClient,\n} from \"@tanstack/react-query\";\nimport {\n  type SendCallsOptions,\n  type SendCallsResult,\n  sendCalls,\n} from \"../../../../wallets/eip5792/send-calls.js\";\nimport { waitForCallsReceipt } from \"../../../../wallets/eip5792/wait-for-calls-receipt.js\";\nimport type { Wallet } from \"../../../../wallets/interfaces/wallet.js\";\nimport { invalidateWalletBalance } from \"../../providers/invalidateWalletBalance.js\";\nimport { useActiveWallet } from \"./useActiveWallet.js\";\n\n/**\n * A hook to send [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792) calls to a wallet.\n * This hook works with all Thirdweb wallets (in-app and smart) and certain injected wallets that already support EIP-5792.\n * Transactions will be bundled and sponsored when those capabilities are supported, otherwise they will be sent as individual transactions.\n *\n * When calls are sent, all contracts that are interacted with will have their corresponding reads revalidated via React Query.\n *\n *  This hook is dependent on the wallet's support for EIP-5792 and could fail.\n *  The mutatuon function will use your currently connected wallet by default, but you can pass it a specific wallet to use if you'd like.\n *\n * @returns A React Query mutatuon object to interact with {@link sendCalls}\n * @throws an error if the wallet does not support EIP-5792.\n * @returns The ID of the bundle of the calls.\n *\n * @beta\n * @example\n * ```tsx\n * import { useSendCalls } from \"thirdweb/react\";\n *\n * const sendTx1 = approve({\n      contract: USDT_CONTRACT,\n      amount: 100,\n      spender: \"0x33d9B8BEfE81027E2C859EDc84F5636cbb202Ed6\",\n    });\n * const sendTx2 = approve({\n      contract: USDT_CONTRACT,\n      amount: 100,\n      spender: \"0x2a4f24F935Eb178e3e7BA9B53A5Ee6d8407C0709\",\n    });\n * const { mutate: sendCalls, data: id } = useSendCalls();\n * await sendCalls({\n *   wallet,\n *   client,\n *   calls: [sendTx1, sendTx2],\n * });\n * ```\n * Await the bundle's full confirmation:\n * ```tsx\n * const { mutate: sendCalls, data } = useSendCalls();\n * const { data: result, isLoading } = useWaitForCallsReceipt(data); \n * await sendCalls({\n *   wallet,\n *   client,\n *   calls: [sendTx1, sendTx2],\n * });\n * \n * console.log(\"Receipts:\", result.receipts);\n * ```\n * Sponsor transactions with a paymaster:\n * ```ts\n * const { mutate: sendCalls, data: id } = useSendCalls();\n * await sendCalls({\n *   client,\n *   calls: [sendTx1, sendTx2],\n *   capabilities: {\n *     paymasterService: {\n *       url: `https://${CHAIN.id}.bundler.thirdweb.com/${client.clientId}`\n *     }\n *   }\n * });\n * ```\n *  We recommend proxying any paymaster calls via an API route you setup and control.\n * @extension EIP5792\n */\nexport function useSendCalls(): UseMutationResult<\n  SendCallsResult,\n  Error,\n  Omit<SendCallsOptions, \"chain\" | \"wallet\"> & { wallet?: Wallet } // Optional wallet override\n> {\n  const activeWallet = useActiveWallet();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (options) => {\n      const { wallet = activeWallet } = options;\n      const chain = wallet?.getChain();\n      if (!wallet || !chain) {\n        throw new Error(\n          \"Failed to send transactions, no connected wallet found.\",\n        );\n      }\n\n      return sendCalls({ ...options, wallet });\n    },\n    onSettled: async (result, _error, variables) => {\n      // Attempt to invalidate any reads related to the sent transactions\n      if (!result) {\n        return;\n      }\n      const call = variables.calls[0];\n      if (!call) {\n        return;\n      }\n      const chain = call.__contract?.chain || call.chain;\n\n      waitForCallsReceipt(result)\n        .then(() => {\n          for (const call of variables.calls) {\n            queryClient.invalidateQueries({\n              queryKey: [\n                \"readContract\",\n                call.__contract?.chain.id || chain.id,\n                call.__contract?.address || call.to,\n              ],\n            });\n          }\n          invalidateWalletBalance(queryClient, chain.id);\n        })\n        .catch((error) => {\n          console.error(\n            \"Failed to confirm sent bundle and invalidate queries\",\n            result,\n            error,\n          );\n          return undefined;\n        });\n    },\n  });\n}\n", "import { useQuery } from \"@tanstack/react-query\";\nimport type { SendCallsResult } from \"../../../../wallets/eip5792/send-calls.js\";\nimport { waitForCallsReceipt } from \"../../../../wallets/eip5792/wait-for-calls-receipt.js\";\n\n/**\n * A hook to wait for the receipt of eip5792 calls.\n * @param options - The options for the hook.\n * @returns A useQuery object.\n * @example\n * ```tsx\n * const { data: receipt, isLoading } = useWaitForCallsReceipt({ id, client, chain, wallet });\n * ```\n *\n * Example with useSendCalls:\n * ```tsx\n * const { mutate: sendCalls, data } = useSendCalls();\n * const { data: receipt, isLoading } = useWaitForCallsReceipt(data);\n * ```\n * @extension EIP5792\n */\nexport function useWaitForCallsReceipt(\n  args:\n    | (SendCallsResult & {\n        maxBlocksWaitTime?: number;\n        queryOptions?: { enabled?: boolean };\n      })\n    | undefined,\n) {\n  return useQuery({\n    enabled: !!args?.id && (args?.queryOptions?.enabled ?? true),\n    queryFn: async () => {\n      if (!args?.id) {\n        throw new Error(\"No call result provided\");\n      }\n      return waitForCallsReceipt({\n        ...args,\n        maxBlocksWaitTime: args.maxBlocksWaitTime,\n      });\n    },\n    queryKey: [\"waitForCallsReceipt\", args?.id] as const,\n    retry: false,\n  });\n}\n", "import { type UseQueryResult, useQuery } from \"@tanstack/react-query\";\nimport type { Abi } from \"abitype\";\nimport type { BaseTransactionOptions } from \"../../../transaction/types.js\";\nimport { getFunctionId } from \"../../../utils/function-id.js\";\nimport { stringify } from \"../../../utils/json.js\";\n\nconst CONTRACT_QUERY_CACHE = new WeakMap();\n\n/**\n * Creates a `useQuery` hook for a contract call.\n * @param readCall - A function that performs the contract function call and returns the result.\n * @returns An object containing the created `useRead` hook.\n * @example\n * ```jsx\n * import { createContractQuery } from \"thirdweb/react\";\n * import { totalSupply } from \"thirdweb/extensions/erc20\";\n * const useTotalSupply = createContractQuery(totalSupply);\n * const { data, isLoading } = useTotalSupply({contract})\n * ```\n * @transaction\n */\nexport function createContractQuery<\n  opts extends object,\n  result,\n  abi extends Abi,\n>(\n  readCall: (options: BaseTransactionOptions<opts, abi>) => Promise<result>,\n): (\n  options: BaseTransactionOptions<opts, abi> & {\n    queryOptions?: Partial<{ enabled: boolean }>;\n  },\n) => UseQueryResult<result, Error> {\n  if (CONTRACT_QUERY_CACHE.has(readCall)) {\n    return CONTRACT_QUERY_CACHE.get(readCall) as (\n      options: BaseTransactionOptions<opts, abi>,\n    ) => UseQueryResult<result, Error>;\n  }\n  function useRead(\n    options: BaseTransactionOptions<opts, abi> & {\n      queryOptions?: Partial<{ enabled: boolean }>;\n    },\n  ) {\n    const { contract, queryOptions, ...params } = options;\n\n    return useQuery({\n      queryFn: () => readCall(options),\n      queryKey: [\n        \"readContract\",\n        contract.chain.id,\n        contract.address,\n        getFunctionId(readCall),\n        stringify(params),\n      ] as const,\n      ...queryOptions,\n    });\n  }\n  CONTRACT_QUERY_CACHE.set(readCall, useRead);\n  return useRead;\n}\n", "import { useContext } from \"react\";\nimport { randomBytesHex } from \"../../../../utils/random.js\";\nimport {\n  type SendTransactionConfig,\n  type ShowModalData,\n  useSendTransactionCore,\n} from \"../../../core/hooks/transaction/useSendTransaction.js\";\nimport { useActiveWallet } from \"../../../core/hooks/wallets/useActiveWallet.js\";\nimport { useSwitchActiveWalletChain } from \"../../../core/hooks/wallets/useSwitchActiveWalletChain.js\";\nimport { SetRootElementContext } from \"../../../core/providers/RootElementContext.js\";\nimport { TransactionModal } from \"../../ui/TransactionButton/TransactionModal.js\";\n\n/**\n * A hook to send a transaction with from the user's connected wallet.\n *\n * You can send a transaction with a [prepared contract call](https://portal.thirdweb.com/references/typescript/v5/prepareContractCall), a [prepared transaction](https://portal.thirdweb.com/references/typescript/v5/prepareTransaction), or using a write [Extension](https://portal.thirdweb.com/react/v5/extensions).\n *\n * @returns A UseMutationResult object to send a transaction.\n * @param config Configuration for the `useSendTransaction` hook.\n * Refer to [`SendTransactionConfig`](https://portal.thirdweb.com/references/typescript/v5/SendTransactionConfig) for more details.\n * @example\n *\n * ### Sending a prepared contract call\n *\n * ```tsx\n * import { useSendTransaction } from \"thirdweb/react\";\n * import { getContract, prepareContractCall } from \"thirdweb\";\n * import { sepolia } from \"thirdweb/chains\";\n *\n * const contract = getContract({\n *   address: \"0x...\",\n *   chain: sepolia,\n *   client,\n * });\n *\n * const { mutate: sendTx, data: transactionResult } = useSendTransaction();\n *\n * const onClick = () => {\n *   const transaction = prepareContractCall({\n *     contract,\n *     method: \"function transfer(address to, uint256 value)\",\n *     params: [to, value],\n *   });\n *   sendTx(transaction);\n * };\n * ```\n *\n * ### Using a write extension\n *\n * ```tsx\n * import { useSendTransaction } from \"thirdweb/react\";\n * import { mintTo } from \"thirdweb/extensions/erc721\";\n *\n * const { mutate: sendTx, data: transactionResult } = useSendTransaction();\n *\n * const onClick = () => {\n *   const transaction = mintTo({\n *     contract,\n *     to: \"0x...\",\n *     nft: {\n *       name: \"NFT Name\",\n *       description: \"NFT Description\",\n *       image: \"https://example.com/image.png\",\n *     },\n *   });\n *   sendTx(transaction);\n * };\n * ```\n *\n * ### Sending a prepared transaction\n *\n * ```tsx\n * import { useSendTransaction } from \"thirdweb/react\";\n * import { prepareTransaction } from \"thirdweb\";\n * import { sepolia } from \"thirdweb/chains\";\n *\n * const { mutate: sendTx, data: transactionResult } = useSendTransaction();\n *\n * const onClick = () => {\n *   // Send 0.1 SepoliaETH to an address\n *   const transaction = prepareTransaction({\n *     to: \"0x...\",\n *     value: toWei(\"0.1\"),\n *     chain: sepolia,\n *     client: thirdwebClient,\n *     // Specify a token required for the transaction\n *     erc20Value: {\n *       amountWei: toWei(\"0.1\"),\n *       tokenAddress: \"0x...\",\n *     },\n *   });\n *   sendTx(transaction);\n * };\n * ```\n *\n * @transaction\n */\nexport function useSendTransaction(config: SendTransactionConfig = {}) {\n  const switchChain = useSwitchActiveWalletChain();\n  const wallet = useActiveWallet();\n  const setRootEl = useContext(SetRootElementContext);\n  const payModal = config.payModal;\n\n  let payModalEnabled = true;\n\n  if (payModal === false || config.gasless) {\n    payModalEnabled = false;\n  }\n\n  const showPayModal = (data: ShowModalData) => {\n    if (payModal === false) return;\n    setRootEl(\n      <TransactionModal\n        client={data.tx.client}\n        localeId={payModal?.locale || \"en_US\"}\n        modalMode={data.mode}\n        onClose={() => {\n          setRootEl(null);\n          data.rejectTx(\n            new Error(\"User rejected transaction by closing modal\"),\n          );\n        }}\n        onComplete={data.sendTx}\n        onTxSent={data.resolveTx}\n        payOptions={{\n          buyWithCrypto: payModal?.buyWithCrypto,\n          buyWithFiat: payModal?.buyWithFiat,\n          metadata: payModal?.metadata,\n          mode: \"transaction\",\n          onPurchaseSuccess: payModal?.onPurchaseSuccess,\n          purchaseData: payModal?.purchaseData,\n          showThirdwebBranding: payModal?.showThirdwebBranding,\n          transaction: data.tx,\n        }}\n        supportedTokens={payModal?.supportedTokens}\n        theme={payModal?.theme || \"dark\"}\n        title={payModal?.metadata?.name || \"Transaction\"}\n        tx={data.tx}\n        txId={randomBytesHex()}\n      />,\n    );\n  };\n\n  return useSendTransactionCore({\n    gasless: config.gasless,\n    showPayModal:\n      !payModalEnabled || payModal === false ? undefined : showPayModal,\n    switchChain,\n    wallet,\n  });\n}\n", "import { type UseMutationResult, useMutation } from \"@tanstack/react-query\";\nimport { isInsufficientFundsError } from \"../../../../analytics/track/helpers.js\";\nimport { trackPayEvent } from \"../../../../analytics/track/pay.js\";\nimport { trackInsufficientFundsError } from \"../../../../analytics/track/transaction.js\";\nimport * as Bridge from \"../../../../bridge/index.js\";\nimport type { Chain } from \"../../../../chains/types.js\";\nimport type { BuyWithCryptoStatus } from \"../../../../pay/buyWithCrypto/getStatus.js\";\nimport type { BuyWithFiatStatus } from \"../../../../pay/buyWithFiat/getStatus.js\";\nimport type { FiatProvider } from \"../../../../pay/utils/commonTypes.js\";\nimport type { GaslessOptions } from \"../../../../transaction/actions/gasless/types.js\";\nimport { sendTransaction } from \"../../../../transaction/actions/send-transaction.js\";\nimport type { WaitForReceiptOptions } from \"../../../../transaction/actions/wait-for-tx-receipt.js\";\nimport type { PreparedTransaction } from \"../../../../transaction/prepare-transaction.js\";\nimport { getTransactionGasCost } from \"../../../../transaction/utils.js\";\nimport type { Hex } from \"../../../../utils/encoding/hex.js\";\nimport { resolvePromisedValue } from \"../../../../utils/promise/resolve-promised-value.js\";\nimport type { Wallet } from \"../../../../wallets/interfaces/wallet.js\";\nimport { hasSponsoredTransactionsEnabled } from \"../../../../wallets/smart/is-smart-wallet.js\";\nimport { getTokenBalance } from \"../../../../wallets/utils/getTokenBalance.js\";\nimport { getWalletBalance } from \"../../../../wallets/utils/getWalletBalance.js\";\nimport type { LocaleId } from \"../../../web/ui/types.js\";\nimport type { Theme } from \"../../design-system/index.js\";\nimport type { SupportedTokens } from \"../../utils/defaultTokens.js\";\n\n/**\n * Configuration for the \"Pay Modal\" that opens when the user doesn't have enough funds to send a transaction.\n * Set `payModal: false` to disable the \"Pay Modal\" popup\n *\n * This configuration object includes the following properties to configure the \"Pay Modal\" UI:\n *\n * ### `locale`\n * The language to use for the \"Pay Modal\" UI. Defaults to `\"en_US\"`.\n *\n * ### `supportedTokens`\n * An object of type [`SupportedTokens`](https://portal.thirdweb.com/references/typescript/v5/SupportedTokens) to configure the tokens to show for a chain.\n *\n * ### `theme`\n * The theme to use for the \"Pay Modal\" UI. Defaults to `\"dark\"`.\n *\n * It can be set to `\"light\"` or `\"dark\"` or an object of type [`Theme`](https://portal.thirdweb.com/references/typescript/v5/Theme) for a custom theme.\n *\n * Refer to [`lightTheme`](https://portal.thirdweb.com/references/typescript/v5/lightTheme)\n * or [`darkTheme`](https://portal.thirdweb.com/references/typescript/v5/darkTheme) helper functions to use the default light or dark theme and customize it.\n */\nexport type SendTransactionPayModalConfig =\n  | {\n      metadata?: {\n        name?: string;\n        image?: string;\n      };\n      locale?: LocaleId;\n      supportedTokens?: SupportedTokens;\n      theme?: Theme | \"light\" | \"dark\";\n      buyWithCrypto?:\n        | false\n        | {\n            testMode?: boolean;\n          };\n      buyWithFiat?:\n        | false\n        | {\n            prefillSource?: {\n              currency?: \"USD\" | \"CAD\" | \"GBP\" | \"EUR\" | \"JPY\";\n            };\n            testMode?: boolean;\n            preferredProvider?: FiatProvider;\n          };\n      purchaseData?: object;\n      /**\n       * Callback to be called when the user successfully completes the purchase.\n       */\n      onPurchaseSuccess?: (\n        info?:\n          | {\n              type: \"crypto\";\n              status: BuyWithCryptoStatus;\n            }\n          | {\n              type: \"fiat\";\n              status: BuyWithFiatStatus;\n            }\n          | {\n              type: \"transaction\";\n              chainId: number;\n              transactionHash: Hex;\n            },\n      ) => void;\n      showThirdwebBranding?: boolean;\n    }\n  | false;\n\n/**\n * Configuration for the `useSendTransaction` hook.\n */\nexport type SendTransactionConfig = {\n  /**\n   * Refer to [`SendTransactionPayModalConfig`](https://portal.thirdweb.com/references/typescript/v5/SendTransactionPayModalConfig) for more details.\n   */\n  payModal?: SendTransactionPayModalConfig;\n\n  /**\n   * Configuration for gasless transactions.\n   * Refer to [`GaslessOptions`](https://portal.thirdweb.com/references/typescript/v5/GaslessOptions) for more details.\n   */\n  gasless?: GaslessOptions;\n};\n\nexport type ShowModalData = {\n  mode: \"buy\" | \"deposit\";\n  tx: PreparedTransaction;\n  sendTx: () => void;\n  rejectTx: (reason: Error) => void;\n  resolveTx: (data: WaitForReceiptOptions) => void;\n};\n\n/**\n * A hook to send a transaction.\n * @returns A mutation object to send a transaction.\n * @example\n * ```jsx\n * import { useSendTransaction } from \"thirdweb/react\";\n * const { mutate: sendTx, data: transactionResult } = useSendTransaction();\n *\n * // later\n * sendTx(tx);\n * ```\n * @internal\n */\nexport function useSendTransactionCore(args: {\n  showPayModal?: (data: ShowModalData) => void;\n  gasless?: GaslessOptions;\n  wallet: Wallet | undefined;\n  switchChain: (chain: Chain) => Promise<void>;\n}): UseMutationResult<WaitForReceiptOptions, Error, PreparedTransaction> {\n  const { showPayModal, gasless, wallet, switchChain } = args;\n  let _account = wallet?.getAccount();\n\n  return useMutation({\n    mutationFn: async (tx) => {\n      // switch chain if needed\n      if (wallet && tx.chain.id !== wallet.getChain()?.id) {\n        await switchChain(tx.chain);\n        // in smart wallet case, account may change after chain switch\n        _account = wallet.getAccount();\n      }\n\n      const account = _account;\n\n      if (!account) {\n        throw new Error(\"No active account\");\n      }\n\n      if (!showPayModal) {\n        trackPayEvent({\n          chainId: tx.chain.id,\n          client: tx.client,\n          event: \"pay_transaction_modal_disabled\",\n          walletAddress: account.address,\n          walletType: wallet?.id,\n        });\n        return sendTransaction({\n          account,\n          gasless,\n          transaction: tx,\n        });\n      }\n\n      return new Promise<WaitForReceiptOptions>((resolve, reject) => {\n        const sendTx = async () => {\n          try {\n            const res = await sendTransaction({\n              account,\n              gasless,\n              transaction: tx,\n            });\n\n            resolve(res);\n          } catch (e) {\n            // Track insufficient funds errors specifically\n            if (isInsufficientFundsError(e)) {\n              trackInsufficientFundsError({\n                chainId: tx.chain.id,\n                client: tx.client,\n                contractAddress: await resolvePromisedValue(tx.to ?? undefined),\n                error: e,\n                transactionValue: await resolvePromisedValue(tx.value),\n                walletAddress: account.address,\n              });\n            }\n\n            reject(e);\n          }\n        };\n\n        (async () => {\n          try {\n            const [_nativeValue, _erc20Value] = await Promise.all([\n              resolvePromisedValue(tx.value),\n              resolvePromisedValue(tx.erc20Value),\n            ]);\n\n            const nativeValue = _nativeValue || 0n;\n            const erc20Value = _erc20Value?.amountWei || 0n;\n\n            const [nativeBalance, erc20Balance, gasCost] = await Promise.all([\n              getWalletBalance({\n                address: account.address,\n                chain: tx.chain,\n                client: tx.client,\n              }),\n              _erc20Value?.tokenAddress\n                ? getTokenBalance({\n                    account,\n                    chain: tx.chain,\n                    client: tx.client,\n                    tokenAddress: _erc20Value.tokenAddress,\n                  })\n                : undefined,\n              getTransactionGasCost(tx, account.address),\n            ]);\n\n            const gasSponsored = hasSponsoredTransactionsEnabled(wallet);\n            const txGasCost = gasSponsored ? 0n : gasCost;\n            const nativeCost = nativeValue + txGasCost;\n\n            const shouldShowModal =\n              (erc20Value > 0n &&\n                erc20Balance &&\n                erc20Balance.value < erc20Value) ||\n              (nativeCost > 0n && nativeBalance.value < nativeCost);\n\n            if (shouldShowModal) {\n              const supportedDestinations = await Bridge.routes({\n                client: tx.client,\n                destinationChainId: tx.chain.id,\n                destinationTokenAddress: _erc20Value?.tokenAddress,\n              }).catch((err) => {\n                trackPayEvent({\n                  client: tx.client,\n                  error: err?.message,\n                  event: \"pay_transaction_modal_pay_api_error\",\n                  toChainId: tx.chain.id,\n                  walletAddress: account.address,\n                  walletType: wallet?.id,\n                });\n                return null;\n              });\n\n              if (\n                !supportedDestinations ||\n                supportedDestinations.length === 0\n              ) {\n                // not a supported destination -> show deposit screen\n                trackPayEvent({\n                  client: tx.client,\n                  error: JSON.stringify({\n                    chain: tx.chain.id,\n                    message: \"chain/token not supported\",\n                    token: _erc20Value?.tokenAddress,\n                  }),\n                  event: \"pay_transaction_modal_chain_token_not_supported\",\n                  toChainId: tx.chain.id,\n                  toToken: _erc20Value?.tokenAddress || undefined,\n                  walletAddress: account.address,\n                  walletType: wallet?.id,\n                });\n\n                showPayModal({\n                  mode: \"deposit\",\n                  rejectTx: reject,\n                  resolveTx: resolve,\n                  sendTx,\n                  tx,\n                });\n                return;\n              }\n\n              // chain is supported, show buy mode\n              showPayModal({\n                mode: \"buy\",\n                rejectTx: reject,\n                resolveTx: resolve,\n                sendTx,\n                tx,\n              });\n            } else {\n              trackPayEvent({\n                client: tx.client,\n                event: \"pay_transaction_modal_has_enough_funds\",\n                toChainId: tx.chain.id,\n                toToken: _erc20Value?.tokenAddress || undefined,\n                walletAddress: account.address,\n                walletType: wallet?.id,\n              });\n              sendTx();\n            }\n          } catch (e) {\n            console.error(\"Failed to estimate cost\", e);\n            // send it anyway?\n            sendTx();\n          }\n        })();\n      });\n    },\n  });\n}\n", "import { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { trackPayEvent } from \"../../../../analytics/track/pay.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport type { WaitForReceiptOptions } from \"../../../../transaction/actions/wait-for-tx-receipt.js\";\nimport type { PreparedTransaction } from \"../../../../transaction/prepare-transaction.js\";\nimport { resolvePromisedValue } from \"../../../../utils/promise/resolve-promised-value.js\";\nimport { CustomThemeProvider } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport type { Theme } from \"../../../core/design-system/index.js\";\nimport type { PayUIOptions } from \"../../../core/hooks/connection/ConnectButtonProps.js\";\nimport { useActiveAccount } from \"../../../core/hooks/wallets/useActiveAccount.js\";\nimport { useActiveWallet } from \"../../../core/hooks/wallets/useActiveWallet.js\";\nimport type { SupportedTokens } from \"../../../core/utils/defaultTokens.js\";\nimport { webWindowAdapter } from \"../../adapters/WindowAdapter.js\";\nimport { LoadingScreen } from \"../../wallets/shared/LoadingScreen.js\";\nimport { BridgeOrchestrator } from \"../Bridge/BridgeOrchestrator.js\";\nimport { useConnectLocale } from \"../ConnectWallet/locale/getConnectLocale.js\";\nimport { Modal } from \"../components/Modal.js\";\nimport type { LocaleId } from \"../types.js\";\nimport { DepositScreen } from \"./DepositScreen.js\";\nimport { ExecutingTxScreen } from \"./ExecutingScreen.js\";\n\ntype ModalProps = {\n  title: string;\n  txId: string;\n  onComplete: () => void;\n  onClose: () => void;\n  client: ThirdwebClient;\n  localeId: LocaleId;\n  supportedTokens?: SupportedTokens;\n  theme: Theme | \"light\" | \"dark\";\n  tx: PreparedTransaction;\n  payOptions: PayUIOptions;\n  onTxSent: (data: WaitForReceiptOptions) => void;\n  modalMode: \"buy\" | \"deposit\";\n};\n\nexport function TransactionModal(props: ModalProps) {\n  const account = useActiveAccount();\n  const wallet = useActiveWallet();\n\n  useQuery({\n    enabled: !!wallet && !!account,\n    queryFn: async () => {\n      if (!account || !wallet) {\n        throw new Error(); // never happens, because enabled is false\n      }\n      trackPayEvent({\n        client: props.client,\n        event:\n          props.modalMode === \"buy\"\n            ? \"open_pay_transaction_modal\"\n            : \"open_pay_deposit_modal\",\n        toChainId: props.tx.chain.id,\n        toToken: props.tx.erc20Value\n          ? (await resolvePromisedValue(props.tx.erc20Value))?.tokenAddress\n          : undefined,\n        walletAddress: account.address,\n        walletType: wallet.id,\n      });\n\n      return null;\n    },\n    queryKey: [\"transaction-modal-event\", props.txId],\n  });\n\n  return (\n    <CustomThemeProvider theme={props.theme}>\n      <Modal\n        open={true}\n        setOpen={(_open) => {\n          if (!_open) {\n            props.onClose();\n          }\n        }}\n        size=\"compact\"\n      >\n        <TransactionModalContent {...props} />\n      </Modal>\n    </CustomThemeProvider>\n  );\n}\n\nfunction TransactionModalContent(props: ModalProps & { onBack?: () => void }) {\n  const localeQuery = useConnectLocale(props.localeId);\n  const [screen, setScreen] = useState<\"buy\" | \"execute-tx\">(\"buy\");\n\n  if (!localeQuery.data) {\n    return <LoadingScreen />;\n  }\n\n  if (screen === \"execute-tx\") {\n    return (\n      <ExecutingTxScreen\n        closeModal={props.onClose}\n        onTxSent={props.onTxSent}\n        tx={props.tx}\n        windowAdapter={webWindowAdapter}\n      />\n    );\n  }\n\n  if (props.modalMode === \"deposit\") {\n    return (\n      <DepositScreen\n        client={props.client}\n        connectLocale={localeQuery.data}\n        onBack={props.onBack}\n        onDone={() => {\n          setScreen(\"execute-tx\");\n        }}\n        tx={props.tx}\n      />\n    );\n  }\n\n  return (\n    <BridgeOrchestrator\n      client={props.client}\n      connectLocale={localeQuery.data}\n      connectOptions={undefined}\n      onCancel={props.onClose}\n      onComplete={() => {\n        setScreen(\"execute-tx\");\n      }}\n      onError={(_error) => {}}\n      paymentLinkId={undefined}\n      presetOptions={undefined}\n      purchaseData={undefined}\n      receiverAddress={undefined}\n      uiOptions={{\n        mode: \"transaction\",\n        transaction: props.tx,\n      }}\n    />\n  );\n}\n", "import type { WindowAdapter } from \"../../core/adapters/WindowAdapter.js\";\n\n/**\n * Web implementation of WindowAdapter using the browser's window.open API.\n * Opens URLs in a new tab/window.\n */\nexport class WebWindowAdapter implements WindowAdapter {\n  /**\n   * Opens a URL in a new browser tab/window.\n   *\n   * @param url - The URL to open\n   * @returns Promise that resolves when the operation is initiated\n   */\n  async open(url: string): Promise<void> {\n    // Use window.open to open URL in new tab\n    window.open(url, \"_blank\", \"noopener,noreferrer\");\n  }\n}\n\n/**\n * Default instance of the Web WindowAdapter.\n */\nexport const webWindowAdapter = new WebWindowAdapter();\n", "\"use client\";\nimport { useCallback, useMemo } from \"react\";\nimport type { Token } from \"../../../../bridge/types/Token.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport type { PreparedTransaction } from \"../../../../transaction/prepare-transaction.js\";\nimport type { Address } from \"../../../../utils/address.js\";\nimport { webLocalStorage } from \"../../../../utils/storage/webStorage.js\";\nimport type { Prettify } from \"../../../../utils/type-utils.js\";\nimport type {\n  BridgePrepareRequest,\n  BridgePrepareResult,\n} from \"../../../core/hooks/useBridgePrepare.js\";\nimport type { CompletedStatusResult } from \"../../../core/hooks/useStepExecutor.js\";\nimport {\n  type PaymentMethod,\n  usePaymentMachine,\n} from \"../../../core/machines/paymentMachine.js\";\nimport { webWindowAdapter } from \"../../adapters/WindowAdapter.js\";\nimport en from \"../ConnectWallet/locale/en.js\";\nimport type { ConnectLocale } from \"../ConnectWallet/locale/types.js\";\nimport { Container } from \"../components/basic.js\";\nimport type { PayEmbedConnectOptions } from \"../PayEmbed.js\";\nimport { ExecutingTxScreen } from \"../TransactionButton/ExecutingScreen.js\";\nimport { DirectPayment } from \"./DirectPayment.js\";\nimport { ErrorBanner } from \"./ErrorBanner.js\";\nimport { FundWallet } from \"./FundWallet.js\";\nimport { PaymentDetails } from \"./payment-details/PaymentDetails.js\";\nimport { PaymentSelection } from \"./payment-selection/PaymentSelection.js\";\nimport { SuccessScreen } from \"./payment-success/SuccessScreen.js\";\nimport { QuoteLoader } from \"./QuoteLoader.js\";\nimport { StepRunner } from \"./StepRunner.js\";\nimport { TransactionPayment } from \"./TransactionPayment.js\";\n\nexport type UIOptions = Prettify<\n  {\n    metadata?: {\n      title?: string;\n      description?: string;\n      image?: string;\n    };\n  } & (\n    | {\n        mode: \"fund_wallet\";\n        destinationToken: Token;\n        initialAmount?: string;\n        presetOptions?: [number, number, number];\n      }\n    | {\n        mode: \"direct_payment\";\n        paymentInfo: {\n          sellerAddress: Address;\n          token: Token;\n          amount: string;\n          feePayer?: \"sender\" | \"receiver\";\n        };\n      }\n    | { mode: \"transaction\"; transaction: PreparedTransaction }\n  )\n>;\n\nexport interface BridgeOrchestratorProps {\n  /**\n   * UI configuration and mode\n   */\n  uiOptions: UIOptions;\n\n  /**\n   * The receiver address, defaults to the connected wallet address\n   */\n  receiverAddress: Address | undefined;\n\n  /**\n   * ThirdwebClient for blockchain interactions\n   */\n  client: ThirdwebClient;\n\n  /**\n   * Called when the flow is completed successfully\n   */\n  onComplete: () => void;\n\n  /**\n   * Called when the flow encounters an error\n   */\n  onError: (error: Error) => void;\n\n  /**\n   * Called when the user cancels the flow\n   */\n  onCancel: () => void;\n\n  /**\n   * Connect options for wallet connection\n   */\n  connectOptions: PayEmbedConnectOptions | undefined;\n\n  /**\n   * Locale for connect UI\n   */\n  connectLocale: ConnectLocale | undefined;\n\n  /**\n   * Optional purchase data for the payment\n   */\n  purchaseData: object | undefined;\n\n  /**\n   * Optional payment link ID for the payment\n   */\n  paymentLinkId: string | undefined;\n\n  /**\n   * Quick buy amounts\n   */\n  presetOptions: [number, number, number] | undefined;\n\n  /**\n   * Allowed payment methods\n   * @default [\"crypto\", \"card\"]\n   */\n  paymentMethods?: (\"crypto\" | \"card\")[];\n}\n\nexport function BridgeOrchestrator({\n  client,\n  uiOptions,\n  receiverAddress,\n  onComplete,\n  onError,\n  onCancel,\n  connectOptions,\n  connectLocale,\n  purchaseData,\n  paymentLinkId,\n  presetOptions,\n  paymentMethods = [\"crypto\", \"card\"],\n}: BridgeOrchestratorProps) {\n  // Initialize adapters\n  const adapters = useMemo(\n    () => ({\n      storage: webLocalStorage,\n      window: webWindowAdapter,\n    }),\n    [],\n  );\n\n  // Use the payment machine hook\n  const [state, send] = usePaymentMachine(adapters, uiOptions.mode);\n\n  // Handle buy completion\n  const handleBuyComplete = useCallback(() => {\n    if (uiOptions.mode === \"transaction\") {\n      send({ type: \"CONTINUE_TO_TRANSACTION\" });\n    } else {\n      onComplete?.();\n      send({ type: \"RESET\" });\n    }\n  }, [onComplete, send, uiOptions.mode]);\n\n  // Handle post-buy transaction completion\n  const handlePostBuyTransactionComplete = useCallback(() => {\n    onComplete?.();\n    send({ type: \"RESET\" });\n  }, [onComplete, send]);\n\n  // Handle errors\n  const handleError = useCallback(\n    (error: Error) => {\n      onError?.(error);\n      send({ error, type: \"ERROR_OCCURRED\" });\n    },\n    [onError, send],\n  );\n\n  // Handle payment method selection\n  const handlePaymentMethodSelected = useCallback(\n    (paymentMethod: PaymentMethod) => {\n      send({ paymentMethod, type: \"PAYMENT_METHOD_SELECTED\" });\n    },\n    [send],\n  );\n\n  // Handle quote received\n  const handleQuoteReceived = useCallback(\n    (quote: BridgePrepareResult, request: BridgePrepareRequest) => {\n      send({ quote, request, type: \"QUOTE_RECEIVED\" });\n    },\n    [send],\n  );\n\n  // Handle route confirmation\n  const handleRouteConfirmed = useCallback(() => {\n    send({ type: \"ROUTE_CONFIRMED\" });\n  }, [send]);\n\n  // Handle execution complete\n  const handleExecutionComplete = useCallback(\n    (completedStatuses: CompletedStatusResult[]) => {\n      send({ completedStatuses, type: \"EXECUTION_COMPLETE\" });\n    },\n    [send],\n  );\n\n  // Handle retry\n  const handleRetry = useCallback(() => {\n    send({ type: \"RETRY\" });\n  }, [send]);\n\n  // Handle requirements resolved from FundWallet and DirectPayment\n  const handleRequirementsResolved = useCallback(\n    (amount: string, token: Token, receiverAddress: Address) => {\n      send({\n        destinationAmount: amount,\n        destinationToken: token,\n        receiverAddress,\n        type: \"DESTINATION_CONFIRMED\",\n      });\n    },\n    [send],\n  );\n\n  return (\n    <Container flex=\"column\" fullHeight>\n      {/* Error Banner */}\n      {state.value === \"error\" && state.context.currentError && (\n        <ErrorBanner\n          client={client}\n          error={state.context.currentError}\n          onCancel={onCancel}\n          onRetry={handleRetry}\n        />\n      )}\n\n      {/* Render current screen based on state */}\n      {state.value === \"init\" && uiOptions.mode === \"fund_wallet\" && (\n        <FundWallet\n          client={client}\n          connectOptions={connectOptions}\n          onContinue={handleRequirementsResolved}\n          presetOptions={presetOptions}\n          receiverAddress={receiverAddress}\n          uiOptions={uiOptions}\n        />\n      )}\n\n      {state.value === \"init\" && uiOptions.mode === \"direct_payment\" && (\n        <DirectPayment\n          client={client}\n          connectOptions={connectOptions}\n          onContinue={handleRequirementsResolved}\n          uiOptions={uiOptions}\n        />\n      )}\n\n      {state.value === \"init\" && uiOptions.mode === \"transaction\" && (\n        <TransactionPayment\n          client={client}\n          connectOptions={connectOptions}\n          onContinue={handleRequirementsResolved}\n          uiOptions={uiOptions}\n        />\n      )}\n\n      {state.value === \"methodSelection\" &&\n        state.context.destinationToken &&\n        state.context.destinationAmount &&\n        state.context.receiverAddress && (\n          <PaymentSelection\n            client={client}\n            connectLocale={connectLocale || en}\n            connectOptions={connectOptions}\n            destinationAmount={state.context.destinationAmount}\n            destinationToken={state.context.destinationToken}\n            includeDestinationToken={uiOptions.mode !== \"fund_wallet\"}\n            onBack={() => {\n              send({ type: \"BACK\" });\n            }}\n            onError={handleError}\n            onPaymentMethodSelected={handlePaymentMethodSelected}\n            paymentMethods={paymentMethods}\n            receiverAddress={state.context.receiverAddress}\n          />\n        )}\n\n      {state.value === \"quote\" &&\n        state.context.selectedPaymentMethod &&\n        state.context.receiverAddress &&\n        state.context.destinationToken &&\n        state.context.destinationAmount && (\n          <QuoteLoader\n            amount={state.context.destinationAmount}\n            client={client}\n            destinationToken={state.context.destinationToken}\n            mode={uiOptions.mode}\n            onBack={() => {\n              send({ type: \"BACK\" });\n            }}\n            onError={handleError}\n            onQuoteReceived={handleQuoteReceived}\n            paymentLinkId={paymentLinkId}\n            paymentMethod={state.context.selectedPaymentMethod}\n            purchaseData={purchaseData}\n            receiver={state.context.receiverAddress}\n          />\n        )}\n\n      {state.value === \"preview\" &&\n        state.context.selectedPaymentMethod &&\n        state.context.quote && (\n          <PaymentDetails\n            client={client}\n            onBack={() => {\n              send({ type: \"BACK\" });\n            }}\n            onConfirm={handleRouteConfirmed}\n            onError={handleError}\n            paymentMethod={state.context.selectedPaymentMethod}\n            preparedQuote={state.context.quote}\n            uiOptions={uiOptions}\n          />\n        )}\n\n      {state.value === \"execute\" &&\n        state.context.quote &&\n        state.context.request &&\n        state.context.selectedPaymentMethod?.payerWallet && (\n          <StepRunner\n            autoStart={true}\n            client={client}\n            onBack={() => {\n              send({ type: \"BACK\" });\n            }}\n            onCancel={onCancel}\n            onComplete={handleExecutionComplete}\n            request={state.context.request}\n            wallet={state.context.selectedPaymentMethod?.payerWallet}\n            windowAdapter={webWindowAdapter}\n          />\n        )}\n\n      {state.value === \"success\" &&\n        state.context.quote &&\n        state.context.completedStatuses && (\n          <SuccessScreen\n            client={client}\n            completedStatuses={state.context.completedStatuses}\n            onDone={handleBuyComplete}\n            preparedQuote={state.context.quote}\n            uiOptions={uiOptions}\n            windowAdapter={webWindowAdapter}\n          />\n        )}\n\n      {state.value === \"post-buy-transaction\" &&\n        uiOptions.mode === \"transaction\" &&\n        uiOptions.transaction && (\n          <ExecutingTxScreen\n            closeModal={handlePostBuyTransactionComplete}\n            onTxSent={() => {\n              // Do nothing\n            }}\n            tx={uiOptions.transaction}\n            windowAdapter={webWindowAdapter}\n          />\n        )}\n    </Container>\n  );\n}\n", "import { useCallback, useState } from \"react\";\nimport type { Token } from \"../../../bridge/types/Token.js\";\nimport type { Address } from \"../../../utils/address.js\";\nimport type { AsyncStorage } from \"../../../utils/storage/AsyncStorage.js\";\nimport type { Wallet } from \"../../../wallets/interfaces/wallet.js\";\nimport type { WindowAdapter } from \"../adapters/WindowAdapter.js\";\nimport type {\n  BridgePrepareRequest,\n  BridgePrepareResult,\n} from \"../hooks/useBridgePrepare.js\";\nimport type { CompletedStatusResult } from \"../hooks/useStepExecutor.js\";\n\n/**\n * Payment modes supported by BridgeEmbed\n */\ntype PaymentMode = \"fund_wallet\" | \"direct_payment\" | \"transaction\";\n\n/**\n * Payment method types with their required data\n */\nexport type PaymentMethod =\n  | {\n      type: \"wallet\";\n      payerWallet: Wallet;\n      originToken: Token;\n      balance: bigint;\n    }\n  | {\n      type: \"fiat\";\n      payerWallet: Wallet;\n      currency: string;\n      onramp: \"stripe\" | \"coinbase\" | \"transak\";\n    };\n\n/**\n * Payment machine context - holds all flow state data\n */\nexport interface PaymentMachineContext {\n  // Flow configuration\n  mode: PaymentMode;\n\n  // Target requirements (resolved in init state)\n  destinationAmount?: string;\n  destinationToken?: Token;\n  receiverAddress?: Address;\n\n  // User selections (set in methodSelection state)\n  selectedPaymentMethod?: PaymentMethod;\n\n  // Prepared quote data (set in quote state)\n  quote?: BridgePrepareResult;\n  request?: BridgePrepareRequest;\n\n  // Execution results (set in execute state on completion)\n  completedStatuses?: CompletedStatusResult[];\n\n  // Error handling\n  currentError?: Error;\n  retryState?: PaymentMachineState; // State to retry from\n\n  // Dependency injection\n  adapters: {\n    window: WindowAdapter;\n    storage: AsyncStorage;\n  };\n}\n\n/**\n * Events that can be sent to the payment machine\n */\ntype PaymentMachineEvent =\n  | {\n      type: \"DESTINATION_CONFIRMED\";\n      destinationToken: Token;\n      destinationAmount: string;\n      receiverAddress: Address;\n    }\n  | { type: \"PAYMENT_METHOD_SELECTED\"; paymentMethod: PaymentMethod }\n  | {\n      type: \"QUOTE_RECEIVED\";\n      quote: BridgePrepareResult;\n      request: BridgePrepareRequest;\n    }\n  | { type: \"ROUTE_CONFIRMED\" }\n  | { type: \"EXECUTION_COMPLETE\"; completedStatuses: CompletedStatusResult[] }\n  | { type: \"ERROR_OCCURRED\"; error: Error }\n  | { type: \"CONTINUE_TO_TRANSACTION\" }\n  | { type: \"RETRY\" }\n  | { type: \"RESET\" }\n  | { type: \"BACK\" };\n\ntype PaymentMachineState =\n  | \"init\"\n  | \"methodSelection\"\n  | \"quote\"\n  | \"preview\"\n  | \"execute\"\n  | \"success\"\n  | \"post-buy-transaction\"\n  | \"error\";\n\n/**\n * Hook to create and use the payment machine\n */\nexport function usePaymentMachine(\n  adapters: PaymentMachineContext[\"adapters\"],\n  mode: PaymentMode = \"fund_wallet\",\n) {\n  const [currentState, setCurrentState] = useState<PaymentMachineState>(\"init\");\n  const [context, setContext] = useState<PaymentMachineContext>({\n    adapters,\n    mode,\n  });\n\n  const send = useCallback(\n    (event: PaymentMachineEvent) => {\n      setCurrentState((state) => {\n        setContext((ctx) => {\n          switch (state) {\n            case \"init\":\n              if (event.type === \"DESTINATION_CONFIRMED\") {\n                return {\n                  ...ctx,\n                  destinationAmount: event.destinationAmount,\n                  destinationToken: event.destinationToken,\n                  receiverAddress: event.receiverAddress,\n                };\n              } else if (event.type === \"ERROR_OCCURRED\") {\n                return {\n                  ...ctx,\n                  currentError: event.error,\n                  retryState: \"init\",\n                };\n              }\n              break;\n\n            case \"methodSelection\":\n              if (event.type === \"PAYMENT_METHOD_SELECTED\") {\n                return {\n                  ...ctx,\n                  quote: undefined, // reset quote when method changes\n                  selectedPaymentMethod: event.paymentMethod,\n                };\n              } else if (event.type === \"ERROR_OCCURRED\") {\n                return {\n                  ...ctx,\n                  currentError: event.error,\n                  retryState: \"methodSelection\",\n                };\n              }\n              break;\n\n            case \"quote\":\n              if (event.type === \"QUOTE_RECEIVED\") {\n                return {\n                  ...ctx,\n                  quote: event.quote,\n                  request: event.request,\n                };\n              } else if (event.type === \"ERROR_OCCURRED\") {\n                return {\n                  ...ctx,\n                  currentError: event.error,\n                  retryState: \"quote\",\n                };\n              }\n              break;\n\n            case \"preview\":\n              if (event.type === \"ERROR_OCCURRED\") {\n                return {\n                  ...ctx,\n                  currentError: event.error,\n                  retryState: \"preview\",\n                };\n              }\n              break;\n\n            case \"execute\":\n              if (event.type === \"EXECUTION_COMPLETE\") {\n                return {\n                  ...ctx,\n                  completedStatuses: event.completedStatuses,\n                };\n              } else if (event.type === \"ERROR_OCCURRED\") {\n                return {\n                  ...ctx,\n                  currentError: event.error,\n                  retryState: \"execute\",\n                };\n              }\n              break;\n\n            case \"error\":\n              if (event.type === \"RETRY\" || event.type === \"RESET\") {\n                return {\n                  ...ctx,\n                  currentError: undefined,\n                  retryState: undefined,\n                };\n              }\n              break;\n\n            case \"success\":\n              if (event.type === \"RESET\") {\n                return {\n                  adapters: ctx.adapters,\n                  mode: ctx.mode,\n                };\n              }\n              break;\n\n            case \"post-buy-transaction\":\n              if (event.type === \"RESET\") {\n                return {\n                  adapters: ctx.adapters,\n                  mode: ctx.mode,\n                };\n              }\n              break;\n          }\n          return ctx;\n        });\n\n        // State transitions\n        switch (state) {\n          case \"init\":\n            if (event.type === \"DESTINATION_CONFIRMED\")\n              return \"methodSelection\";\n            if (event.type === \"ERROR_OCCURRED\") return \"error\";\n            break;\n\n          case \"methodSelection\":\n            if (event.type === \"PAYMENT_METHOD_SELECTED\") return \"quote\";\n            if (event.type === \"BACK\") return \"init\";\n            if (event.type === \"ERROR_OCCURRED\") return \"error\";\n            break;\n\n          case \"quote\":\n            if (event.type === \"QUOTE_RECEIVED\") return \"preview\";\n            if (event.type === \"BACK\") return \"methodSelection\";\n            if (event.type === \"ERROR_OCCURRED\") return \"error\";\n            break;\n\n          case \"preview\":\n            if (event.type === \"ROUTE_CONFIRMED\") return \"execute\";\n            if (event.type === \"BACK\") return \"methodSelection\";\n            if (event.type === \"ERROR_OCCURRED\") return \"error\";\n            break;\n\n          case \"execute\":\n            if (event.type === \"EXECUTION_COMPLETE\") return \"success\";\n            if (event.type === \"BACK\") return \"preview\";\n            if (event.type === \"ERROR_OCCURRED\") return \"error\";\n            break;\n\n          case \"success\":\n            if (event.type === \"CONTINUE_TO_TRANSACTION\")\n              return \"post-buy-transaction\";\n            if (event.type === \"RESET\") return \"init\";\n            break;\n\n          case \"post-buy-transaction\":\n            if (event.type === \"RESET\") return \"init\";\n            break;\n\n          case \"error\":\n            if (event.type === \"RETRY\") {\n              return context.retryState ?? \"init\";\n            }\n            if (event.type === \"RESET\") {\n              return \"init\";\n            }\n            break;\n        }\n\n        return state;\n      });\n    },\n    [context.retryState],\n  );\n\n  return [\n    {\n      context,\n      value: currentState,\n    },\n    send,\n  ] as const;\n}\n", "import { CheckIcon, ExternalLinkIcon } from \"@radix-ui/react-icons\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport type { Hex } from \"viem\";\nimport type { WaitForReceiptOptions } from \"../../../../transaction/actions/wait-for-tx-receipt.js\";\nimport type { PreparedTransaction } from \"../../../../transaction/prepare-transaction.js\";\nimport { formatExplorerTxUrl } from \"../../../../utils/url.js\";\nimport type { WindowAdapter } from \"../../../core/adapters/WindowAdapter.js\";\nimport { useCustomTheme } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport { iconSize } from \"../../../core/design-system/index.js\";\nimport { useChainExplorers } from \"../../../core/hooks/others/useChainQuery.js\";\nimport { useSendTransaction } from \"../../hooks/transaction/useSendTransaction.js\";\nimport { AccentFailIcon } from \"../ConnectWallet/icons/AccentFailIcon.js\";\nimport { Container, ModalHeader } from \"../components/basic.js\";\nimport { Button } from \"../components/buttons.js\";\nimport { Spacer } from \"../components/Spacer.js\";\nimport { Spinner } from \"../components/Spinner.js\";\nimport { Text } from \"../components/text.js\";\n\nexport function ExecutingTxScreen(props: {\n  tx: PreparedTransaction;\n  closeModal: () => void;\n  onTxSent: (data: WaitForReceiptOptions) => void;\n  onBack?: () => void;\n  windowAdapter: WindowAdapter;\n}) {\n  const sendTxCore = useSendTransaction({\n    payModal: false,\n  });\n  const [txHash, setTxHash] = useState<Hex | undefined>();\n  const [txError, setTxError] = useState<Error | undefined>();\n  const chainExplorers = useChainExplorers(props.tx.chain);\n  const [status, setStatus] = useState<\"loading\" | \"failed\" | \"sent\">(\n    \"loading\",\n  );\n  const theme = useCustomTheme();\n\n  const sendTx = useCallback(async () => {\n    setStatus(\"loading\");\n    setTxError(undefined);\n    try {\n      const txData = await sendTxCore.mutateAsync(props.tx);\n      setTxHash(txData.transactionHash);\n      props.onTxSent(txData);\n      setStatus(\"sent\");\n    } catch (e) {\n      // Do not reject the transaction here, because the user may want to try again\n      // we only reject on modal close\n      console.error(e);\n      setTxError(e as Error);\n      setStatus(\"failed\");\n    }\n  }, [sendTxCore, props.tx, props.onTxSent]);\n\n  const done = useRef(false);\n  useEffect(() => {\n    if (done.current) {\n      return;\n    }\n\n    done.current = true;\n    sendTx();\n  }, [sendTx]);\n\n  return (\n    <Container p=\"lg\">\n      <ModalHeader onBack={props.onBack} title=\"Transaction\" />\n\n      <Spacer y=\"xxl\" />\n\n      <Container center=\"x\" flex=\"row\">\n        {status === \"loading\" && <Spinner color=\"accentText\" size=\"xxl\" />}\n        {status === \"failed\" && <AccentFailIcon size={iconSize[\"3xl\"]} />}\n        {status === \"sent\" && (\n          <Container\n            center=\"both\"\n            flex=\"row\"\n            style={{\n              animation: \"successBounce 0.6s ease-out\",\n              backgroundColor: theme.colors.tertiaryBg,\n              border: `2px solid ${theme.colors.success}`,\n              borderRadius: \"50%\",\n              height: \"64px\",\n              marginBottom: \"16px\",\n              width: \"64px\",\n            }}\n          >\n            <CheckIcon\n              color={theme.colors.success}\n              height={iconSize.xl}\n              style={{\n                animation: \"checkAppear 0.3s ease-out 0.3s both\",\n              }}\n              width={iconSize.xl}\n            />\n          </Container>\n        )}\n      </Container>\n\n      <Spacer y=\"md\" />\n\n      <Text center color=\"primaryText\" size=\"lg\">\n        {status === \"loading\" && \"Sending transaction\"}\n        {status === \"failed\" && \"Transaction failed\"}\n        {status === \"sent\" && \"Transaction sent\"}\n      </Text>\n      <Spacer y=\"sm\" />\n      <Text center color=\"danger\" size=\"sm\">\n        {status === \"failed\" && txError ? txError.message || \"\" : \"\"}\n      </Text>\n\n      <Spacer y=\"xl\" />\n\n      {status === \"failed\" && (\n        <Button fullWidth onClick={sendTx} variant=\"accent\">\n          Try Again\n        </Button>\n      )}\n\n      {status === \"sent\" && (\n        <>\n          {txHash && (\n            <>\n              <Button\n                color=\"primaryText\"\n                fullWidth\n                gap=\"xs\"\n                onClick={() => {\n                  props.windowAdapter.open(\n                    formatExplorerTxUrl(\n                      chainExplorers.explorers[0]?.url ?? \"\",\n                      txHash,\n                    ),\n                  );\n                }}\n                variant=\"secondary\"\n              >\n                View on Explorer\n                <ExternalLinkIcon height={iconSize.sm} width={iconSize.sm} />\n              </Button>\n              <Spacer y=\"sm\" />\n            </>\n          )}\n          <Button fullWidth onClick={props.closeModal} variant=\"accent\">\n            Done\n          </Button>\n        </>\n      )}\n\n      {/* CSS Animations */}\n      <style>\n        {`\n          @keyframes successBounce {\n            0% {\n              transform: scale(0.3);\n              opacity: 0;\n            }\n            50% {\n              transform: scale(1.05);\n            }\n            70% {\n              transform: scale(0.9);\n            }\n            100% {\n              transform: scale(1);\n              opacity: 1;\n            }\n          }\n\n          @keyframes checkAppear {\n            0% {\n              transform: scale(0);\n              opacity: 0;\n            }\n            100% {\n              transform: scale(1);\n              opacity: 1;\n            }\n          }\n        `}\n      </style>\n    </Container>\n  );\n}\n", "import { useMemo } from \"react\";\nimport type { Token } from \"../../../../../bridge/index.js\";\nimport type { Chain } from \"../../../../../chains/types.js\";\nimport { getCachedChain } from \"../../../../../chains/utils.js\";\nimport type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../constants/addresses.js\";\nimport { resolveScheme } from \"../../../../../utils/ipfs.js\";\nimport { useCustomTheme } from \"../../../../core/design-system/CustomThemeProvider.js\";\nimport { iconSize, spacing } from \"../../../../core/design-system/index.js\";\nimport {\n  useChainIconUrl,\n  useChainMetadata,\n} from \"../../../../core/hooks/others/useChainQuery.js\";\nimport { genericTokenIcon } from \"../../../../core/utils/walletIcon.js\";\nimport { isNativeToken } from \"../../ConnectWallet/screens/nativeToken.js\";\nimport { Container } from \"../../components/basic.js\";\nimport { ChainName } from \"../../components/ChainName.js\";\nimport { fallbackChainIcon } from \"../../components/fallbackChainIcon.js\";\nimport { Img } from \"../../components/Img.js\";\nimport { Text } from \"../../components/text.js\";\n\nexport function TokenAndChain({\n  token,\n  client,\n  size,\n  style,\n}: {\n  token: Omit<Token, \"priceUsd\">;\n  client: ThirdwebClient;\n  size: keyof typeof iconSize;\n  style?: React.CSSProperties;\n}) {\n  const theme = useCustomTheme();\n  const chain = getCachedChain(token.chainId);\n  return (\n    <Container\n      center=\"y\"\n      flex=\"row\"\n      gap=\"sm\"\n      style={{\n        flexWrap: \"nowrap\",\n        ...style,\n      }}\n    >\n      <Container\n        style={{\n          height: iconSize[size],\n          position: \"relative\",\n          width: iconSize[size],\n        }}\n      >\n        <TokenIconWithFallback client={client} size={size} token={token} />\n        {chain.id !== 1 && (\n          <Container\n            style={{\n              background: theme.colors.borderColor,\n              border: `1.5px solid ${theme.colors.modalBg}`,\n              borderRadius: \"50%\",\n              bottom: \"-2px\",\n              height:\n                size === \"lg\" || size === \"xl\" ? iconSize.sm : iconSize.xs,\n              position: \"absolute\",\n              right: \"-6px\",\n              width: size === \"lg\" || size === \"xl\" ? iconSize.sm : iconSize.xs,\n            }}\n          >\n            <ChainIcon\n              chain={chain}\n              client={client}\n              size={size === \"xl\" || size === \"lg\" ? \"sm\" : \"xs\"}\n            />\n          </Container>\n        )}\n      </Container>\n\n      <Container flex=\"column\" gap=\"3xs\" style={{ minWidth: 0 }}>\n        <Text\n          color=\"primaryText\"\n          size={size === \"xl\" ? \"lg\" : \"sm\"}\n          style={{\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n            whiteSpace: \"nowrap\",\n          }}\n          weight={600}\n        >\n          {token.name}\n        </Text>\n        <ChainName\n          chain={chain}\n          client={client}\n          short\n          size={size === \"xl\" ? \"sm\" : \"xs\"}\n        />\n      </Container>\n    </Container>\n  );\n}\n\nfunction TokenIconWithFallback(props: {\n  token: Omit<Token, \"priceUsd\">;\n  size: keyof typeof iconSize;\n  client: ThirdwebClient;\n}) {\n  const chain = getCachedChain(props.token.chainId);\n  const chainMeta = useChainMetadata(chain).data;\n  const theme = useCustomTheme();\n\n  const tokenImage = useMemo(() => {\n    if (\n      isNativeToken(props.token) ||\n      props.token.address === NATIVE_TOKEN_ADDRESS\n    ) {\n      if (chainMeta?.nativeCurrency.symbol === \"ETH\") {\n        return \"ipfs://QmcxZHpyJa8T4i63xqjPYrZ6tKrt55tZJpbXcjSDKuKaf9/ethereum/512.png\"; // ETH icon\n      }\n      return chainMeta?.icon?.url;\n    }\n    return props.token.iconUri;\n  }, [props.token, chainMeta?.icon?.url, chainMeta?.nativeCurrency.symbol]);\n\n  return tokenImage ? (\n    <Img\n      client={props.client}\n      fallbackImage={genericTokenIcon}\n      height={iconSize[props.size]}\n      src={tokenImage}\n      style={{\n        borderRadius: \"50%\",\n      }}\n      width={iconSize[props.size]}\n    />\n  ) : (\n    <Container\n      style={{\n        alignItems: \"center\",\n        backgroundColor: theme.colors.secondaryButtonBg,\n        border: `1px solid ${theme.colors.borderColor}`,\n        borderRadius: \"50%\",\n        display: \"flex\",\n        height: `${iconSize.md}px`,\n        justifyContent: \"center\",\n        padding: spacing.xs,\n        width: `${iconSize.md}px`,\n      }}\n    >\n      <Text\n        color=\"secondaryText\"\n        size={props.size === \"xl\" ? \"sm\" : \"xs\"}\n        style={{ fontWeight: 600 }}\n      >\n        {props.token.symbol.slice(0, 1)}\n      </Text>\n    </Container>\n  );\n}\n\nexport const ChainIcon: React.FC<{\n  chain: Chain;\n  size: keyof typeof iconSize;\n  client: ThirdwebClient;\n}> = (props) => {\n  const { url } = useChainIconUrl(props.chain);\n  return (\n    <Container\n      style={{\n        alignItems: \"center\",\n        display: \"flex\",\n        flexShrink: 0,\n        position: \"relative\",\n      }}\n    >\n      <Img\n        client={props.client}\n        fallbackImage={fallbackChainIcon}\n        height={iconSize[props.size]}\n        src={getSrcChainIcon({\n          chainIconUrl: url,\n          client: props.client,\n        })}\n        width={iconSize[props.size]}\n      />\n    </Container>\n  );\n};\n\nconst getSrcChainIcon = (props: {\n  client: ThirdwebClient;\n  chainIconUrl?: string;\n}) => {\n  const url = props.chainIconUrl;\n  if (!url) {\n    return fallbackChainIcon;\n  }\n  try {\n    return resolveScheme({\n      client: props.client,\n      uri: url,\n    });\n  } catch {\n    return fallbackChainIcon;\n  }\n};\n", "import type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport { resolveScheme } from \"../../../../../utils/ipfs.js\";\nimport { useCustomTheme } from \"../../../../core/design-system/CustomThemeProvider.js\";\nimport { radius } from \"../../../../core/design-system/index.js\";\nimport { Container } from \"../../components/basic.js\";\nimport { Spacer } from \"../../components/Spacer.js\";\nimport { Text } from \"../../components/text.js\";\nimport type { UIOptions } from \"../BridgeOrchestrator.js\";\n\nexport function WithHeader({\n  children,\n  uiOptions,\n  defaultTitle,\n  client,\n}: {\n  children: React.ReactNode;\n  uiOptions: UIOptions;\n  defaultTitle: string;\n  client: ThirdwebClient;\n}) {\n  const theme = useCustomTheme();\n  return (\n    <Container flex=\"column\">\n      {/* image */}\n      {uiOptions.metadata?.image && (\n        <div\n          style={{\n            aspectRatio: \"16/9\",\n            backgroundColor: theme.colors.tertiaryBg,\n            backgroundImage: `url(${getUrl(client, uiOptions.metadata.image)})`,\n            backgroundPosition: \"center\",\n            backgroundSize: \"cover\",\n            borderRadius: `${radius.md} ${radius.md} 0 0`,\n            overflow: \"hidden\",\n            width: \"100%\",\n          }}\n        />\n      )}\n      <Container flex=\"column\" px=\"lg\">\n        <Spacer y=\"lg\" />\n\n        {/* title */}\n        <Text color=\"primaryText\" size=\"lg\" weight={700}>\n          {uiOptions.metadata?.title || defaultTitle}\n        </Text>\n\n        {/* Description */}\n        {uiOptions.metadata?.description && (\n          <>\n            <Spacer y=\"xs\" />\n            <Text color=\"secondaryText\" size=\"sm\">\n              {uiOptions.metadata?.description}\n            </Text>\n          </>\n        )}\n\n        <Spacer y=\"lg\" />\n        {children}\n      </Container>\n    </Container>\n  );\n}\n\nfunction getUrl(client: ThirdwebClient, uri: string) {\n  if (!uri.startsWith(\"ipfs://\")) {\n    return uri;\n  }\n  return resolveScheme({\n    client,\n    uri,\n  });\n}\n", "\"use client\";\nimport type { Token } from \"../../../../bridge/types/Token.js\";\nimport { defineChain } from \"../../../../chains/utils.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport { type Address, shortenAddress } from \"../../../../utils/address.js\";\nimport { useCustomTheme } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport { useActiveAccount } from \"../../../core/hooks/wallets/useActiveAccount.js\";\nimport { useEnsName } from \"../../../core/utils/wallet.js\";\nimport { ConnectButton } from \"../ConnectWallet/ConnectButton.js\";\nimport { PoweredByThirdweb } from \"../ConnectWallet/PoweredByTW.js\";\nimport { FiatValue } from \"../ConnectWallet/screens/Buy/swap/FiatValue.js\";\nimport { Container, Line } from \"../components/basic.js\";\nimport { Button } from \"../components/buttons.js\";\nimport { ChainName } from \"../components/ChainName.js\";\nimport { Spacer } from \"../components/Spacer.js\";\nimport { Text } from \"../components/text.js\";\nimport type { PayEmbedConnectOptions } from \"../PayEmbed.js\";\nimport type { UIOptions } from \"./BridgeOrchestrator.js\";\nimport { ChainIcon } from \"./common/TokenAndChain.js\";\nimport { WithHeader } from \"./common/WithHeader.js\";\n\nexport interface DirectPaymentProps {\n  /**\n   * Payment information for the direct payment\n   */\n  uiOptions: Extract<UIOptions, { mode: \"direct_payment\" }>;\n\n  /**\n   * ThirdwebClient for blockchain interactions\n   */\n  client: ThirdwebClient;\n\n  /**\n   * Called when user continues with the payment\n   */\n  onContinue: (amount: string, token: Token, receiverAddress: Address) => void;\n\n  /**\n   * Connect options for wallet connection\n   */\n  connectOptions?: PayEmbedConnectOptions;\n}\n\nexport function DirectPayment({\n  uiOptions,\n  client,\n  onContinue,\n  connectOptions,\n}: DirectPaymentProps) {\n  const activeAccount = useActiveAccount();\n  const chain = defineChain(uiOptions.paymentInfo.token.chainId);\n  const theme = useCustomTheme();\n  const handleContinue = () => {\n    onContinue(\n      uiOptions.paymentInfo.amount,\n      uiOptions.paymentInfo.token,\n      uiOptions.paymentInfo.sellerAddress,\n    );\n  };\n  const ensName = useEnsName({\n    address: uiOptions.paymentInfo.sellerAddress,\n    client,\n  });\n  const sellerAddress =\n    ensName.data || shortenAddress(uiOptions.paymentInfo.sellerAddress);\n\n  const buyNow = (\n    <Container flex=\"row\" gap=\"3xs\">\n      <Text color=\"primaryButtonText\" size=\"md\">\n        Buy Now ·\n      </Text>\n      <FiatValue\n        chain={chain}\n        client={client}\n        color=\"primaryButtonText\"\n        size=\"md\"\n        token={uiOptions.paymentInfo.token}\n        tokenAmount={uiOptions.paymentInfo.amount}\n      />\n    </Container>\n  );\n\n  return (\n    <WithHeader\n      client={client}\n      defaultTitle=\"Direct Payment\"\n      uiOptions={uiOptions}\n    >\n      {/* Price section */}\n      <Container\n        center=\"y\"\n        flex=\"row\"\n        gap=\"3xs\"\n        style={{\n          justifyContent: \"space-between\",\n        }}\n      >\n        <FiatValue\n          chain={chain}\n          client={client}\n          color=\"primaryText\"\n          size=\"xl\"\n          token={uiOptions.paymentInfo.token}\n          tokenAmount={uiOptions.paymentInfo.amount}\n          weight={700}\n        />\n        <Container flex=\"row\" gap=\"3xs\">\n          <Text\n            color=\"secondaryText\"\n            size=\"xs\"\n            style={{\n              overflow: \"hidden\",\n              textOverflow: \"ellipsis\",\n              whiteSpace: \"nowrap\",\n            }}\n          >\n            One-time payment\n          </Text>\n        </Container>\n      </Container>\n\n      <Spacer y=\"md\" />\n\n      <Line />\n\n      <Spacer y=\"md\" />\n\n      {/* Seller section */}\n      <Container\n        flex=\"row\"\n        style={{\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Text color=\"secondaryText\" size=\"sm\">\n          Sold by\n        </Text>\n        <Text\n          color=\"primaryText\"\n          size=\"sm\"\n          style={{\n            fontFamily: \"monospace\",\n          }}\n        >\n          {sellerAddress}\n        </Text>\n      </Container>\n\n      <Spacer y=\"xs\" />\n\n      <Container\n        flex=\"row\"\n        style={{\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Text color=\"secondaryText\" size=\"sm\">\n          Price\n        </Text>\n        <Text\n          color=\"primaryText\"\n          size=\"sm\"\n          style={{\n            fontFamily: \"monospace\",\n          }}\n        >\n          {`${uiOptions.paymentInfo.amount} ${uiOptions.paymentInfo.token.symbol}`}\n        </Text>\n      </Container>\n\n      <Spacer y=\"xs\" />\n\n      {/* Network section */}\n      <Container\n        flex=\"row\"\n        style={{\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Text color=\"secondaryText\" size=\"sm\">\n          Network\n        </Text>\n        <Container center=\"y\" flex=\"row\" gap=\"3xs\">\n          <ChainIcon chain={chain} client={client} size={\"xs\"} />\n          <ChainName\n            chain={chain}\n            client={client}\n            color=\"primaryText\"\n            short\n            size=\"sm\"\n            style={{\n              fontFamily: \"monospace\",\n            }}\n          />\n        </Container>\n      </Container>\n\n      <Spacer y=\"md\" />\n\n      <Line />\n\n      <Spacer y=\"lg\" />\n\n      {/* Action button */}\n      <Container flex=\"column\">\n        {activeAccount ? (\n          <Button fullWidth onClick={handleContinue} variant=\"primary\">\n            {buyNow}\n          </Button>\n        ) : (\n          <ConnectButton\n            client={client}\n            connectButton={{\n              label: buyNow,\n              style: {\n                width: \"100%\",\n              },\n            }}\n            theme={theme}\n            {...connectOptions}\n          />\n        )}\n\n        <Spacer y=\"md\" />\n\n        <PoweredByThirdweb />\n        <Spacer y=\"lg\" />\n      </Container>\n    </WithHeader>\n  );\n}\n", "import { ApiError } from \"../../../bridge/types/Errors.js\";\nimport { isRetryable, mapBridgeError } from \"../errors/mapBridgeError.js\";\n\n/**\n * Parameters for the useBridgeError hook\n */\ninterface UseBridgeErrorParams {\n  /**\n   * The error to process. Can be an ApiError or generic Error.\n   */\n  error: Error | ApiError | null | undefined;\n}\n\n/**\n * Result returned by the useBridgeError hook\n */\ninterface UseBridgeErrorResult {\n  /**\n   * The mapped/normalized error, null if no error provided\n   */\n  mappedError: ApiError | null;\n\n  /**\n   * Whether this error can be retried\n   */\n  isRetryable: boolean;\n\n  /**\n   * User-friendly error message\n   */\n  userMessage: string;\n\n  /**\n   * Technical error code for debugging\n   */\n  errorCode: string | null;\n\n  /**\n   * HTTP status code if available\n   */\n  statusCode: number | null;\n\n  /**\n   * Whether this is a client-side error (4xx)\n   */\n  isClientError: boolean;\n\n  /**\n   * Whether this is a server-side error (5xx)\n   */\n  isServerError: boolean;\n}\n\n/**\n * Hook that processes bridge errors using mapBridgeError and isRetryable\n *\n * @param params - Parameters containing the error to process\n * @returns Processed error information with retry logic and user-friendly messages\n *\n * @example\n * ```tsx\n * const { data, error } = useBridgeRoutes({ client, originChainId: 1 });\n * const {\n *   mappedError,\n *   isRetryable,\n *   userMessage,\n *   isClientError\n * } = useBridgeError({ error });\n *\n * if (error) {\n *   return (\n *     <div>\n *       <p>{userMessage}</p>\n *       {isRetryable && <button onClick={retry}>Try Again</button>}\n *     </div>\n *   );\n * }\n * ```\n */\nexport function useBridgeError(\n  params: UseBridgeErrorParams,\n): UseBridgeErrorResult {\n  const { error } = params;\n\n  // No error case\n  if (!error) {\n    return {\n      errorCode: null,\n      isClientError: false,\n      isRetryable: false,\n      isServerError: false,\n      mappedError: null,\n      statusCode: null,\n      userMessage: \"\",\n    };\n  }\n\n  // Convert to ApiError if it's not already\n  let apiError: ApiError;\n  if (error instanceof ApiError) {\n    apiError = mapBridgeError(error);\n  } else {\n    // Create ApiError from generic Error\n    apiError = new ApiError({\n      code: \"UNKNOWN_ERROR\",\n      message: error.message || \"An unknown error occurred\",\n      statusCode: 500, // Default for generic errors\n    });\n  }\n\n  const statusCode = apiError.statusCode || null;\n  const isClientError =\n    statusCode !== null && statusCode >= 400 && statusCode < 500;\n  const isServerError = statusCode !== null && statusCode >= 500;\n\n  // Generate user-friendly message based on error code\n  const userMessage = getUserFriendlyMessage(apiError);\n\n  return {\n    errorCode: apiError.code,\n    isClientError,\n    isRetryable: isRetryable(apiError.code),\n    isServerError,\n    mappedError: apiError,\n    statusCode,\n    userMessage,\n  };\n}\n\n/**\n * Converts technical error codes to user-friendly messages\n */\nfunction getUserFriendlyMessage(error: ApiError): string {\n  switch (error.code) {\n    case \"INVALID_INPUT\":\n      return \"Invalid input provided. Please check your parameters and try again.\";\n    case \"ROUTE_NOT_FOUND\":\n      return \"No route found for this transaction. Please try a different token pair or amount.\";\n    case \"AMOUNT_TOO_LOW\":\n      return \"The amount is too low for this transaction. Please increase the amount.\";\n    case \"AMOUNT_TOO_HIGH\":\n      return \"The amount is too high for this transaction. Please decrease the amount.\";\n    case \"INTERNAL_SERVER_ERROR\":\n      return \"A temporary error occurred. Please try again in a moment.\";\n    default:\n      // Fallback to the original error message if available\n      return error.message || \"An unexpected error occurred. Please try again.\";\n  }\n}\n", "\"use client\";\nimport { CrossCircledIcon } from \"@radix-ui/react-icons\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { trackPayEvent } from \"../../../../analytics/track/pay.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport { useCustomTheme } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport { iconSize } from \"../../../core/design-system/index.js\";\nimport { useBridgeError } from \"../../../core/hooks/useBridgeError.js\";\nimport { Container } from \"../components/basic.js\";\nimport { Button } from \"../components/buttons.js\";\nimport { Text } from \"../components/text.js\";\n\ninterface ErrorBannerProps {\n  /**\n   * The error to display\n   */\n  error: Error;\n\n  /**\n   * Called when user wants to retry\n   */\n  onRetry: () => void;\n\n  /**\n   * Called when user wants to cancel\n   */\n  onCancel?: () => void;\n  client: ThirdwebClient;\n}\n\nexport function ErrorBanner({\n  error,\n  onRetry,\n  onCancel,\n  client,\n}: ErrorBannerProps) {\n  const theme = useCustomTheme();\n\n  const { userMessage } = useBridgeError({ error });\n\n  useQuery({\n    queryFn: () => {\n      trackPayEvent({\n        client,\n        error: error.message,\n        event: \"ub:ui:error\",\n      });\n    },\n    queryKey: [\"error_banner\", userMessage],\n  });\n\n  return (\n    <Container flex=\"column\" fullHeight gap=\"md\" p=\"lg\">\n      {/* Error Icon and Message */}\n      <Container flex=\"row\" gap=\"md\" style={{ alignItems: \"flex-start\" }}>\n        <Container\n          center=\"both\"\n          style={{\n            backgroundColor: theme.colors.tertiaryBg,\n            borderRadius: \"50%\",\n            flexShrink: 0,\n            height: \"24px\",\n            width: \"24px\",\n          }}\n        >\n          <CrossCircledIcon\n            color={theme.colors.danger}\n            height={iconSize.md}\n            width={iconSize.md}\n          />\n        </Container>\n\n        <Container flex=\"column\" fullHeight gap=\"sm\" style={{ flex: 1 }}>\n          <Text color=\"primaryText\" size=\"lg\">\n            Error\n          </Text>\n          <Container\n            flex=\"column\"\n            gap=\"sm\"\n            style={{\n              minHeight: \"100px\",\n            }}\n          >\n            <Container flex=\"column\" gap=\"sm\" style={{ flex: 1 }}>\n              <Text color=\"secondaryText\" size=\"sm\">\n                {userMessage}\n              </Text>\n            </Container>\n          </Container>\n\n          {/* Action Buttons */}\n          <Container flex=\"row\" gap=\"sm\" style={{ justifyContent: \"flex-end\" }}>\n            <Button onClick={onRetry} variant=\"primary\">\n              Try Again\n            </Button>\n            {onCancel && (\n              <Button onClick={onCancel} variant=\"secondary\">\n                Cancel\n              </Button>\n            )}\n          </Container>\n        </Container>\n      </Container>\n    </Container>\n  );\n}\n", "\"use client\";\nimport { useRef, useState } from \"react\";\nimport type { Token } from \"../../../../bridge/types/Token.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport { type Address, getAddress } from \"../../../../utils/address.js\";\nimport { useCustomTheme } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport {\n  fontSize,\n  iconSize,\n  radius,\n  spacing,\n} from \"../../../core/design-system/index.js\";\nimport { useActiveAccount } from \"../../../core/hooks/wallets/useActiveAccount.js\";\nimport { ConnectButton } from \"../ConnectWallet/ConnectButton.js\";\nimport { OutlineWalletIcon } from \"../ConnectWallet/icons/OutlineWalletIcon.js\";\nimport { PoweredByThirdweb } from \"../ConnectWallet/PoweredByTW.js\";\nimport { WalletRow } from \"../ConnectWallet/screens/Buy/swap/WalletRow.js\";\nimport { Container } from \"../components/basic.js\";\nimport { Button } from \"../components/buttons.js\";\nimport { Input } from \"../components/formElements.js\";\nimport { Spacer } from \"../components/Spacer.js\";\nimport { Text } from \"../components/text.js\";\nimport type { PayEmbedConnectOptions } from \"../PayEmbed.js\";\nimport type { UIOptions } from \"./BridgeOrchestrator.js\";\nimport { TokenAndChain } from \"./common/TokenAndChain.js\";\nimport { WithHeader } from \"./common/WithHeader.js\";\n\nexport interface FundWalletProps {\n  /**\n   * UI configuration and mode\n   */\n  uiOptions: Extract<UIOptions, { mode: \"fund_wallet\" }>;\n\n  /**\n   * The receiver address, defaults to the connected wallet address\n   */\n  receiverAddress?: Address;\n  /**\n   * ThirdwebClient for price fetching\n   */\n  client: ThirdwebClient;\n\n  /**\n   * Called when continue is clicked with the resolved requirements\n   */\n  onContinue: (amount: string, token: Token, receiverAddress: Address) => void;\n\n  /**\n   * Quick buy amounts\n   */\n  presetOptions?: [number, number, number];\n\n  /**\n   * Connect options for wallet connection\n   */\n  connectOptions?: PayEmbedConnectOptions;\n}\n\nexport function FundWallet({\n  client,\n  receiverAddress,\n  uiOptions,\n  onContinue,\n  presetOptions = [5, 10, 20],\n  connectOptions,\n}: FundWalletProps) {\n  const [amount, setAmount] = useState(uiOptions.initialAmount ?? \"\");\n  const theme = useCustomTheme();\n  const account = useActiveAccount();\n  const receiver = receiverAddress ?? account?.address;\n  const handleAmountChange = (inputValue: string) => {\n    let processedValue = inputValue;\n\n    // Replace comma with period if it exists\n    processedValue = processedValue.replace(\",\", \".\");\n\n    if (processedValue.startsWith(\".\")) {\n      processedValue = `0${processedValue}`;\n    }\n\n    const numValue = Number(processedValue);\n    if (Number.isNaN(numValue)) {\n      return;\n    }\n\n    if (processedValue.startsWith(\"0\") && !processedValue.startsWith(\"0.\")) {\n      setAmount(processedValue.slice(1));\n    } else {\n      setAmount(processedValue);\n    }\n  };\n\n  const getAmountFontSize = () => {\n    const length = amount.length;\n    if (length > 12) return fontSize.md;\n    if (length > 8) return fontSize.lg;\n    return fontSize.xl;\n  };\n\n  const isValidAmount = amount && Number(amount) > 0;\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const focusInput = () => {\n    inputRef.current?.focus();\n  };\n\n  const handleQuickAmount = (usdAmount: number) => {\n    if (uiOptions.destinationToken.priceUsd === 0) {\n      return;\n    }\n    // Convert USD amount to token amount using token price\n    const tokenAmount = usdAmount / uiOptions.destinationToken.priceUsd;\n    // Format to reasonable decimal places (up to 6 decimals, remove trailing zeros)\n    const formattedAmount = Number.parseFloat(\n      tokenAmount.toFixed(6),\n    ).toString();\n    setAmount(formattedAmount);\n  };\n\n  return (\n    <WithHeader\n      client={client}\n      defaultTitle={`Buy ${uiOptions.destinationToken.symbol}`}\n      uiOptions={uiOptions}\n    >\n      <Container flex=\"column\">\n        {/* Token Info */}\n        <Container\n          center=\"both\"\n          flex=\"row\"\n          gap=\"3xs\"\n          p=\"md\"\n          style={{\n            backgroundColor: theme.colors.tertiaryBg,\n            border: `1px solid ${theme.colors.borderColor}`,\n            borderRadius: radius.md,\n            flexWrap: \"nowrap\",\n          }}\n        >\n          <TokenAndChain\n            client={client}\n            size=\"xl\"\n            token={uiOptions.destinationToken}\n          />\n          {/* Amount Input */}\n          <Container\n            center=\"x\"\n            expand\n            flex=\"column\"\n            gap=\"3xs\"\n            style={{\n              alignItems: \"flex-end\",\n              justifyContent: \"flex-end\",\n            }}\n          >\n            <div\n              onClick={focusInput}\n              onKeyDown={(e: React.KeyboardEvent<HTMLDivElement>) => {\n                if (e.key === \"Enter\" || e.key === \" \") {\n                  e.preventDefault();\n                  focusInput();\n                }\n              }}\n              // biome-ignore lint/a11y/useSemanticElements: FIXME\n              role=\"button\"\n              style={{ cursor: \"text\" }}\n              tabIndex={0}\n            >\n              <Container\n                center=\"y\"\n                flex=\"row\"\n                gap=\"xs\"\n                style={{\n                  flexWrap: \"nowrap\",\n                  justifyContent: \"flex-end\",\n                }}\n              >\n                <Input\n                  data-placeholder={amount === \"\"}\n                  inputMode=\"decimal\"\n                  onChange={(e) => {\n                    handleAmountChange(e.target.value);\n                  }}\n                  onClick={(e) => {\n                    // put cursor at the end of the input\n                    if (amount === \"\") {\n                      e.currentTarget.setSelectionRange(\n                        e.currentTarget.value.length,\n                        e.currentTarget.value.length,\n                      );\n                    }\n                  }}\n                  pattern=\"^[0-9]*[.,]?[0-9]*$\"\n                  placeholder=\"0\"\n                  ref={inputRef}\n                  style={{\n                    border: \"none\",\n                    boxShadow: \"none\",\n                    fontSize: getAmountFontSize(),\n                    fontWeight: 600,\n                    padding: \"0\",\n                    textAlign: \"right\",\n                  }}\n                  type=\"text\"\n                  value={amount || \"0\"}\n                  variant=\"transparent\"\n                />\n              </Container>\n            </div>\n\n            {/* Fiat Value */}\n            <Container\n              center=\"both\"\n              flex=\"row\"\n              style={{ flexWrap: \"nowrap\", height: fontSize.lg }}\n            >\n              <Text\n                color=\"secondaryText\"\n                size=\"md\"\n                style={{ textWrap: \"nowrap\" }}\n              >\n                ≈ $\n                {(Number(amount) * uiOptions.destinationToken.priceUsd).toFixed(\n                  2,\n                )}\n              </Text>\n            </Container>\n          </Container>\n        </Container>\n\n        {/* Quick Amount Buttons */}\n        {presetOptions && (\n          <>\n            <Spacer y=\"md\" />\n            <Container\n              center=\"x\"\n              flex=\"row\"\n              gap=\"xs\"\n              style={{\n                justifyContent: \"space-evenly\",\n              }}\n            >\n              {presetOptions?.map((amount) => (\n                <Button\n                  key={amount}\n                  onClick={() => handleQuickAmount(Number(amount))}\n                  style={{\n                    backgroundColor: theme.colors.tertiaryBg,\n                    flex: 1,\n                    fontSize: fontSize.sm,\n                    padding: `${spacing.sm} ${spacing.md}`,\n                  }}\n                  variant=\"outline\"\n                >\n                  ${amount}\n                </Button>\n              ))}\n            </Container>\n          </>\n        )}\n\n        <Spacer y=\"md\" />\n\n        <Container\n          center=\"y\"\n          color=\"secondaryText\"\n          flex=\"row\"\n          gap=\"sm\"\n          px=\"md\"\n          py=\"sm\"\n          style={{\n            backgroundColor: theme.colors.tertiaryBg,\n            border: `1px solid ${theme.colors.borderColor}`,\n            borderRadius: radius.md,\n          }}\n        >\n          {receiver ? (\n            <WalletRow\n              address={receiver}\n              client={client}\n              iconSize=\"md\"\n              textSize=\"sm\"\n            />\n          ) : (\n            <>\n              <OutlineWalletIcon size={iconSize.md} />\n              <Text\n                color=\"secondaryText\"\n                size=\"sm\"\n                style={{\n                  flex: 1,\n                }}\n              >\n                No Wallet Connected\n              </Text>\n            </>\n          )}\n        </Container>\n      </Container>\n\n      <Spacer y=\"lg\" />\n\n      {/* Continue Button */}\n      {receiver ? (\n        <Button\n          disabled={!isValidAmount}\n          fullWidth\n          onClick={() => {\n            if (isValidAmount) {\n              onContinue(\n                amount,\n                uiOptions.destinationToken,\n                getAddress(receiver),\n              );\n            }\n          }}\n          style={{\n            fontSize: fontSize.md,\n            padding: `${spacing.sm} ${spacing.md}`,\n          }}\n          variant=\"primary\"\n        >\n          Buy {amount} {uiOptions.destinationToken.symbol}\n        </Button>\n      ) : (\n        <ConnectButton\n          client={client}\n          connectButton={{\n            label: `Buy ${amount} ${uiOptions.destinationToken.symbol}`,\n          }}\n          theme={theme}\n          {...connectOptions}\n        />\n      )}\n\n      <Spacer y=\"md\" />\n\n      <PoweredByThirdweb />\n      <Spacer y=\"lg\" />\n    </WithHeader>\n  );\n}\n", "\"use client\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useMemo } from \"react\";\nimport { trackPayEvent } from \"../../../../../analytics/track/pay.js\";\nimport { defineChain } from \"../../../../../chains/utils.js\";\nimport type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport { useCustomTheme } from \"../../../../core/design-system/CustomThemeProvider.js\";\nimport { radius, spacing } from \"../../../../core/design-system/index.js\";\nimport { useChainsQuery } from \"../../../../core/hooks/others/useChainQuery.js\";\nimport type { BridgePrepareResult } from \"../../../../core/hooks/useBridgePrepare.js\";\nimport type { PaymentMethod } from \"../../../../core/machines/paymentMachine.js\";\nimport {\n  formatCurrencyAmount,\n  formatTokenAmount,\n} from \"../../ConnectWallet/screens/formatTokenBalance.js\";\nimport { Container, ModalHeader } from \"../../components/basic.js\";\nimport { Button } from \"../../components/buttons.js\";\nimport { Spacer } from \"../../components/Spacer.js\";\nimport { Text } from \"../../components/text.js\";\nimport type { UIOptions } from \"../BridgeOrchestrator.js\";\nimport { PaymentOverview } from \"./PaymentOverview.js\";\n\nexport interface PaymentDetailsProps {\n  /**\n   * The UI mode to use\n   */\n  uiOptions: UIOptions;\n  /**\n   * The client to use\n   */\n  client: ThirdwebClient;\n  /**\n   * The payment method to use\n   */\n  paymentMethod: PaymentMethod;\n  /**\n   * The prepared quote to preview\n   */\n  preparedQuote: BridgePrepareResult;\n\n  /**\n   * Called when user confirms the route\n   */\n  onConfirm: () => void;\n\n  /**\n   * Called when user wants to go back\n   */\n  onBack: () => void;\n\n  /**\n   * Called when an error occurs\n   */\n  onError: (error: Error) => void;\n}\n\nexport function PaymentDetails({\n  uiOptions,\n  client,\n  paymentMethod,\n  preparedQuote,\n  onConfirm,\n  onBack,\n  onError,\n}: PaymentDetailsProps) {\n  const theme = useCustomTheme();\n\n  const handleConfirm = () => {\n    try {\n      onConfirm();\n    } catch (error) {\n      onError(error as Error);\n    }\n  };\n\n  useQuery({\n    queryFn: () => {\n      if (\n        preparedQuote.type === \"buy\" ||\n        preparedQuote.type === \"sell\" ||\n        preparedQuote.type === \"transfer\"\n      ) {\n        trackPayEvent({\n          chainId:\n            preparedQuote.type === \"transfer\"\n              ? preparedQuote.intent.chainId\n              : preparedQuote.intent.originChainId,\n          client,\n          event: \"payment_details\",\n          fromToken:\n            preparedQuote.type === \"transfer\"\n              ? preparedQuote.intent.tokenAddress\n              : preparedQuote.intent.originTokenAddress,\n          toChainId:\n            preparedQuote.type === \"transfer\"\n              ? preparedQuote.intent.chainId\n              : preparedQuote.intent.destinationChainId,\n          toToken:\n            preparedQuote.type === \"transfer\"\n              ? preparedQuote.intent.tokenAddress\n              : preparedQuote.intent.destinationTokenAddress,\n        });\n      }\n    },\n    queryKey: [\"payment_details\", preparedQuote.type],\n  });\n\n  const chainsQuery = useChainsQuery(\n    preparedQuote.steps.flatMap((s) => [\n      defineChain(s.originToken.chainId),\n      defineChain(s.destinationToken.chainId),\n    ]),\n    10,\n  );\n  const chainsMetadata = useMemo(\n    () => chainsQuery.map((c) => c.data),\n    [chainsQuery],\n  ).filter((c) => !!c);\n\n  // Extract common data based on quote type\n  const getDisplayData = () => {\n    switch (preparedQuote.type) {\n      case \"transfer\": {\n        const token =\n          paymentMethod.type === \"wallet\"\n            ? paymentMethod.originToken\n            : undefined;\n        if (!token) {\n          // can never happen\n          onError(new Error(\"Invalid payment method\"));\n          return {\n            destinationAmount: \"0\",\n            destinationToken: undefined,\n            estimatedTime: 0,\n            originAmount: \"0\",\n            originToken: undefined,\n          };\n        }\n        return {\n          destinationAmount: formatTokenAmount(\n            preparedQuote.destinationAmount,\n            token.decimals,\n          ),\n          destinationToken: token,\n          estimatedTime: preparedQuote.estimatedExecutionTimeMs,\n          originAmount: formatTokenAmount(\n            preparedQuote.originAmount,\n            token.decimals,\n          ),\n          originToken: token,\n        };\n      }\n      case \"buy\": {\n        const method =\n          paymentMethod.type === \"wallet\" ? paymentMethod : undefined;\n        if (!method) {\n          // can never happen\n          onError(new Error(\"Invalid payment method\"));\n          return {\n            destinationAmount: \"0\",\n            destinationToken: undefined,\n            estimatedTime: 0,\n            originAmount: \"0\",\n            originToken: undefined,\n          };\n        }\n        return {\n          destinationAmount: formatTokenAmount(\n            preparedQuote.destinationAmount,\n            preparedQuote.steps[preparedQuote.steps.length - 1]\n              ?.destinationToken?.decimals ?? 18,\n          ),\n          destinationToken:\n            preparedQuote.steps[preparedQuote.steps.length - 1]\n              ?.destinationToken,\n          estimatedTime: preparedQuote.estimatedExecutionTimeMs,\n          originAmount: formatTokenAmount(\n            preparedQuote.originAmount,\n            method.originToken.decimals,\n          ),\n          originToken:\n            paymentMethod.type === \"wallet\"\n              ? paymentMethod.originToken\n              : undefined,\n        };\n      }\n      case \"onramp\": {\n        const method =\n          paymentMethod.type === \"fiat\" ? paymentMethod : undefined;\n        if (!method) {\n          // can never happen\n          onError(new Error(\"Invalid payment method\"));\n          return {\n            destinationAmount: \"0\",\n            destinationToken: undefined,\n            estimatedTime: 0,\n            originAmount: \"0\",\n            originToken: undefined,\n          };\n        }\n        return {\n          destinationAmount: formatTokenAmount(\n            preparedQuote.destinationAmount,\n            preparedQuote.destinationToken.decimals,\n          ), // Onramp starts with fiat\n          destinationToken: preparedQuote.destinationToken,\n          estimatedTime: undefined,\n          originAmount: formatCurrencyAmount(\n            method.currency,\n            Number(preparedQuote.currencyAmount),\n          ),\n          originToken: undefined,\n        };\n      }\n      default: {\n        throw new Error(\n          `Unsupported bridge prepare type: ${preparedQuote.type}`,\n        );\n      }\n    }\n  };\n\n  const displayData = getDisplayData();\n\n  return (\n    <Container flex=\"column\" fullHeight p=\"lg\">\n      <ModalHeader onBack={onBack} title=\"Payment Details\" />\n\n      <Spacer y=\"xl\" />\n\n      <Container flex=\"column\">\n        {/* Quote Summary */}\n        <Container flex=\"column\">\n          {displayData.destinationToken && (\n            <PaymentOverview\n              client={client}\n              fromAmount={displayData.originAmount}\n              paymentMethod={paymentMethod}\n              receiver={preparedQuote.intent.receiver}\n              sender={\n                preparedQuote.intent.sender ||\n                paymentMethod.payerWallet.getAccount()?.address\n              }\n              toAmount={displayData.destinationAmount}\n              toToken={displayData.destinationToken}\n              uiOptions={uiOptions}\n            />\n          )}\n\n          <Spacer y=\"md\" />\n          <Container flex=\"row\" gap=\"sm\">\n            <Container\n              flex=\"row\"\n              gap=\"xs\"\n              style={{ flex: 1, justifyContent: \"center\" }}\n            >\n              <Text color=\"secondaryText\" size=\"sm\">\n                Estimated Time\n              </Text>\n              <Text color=\"primaryText\" size=\"sm\">\n                {displayData.estimatedTime\n                  ? `~${Math.ceil(displayData.estimatedTime / 60000)} min`\n                  : \"~2 min\"}\n              </Text>\n            </Container>\n\n            {preparedQuote.steps.length > 1 ? (\n              <Container\n                flex=\"row\"\n                gap=\"xs\"\n                style={{ flex: 1, justifyContent: \"center\" }}\n              >\n                <Text color=\"secondaryText\" size=\"sm\">\n                  Route Length\n                </Text>\n                <Text color=\"primaryText\" size=\"sm\">\n                  {preparedQuote.steps.length} step\n                  {preparedQuote.steps.length !== 1 ? \"s\" : \"\"}\n                </Text>\n              </Container>\n            ) : null}\n          </Container>\n        </Container>\n\n        {/* Route Steps */}\n        {preparedQuote.steps.length > 1 && (\n          <Container flex=\"column\">\n            <Spacer y=\"sm\" />\n\n            <Container\n              flex=\"column\"\n              gap=\"sm\"\n              style={{\n                backgroundColor: theme.colors.tertiaryBg,\n                border: `1px solid ${theme.colors.borderColor}`,\n                borderRadius: radius.md,\n                padding: `${spacing.sm} ${spacing.md}`,\n              }}\n            >\n              {preparedQuote.steps.map((step, stepIndex) => (\n                <Container\n                  flex=\"column\"\n                  gap=\"sm\"\n                  key={`step-${stepIndex}-${step.originToken.address}-${step.destinationToken.address}`}\n                >\n                  {/* Step Header */}\n                  <Container\n                    flex=\"row\"\n                    gap=\"md\"\n                    style={{ alignItems: \"center\" }}\n                  >\n                    <Container\n                      center=\"both\"\n                      flex=\"row\"\n                      style={{\n                        backgroundColor: theme.colors.accentButtonBg,\n                        borderRadius: \"50%\",\n                        color: theme.colors.accentButtonText,\n                        flexShrink: 0,\n                        fontSize: \"12px\",\n                        fontWeight: \"bold\",\n                        height: \"24px\",\n                        width: \"24px\",\n                      }}\n                    >\n                      <Text color=\"accentButtonText\" size=\"xs\">\n                        {stepIndex + 1}\n                      </Text>\n                    </Container>\n\n                    <Container\n                      center=\"y\"\n                      flex=\"row\"\n                      gap=\"sm\"\n                      style={{ flex: 1 }}\n                    >\n                      <Container flex=\"column\" gap=\"3xs\" style={{ flex: 1 }}>\n                        <Text color=\"primaryText\" size=\"sm\">\n                          {step.destinationToken.chainId !==\n                          step.originToken.chainId ? (\n                            <>\n                              Bridge{\" \"}\n                              {step.originToken.symbol ===\n                              step.destinationToken.symbol\n                                ? step.originToken.symbol\n                                : `${step.originToken.symbol} to ${step.destinationToken.symbol}`}\n                            </>\n                          ) : (\n                            <>\n                              Swap {step.originToken.symbol} to{\" \"}\n                              {step.destinationToken.symbol}\n                            </>\n                          )}\n                        </Text>\n                        <Text color=\"secondaryText\" size=\"xs\">\n                          {step.originToken.chainId !==\n                          step.destinationToken.chainId ? (\n                            <>\n                              {\n                                chainsMetadata.find(\n                                  (c) => c.chainId === step.originToken.chainId,\n                                )?.name\n                              }{\" \"}\n                              to{\" \"}\n                              {\n                                chainsMetadata.find(\n                                  (c) =>\n                                    c.chainId === step.destinationToken.chainId,\n                                )?.name\n                              }\n                            </>\n                          ) : (\n                            chainsMetadata.find(\n                              (c) => c.chainId === step.originToken.chainId,\n                            )?.name\n                          )}\n                        </Text>\n                      </Container>\n                    </Container>\n                  </Container>\n                </Container>\n              ))}\n            </Container>\n          </Container>\n        )}\n\n        <Spacer y=\"lg\" />\n\n        {/* Action Buttons */}\n        <Container flex=\"column\" gap=\"sm\">\n          <Button fullWidth onClick={handleConfirm} variant=\"accent\">\n            Confirm Payment\n          </Button>\n        </Container>\n      </Container>\n    </Container>\n  );\n}\n", "import type { Abi } from \"abitype\";\n\n/**\n * @contract\n */\nexport type CompilerMetadata = {\n  name: string;\n  abi: Abi;\n  // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later by updating this type to match the specs here: https://docs.soliditylang.org/en/latest/metadata.html\n  metadata: Record<string, any> & {\n    sources: Record<string, { content: string } | { urls: string[] }>;\n    output: {\n      abi: Abi;\n      devdoc?: Record<string, Record<string, { details: string }>>;\n      userdoc?: Record<string, Record<string, { notice: string }>>;\n    };\n  };\n  info: {\n    title?: string;\n    author?: string;\n    details?: string;\n    notice?: string;\n  };\n  licenses: string[];\n  isPartialAbi?: boolean;\n  zk_version?: string;\n};\n\n/**\n * Formats the compiler metadata into a standardized format.\n * @param metadata - The compiler metadata to be formatted.\n * @returns The formatted metadata.\n * @internal\n */\nexport function formatCompilerMetadata(\n  // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later\n  metadata: any,\n): CompilerMetadata {\n  let meta = metadata;\n  if (\"source_metadata\" in metadata) {\n    meta = metadata.source_metadata;\n  }\n  const compilationTarget = meta.settings.compilationTarget;\n  const targets = Object.keys(compilationTarget);\n  const name = compilationTarget[targets[0] as keyof typeof compilationTarget];\n  const info = {\n    author: meta.output.devdoc.author,\n    details: meta.output.devdoc.detail,\n    notice: meta.output.userdoc.notice,\n    title: meta.output.devdoc.title,\n  };\n  const licenses: string[] = [\n    ...new Set(\n      // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later\n      Object.entries(meta.sources).map(([, src]) => (src as any).license),\n    ),\n  ];\n  return {\n    abi: meta?.output?.abi || [],\n    info,\n    isPartialAbi: meta.isPartialAbi,\n    licenses,\n    metadata: meta,\n    name,\n    zk_version: metadata.zk_version,\n  };\n}\n", "import type { ThirdwebContract } from \"../contract.js\";\nimport { formatCompilerMetadata } from \"./compiler-metadata.js\";\n\n/**\n * Down the compiled metadata from thirdweb contract api and format it\n * @param metadata The (json) data returned from https://contract.thirdweb.com/metadata/<chainId>/<contractAddress>\n *\n * @example\n * ```ts\n * import { getCompilerMetadata, getContract } from \"thirdweb/contracts\";\n *\n * const contract = getContract({\n *   address: \"0x...\",\n *   chain: ethereum,\n *   client: \"\",\n * });\n * const metadata = await getCompilerMetadata(contract);\n * ```\n * @returns The compiler metadata for the contract\n * @contract\n */\nexport async function getCompilerMetadata(contract: ThirdwebContract) {\n  const { address, chain } = contract;\n  const response = await fetch(\n    `https://contract.thirdweb.com/metadata/${chain.id}/${address}`,\n    {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      method: \"GET\",\n    },\n  );\n  if (!response.ok) {\n    const errorMsg = await response.json();\n    throw new Error(\n      errorMsg.message || errorMsg.error || \"Failed to get compiler metadata\",\n    );\n  }\n  const data = await response.json();\n  return formatCompilerMetadata(data);\n}\n", "import { useQuery } from \"@tanstack/react-query\";\nimport type { AbiFunction } from \"abitype\";\nimport { toFunctionSelector } from \"viem\";\nimport type { Token } from \"../../../bridge/index.js\";\nimport type { ThirdwebClient } from \"../../../client/client.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../constants/addresses.js\";\nimport type { CompilerMetadata } from \"../../../contract/actions/compiler-metadata.js\";\nimport { getCompilerMetadata } from \"../../../contract/actions/get-compiler-metadata.js\";\nimport { getContract } from \"../../../contract/contract.js\";\nimport { decimals } from \"../../../extensions/erc20/read/decimals.js\";\nimport { getToken } from \"../../../pay/convert/get-token.js\";\nimport { encode } from \"../../../transaction/actions/encode.js\";\nimport type { PreparedTransaction } from \"../../../transaction/prepare-transaction.js\";\nimport { getTransactionGasCost } from \"../../../transaction/utils.js\";\nimport { resolvePromisedValue } from \"../../../utils/promise/resolve-promised-value.js\";\nimport { toTokens } from \"../../../utils/units.js\";\nimport type { Wallet } from \"../../../wallets/interfaces/wallet.js\";\nimport { hasSponsoredTransactionsEnabled } from \"../../../wallets/smart/is-smart-wallet.js\";\nimport {\n  formatCurrencyAmount,\n  formatTokenAmount,\n} from \"../../web/ui/ConnectWallet/screens/formatTokenBalance.js\";\nimport { useChainMetadata } from \"./others/useChainQuery.js\";\n\ninterface TransactionDetails {\n  contractMetadata: CompilerMetadata | null;\n  functionInfo: {\n    functionName: string;\n    selector: string;\n    description?: string;\n  };\n  usdValueDisplay: string | null;\n  txCostDisplay: string;\n  gasCostDisplay: string | null;\n  tokenInfo: Token | null;\n  costWei: bigint;\n  gasCostWei: bigint | null;\n  totalCost: string;\n  totalCostWei: bigint;\n}\n\ninterface UseTransactionDetailsOptions {\n  transaction: PreparedTransaction;\n  client: ThirdwebClient;\n  wallet: Wallet | undefined;\n}\n\n/**\n * Hook to fetch comprehensive transaction details including contract metadata,\n * function information, cost calculations, and gas estimates.\n */\nexport function useTransactionDetails({\n  transaction,\n  client,\n  wallet,\n}: UseTransactionDetailsOptions) {\n  const chainMetadata = useChainMetadata(transaction.chain);\n  const hasSponsoredTransactions = hasSponsoredTransactionsEnabled(wallet);\n\n  return useQuery({\n    enabled: !!transaction.to && !!chainMetadata.data,\n    queryFn: async (): Promise<TransactionDetails> => {\n      // Create contract instance for metadata fetching\n      const contract = getContract({\n        address: transaction.to as string,\n        chain: transaction.chain,\n        client,\n      });\n\n      const [contractMetadata, value, erc20Value, transactionData] =\n        await Promise.all([\n          getCompilerMetadata(contract).catch(() => null),\n          resolvePromisedValue(transaction.value),\n          resolvePromisedValue(transaction.erc20Value),\n          encode(transaction).catch(() => \"0x\"),\n        ]);\n\n      const [tokenInfo, gasCostWei] = await Promise.all([\n        getToken(\n          client,\n          erc20Value ? erc20Value.tokenAddress : NATIVE_TOKEN_ADDRESS,\n          transaction.chain.id,\n        ).catch(() => null),\n        hasSponsoredTransactions\n          ? 0n\n          : getTransactionGasCost(transaction).catch(() => null),\n      ]);\n\n      // Process function info from ABI if available\n      let functionInfo = {\n        description: undefined,\n        functionName: \"Contract Call\",\n        selector: \"0x\",\n      };\n\n      if (contractMetadata?.abi && transactionData.length >= 10) {\n        try {\n          const selector = transactionData.slice(0, 10) as `0x${string}`;\n          const abi = contractMetadata.abi;\n\n          // Find matching function in ABI\n          const abiItems = Array.isArray(abi) ? abi : [];\n          const functions = abiItems\n            .filter(\n              (item) =>\n                item &&\n                typeof item === \"object\" &&\n                \"type\" in item &&\n                (item as { type: string }).type === \"function\",\n            )\n            .map((item) => item as AbiFunction);\n\n          const matchingFunction = functions.find((fn) => {\n            return toFunctionSelector(fn) === selector;\n          });\n\n          if (matchingFunction) {\n            functionInfo = {\n              description: undefined,\n              functionName: matchingFunction.name,\n              selector, // Skip devdoc for now\n            };\n          }\n        } catch {\n          // Keep default values\n        }\n      }\n\n      const resolveDecimals = async () => {\n        if (tokenInfo) {\n          return tokenInfo.decimals;\n        }\n        if (erc20Value) {\n          return decimals({\n            contract: getContract({\n              address: erc20Value.tokenAddress,\n              chain: transaction.chain,\n              client,\n            }),\n          });\n        }\n        return 18;\n      };\n\n      const decimal = await resolveDecimals();\n      const costWei = erc20Value ? erc20Value.amountWei : value || 0n;\n      const nativeTokenSymbol =\n        chainMetadata.data?.nativeCurrency?.symbol || \"ETH\";\n      const tokenSymbol = tokenInfo?.symbol || nativeTokenSymbol;\n\n      const totalCostWei = erc20Value\n        ? erc20Value.amountWei\n        : (value || 0n) + (gasCostWei || 0n);\n      const totalCost = toTokens(totalCostWei, decimal);\n\n      const usdValue = tokenInfo?.priceUsd\n        ? Number(totalCost) * tokenInfo.priceUsd\n        : null;\n\n      return {\n        contractMetadata,\n        costWei,\n        functionInfo,\n        gasCostDisplay: gasCostWei\n          ? `${formatTokenAmount(gasCostWei, 18)} ${nativeTokenSymbol}`\n          : null,\n        gasCostWei,\n        tokenInfo,\n        totalCost,\n        totalCostWei,\n        txCostDisplay: `${formatTokenAmount(costWei, decimal)} ${tokenSymbol}`,\n        usdValueDisplay: usdValue\n          ? formatCurrencyAmount(\"USD\", usdValue)\n          : null,\n      };\n    },\n    queryKey: [\n      \"transaction-details\",\n      transaction.to,\n      transaction.chain.id,\n      transaction.erc20Value?.toString(),\n      hasSponsoredTransactions,\n    ],\n  });\n}\n", "import styled from \"@emotion/styled\";\nimport type { Token } from \"../../../../../bridge/index.js\";\nimport { getCachedChain } from \"../../../../../chains/utils.js\";\nimport type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport { useCustomTheme } from \"../../../../core/design-system/CustomThemeProvider.js\";\nimport { spacing } from \"../../../../core/design-system/index.js\";\nimport { FiatValue } from \"../../ConnectWallet/screens/Buy/swap/FiatValue.js\";\nimport { Container } from \"../../components/basic.js\";\nimport { Button } from \"../../components/buttons.js\";\nimport { Text } from \"../../components/text.js\";\nimport { TokenAndChain } from \"./TokenAndChain.js\";\n\nexport function TokenBalanceRow({\n  client,\n  token,\n  amount,\n  onClick,\n  style,\n}: {\n  client: ThirdwebClient;\n  token: Token;\n  amount: string;\n  onClick: (token: Token) => void;\n  style?: React.CSSProperties;\n}) {\n  const chain = getCachedChain(token.chainId);\n  return (\n    <StyledButton\n      onClick={() => onClick(token)}\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        padding: `${spacing.sm} ${spacing.md}`,\n        ...style,\n      }}\n      variant=\"secondary\"\n    >\n      <TokenAndChain\n        client={client}\n        size=\"lg\"\n        style={{ flex: 1, maxWidth: \"50%\" }}\n        token={token}\n      />\n\n      <Container\n        center=\"y\"\n        color=\"secondaryText\"\n        flex=\"row\"\n        gap=\"4xs\"\n        style={{\n          flex: \"1\",\n          flexWrap: \"nowrap\",\n          justifyContent: \"flex-end\",\n          maxWidth: \"50%\",\n          minWidth: 0,\n        }}\n      >\n        <Container\n          color=\"secondaryText\"\n          flex=\"column\"\n          gap=\"3xs\"\n          style={{\n            alignItems: \"flex-end\",\n            minWidth: 0,\n            overflow: \"hidden\",\n          }}\n        >\n          <FiatValue\n            chain={chain}\n            client={client}\n            color=\"primaryText\"\n            size=\"sm\"\n            token={token}\n            tokenAmount={amount}\n          />\n          <Text\n            color=\"secondaryText\"\n            size=\"xs\"\n            style={{\n              overflow: \"hidden\",\n              textOverflow: \"ellipsis\",\n              whiteSpace: \"nowrap\",\n            }}\n          >\n            {`${Number(amount).toLocaleString(undefined, {\n              maximumFractionDigits: 6,\n              minimumFractionDigits: 0,\n            })} ${token.symbol}`}\n          </Text>\n        </Container>\n      </Container>\n    </StyledButton>\n  );\n}\n\nconst StyledButton = /* @__PURE__ */ styled(Button)((props) => {\n  const theme = useCustomTheme();\n  return {\n    \"&:hover\": {\n      background: theme.colors.secondaryButtonBg,\n    },\n    background: \"transparent\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    gap: spacing.sm,\n    justifyContent: \"space-between\",\n    padding: spacing.sm,\n    paddingRight: spacing.xs,\n    transition: \"background 200ms ease, transform 150ms ease\",\n    ...props.style,\n  };\n});\n", "import type { Token } from \"../../../../../bridge/index.js\";\nimport { defineChain } from \"../../../../../chains/utils.js\";\nimport type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport { useCustomTheme } from \"../../../../core/design-system/CustomThemeProvider.js\";\nimport { radius, spacing } from \"../../../../core/design-system/index.js\";\nimport { useTransactionDetails } from \"../../../../core/hooks/useTransactionDetails.js\";\nimport type { PaymentMethod } from \"../../../../core/machines/paymentMachine.js\";\nimport { getFiatCurrencyIcon } from \"../../ConnectWallet/screens/Buy/fiat/currencies.js\";\nimport { FiatValue } from \"../../ConnectWallet/screens/Buy/swap/FiatValue.js\";\nimport { StepConnectorArrow } from \"../../ConnectWallet/screens/Buy/swap/StepConnector.js\";\nimport { WalletRow } from \"../../ConnectWallet/screens/Buy/swap/WalletRow.js\";\nimport { Container } from \"../../components/basic.js\";\nimport { Text } from \"../../components/text.js\";\nimport type { UIOptions } from \"../BridgeOrchestrator.js\";\nimport { TokenBalanceRow } from \"../common/TokenBalanceRow.js\";\n\nexport function PaymentOverview(props: {\n  uiOptions: UIOptions;\n  receiver: string;\n  sender?: string;\n  client: ThirdwebClient;\n  paymentMethod: PaymentMethod;\n  toToken: Token;\n  fromAmount: string;\n  toAmount: string;\n}) {\n  const theme = useCustomTheme();\n  const sender =\n    props.sender ||\n    (props.paymentMethod.type === \"wallet\"\n      ? props.paymentMethod.payerWallet.getAccount()?.address\n      : undefined);\n  const isDifferentRecipient =\n    props.receiver.toLowerCase() !== sender?.toLowerCase();\n  return (\n    <Container>\n      {/* Sell */}\n      <Container\n        bg=\"tertiaryBg\"\n        flex=\"column\"\n        style={{\n          border: `1px solid ${theme.colors.borderColor}`,\n          borderRadius: radius.lg,\n        }}\n      >\n        {sender && (\n          <Container\n            flex=\"row\"\n            gap=\"sm\"\n            px=\"md\"\n            py=\"sm\"\n            style={{\n              borderBottom: `1px solid ${theme.colors.borderColor}`,\n            }}\n          >\n            <WalletRow\n              address={sender}\n              client={props.client}\n              iconSize=\"md\"\n              textSize=\"sm\"\n            />\n          </Container>\n        )}\n        {props.paymentMethod.type === \"wallet\" && (\n          <TokenBalanceRow\n            amount={props.fromAmount}\n            client={props.client}\n            onClick={() => {}}\n            style={{\n              background: \"transparent\",\n              border: \"none\",\n              borderRadius: 0,\n            }}\n            token={props.paymentMethod.originToken}\n          />\n        )}\n        {props.paymentMethod.type === \"fiat\" && (\n          <Container\n            center=\"y\"\n            flex=\"row\"\n            gap=\"sm\"\n            px=\"md\"\n            py=\"sm\"\n            style={{ justifyContent: \"space-between\" }}\n          >\n            <Container center=\"y\" flex=\"row\" gap=\"sm\">\n              {getFiatCurrencyIcon({\n                currency: props.paymentMethod.currency,\n                size: \"lg\",\n              })}\n              <Container center=\"y\" flex=\"column\" gap=\"3xs\">\n                <Text color=\"primaryText\" size=\"sm\" style={{ fontWeight: 600 }}>\n                  {props.paymentMethod.currency}\n                </Text>\n                <Text color=\"secondaryText\" size=\"xs\">\n                  {props.paymentMethod.onramp.charAt(0).toUpperCase() +\n                    props.paymentMethod.onramp.slice(1)}\n                </Text>\n              </Container>\n            </Container>\n            <Text color=\"primaryText\" size=\"sm\" style={{ fontWeight: 600 }}>\n              {props.fromAmount}\n            </Text>\n          </Container>\n        )}\n      </Container>\n      {/* Connector Icon */}\n      <StepConnectorArrow />\n      {/* Buy */}\n      <Container\n        bg=\"tertiaryBg\"\n        flex=\"column\"\n        style={{\n          border: `1px solid ${theme.colors.borderColor}`,\n          borderRadius: radius.lg,\n        }}\n      >\n        {isDifferentRecipient && (\n          <Container\n            flex=\"row\"\n            gap=\"sm\"\n            px=\"md\"\n            py=\"sm\"\n            style={{\n              borderBottom: `1px solid ${theme.colors.borderColor}`,\n            }}\n          >\n            <WalletRow\n              address={props.receiver}\n              client={props.client}\n              iconSize=\"md\"\n              textSize=\"sm\"\n            />\n          </Container>\n        )}\n        {props.uiOptions.mode === \"direct_payment\" && (\n          <Container\n            center=\"y\"\n            flex=\"row\"\n            gap=\"sm\"\n            p=\"md\"\n            style={{ justifyContent: \"space-between\" }}\n          >\n            <Container center=\"y\" flex=\"column\" gap=\"3xs\" style={{ flex: 1 }}>\n              <Text color=\"primaryText\" size=\"sm\" style={{ fontWeight: 600 }}>\n                {props.uiOptions.metadata?.title || \"Payment\"}\n              </Text>\n              {props.uiOptions.metadata?.description && (\n                <Text color=\"secondaryText\" size=\"xs\">\n                  {props.uiOptions.metadata.description}\n                </Text>\n              )}\n            </Container>\n            <Container\n              center=\"y\"\n              flex=\"column\"\n              gap=\"3xs\"\n              style={{ alignItems: \"flex-end\" }}\n            >\n              <FiatValue\n                chain={defineChain(props.toToken.chainId)}\n                client={props.client}\n                color=\"primaryText\"\n                size=\"sm\"\n                token={props.toToken}\n                tokenAmount={props.uiOptions.paymentInfo.amount}\n                weight={600}\n              />\n              <Text color=\"secondaryText\" size=\"xs\">\n                {props.uiOptions.paymentInfo.amount} {props.toToken.symbol}\n              </Text>\n            </Container>\n          </Container>\n        )}\n        {props.uiOptions.mode === \"fund_wallet\" && (\n          <TokenBalanceRow\n            amount={props.toAmount}\n            client={props.client}\n            onClick={() => {}}\n            style={{\n              background: \"transparent\",\n              border: \"none\",\n              borderRadius: 0,\n            }}\n            token={props.toToken}\n          />\n        )}\n        {props.uiOptions.mode === \"transaction\" && (\n          <TransactionOverViewCompact\n            client={props.client}\n            paymentMethod={props.paymentMethod}\n            uiOptions={props.uiOptions}\n          />\n        )}\n      </Container>\n    </Container>\n  );\n}\n\nconst TransactionOverViewCompact = (props: {\n  uiOptions: Extract<UIOptions, { mode: \"transaction\" }>;\n  paymentMethod: PaymentMethod;\n  client: ThirdwebClient;\n}) => {\n  const theme = useCustomTheme();\n  const txInfo = useTransactionDetails({\n    client: props.client,\n    transaction: props.uiOptions.transaction,\n    wallet: props.paymentMethod.payerWallet,\n  });\n\n  if (!txInfo.data) {\n    // Skeleton loading state\n    return (\n      <Container\n        center=\"y\"\n        flex=\"row\"\n        gap=\"sm\"\n        p=\"md\"\n        style={{ justifyContent: \"space-between\" }}\n      >\n        <Container center=\"y\" flex=\"column\" gap=\"3xs\" style={{ flex: 1 }}>\n          {/* Title skeleton */}\n          <div\n            style={{\n              backgroundColor: theme.colors.skeletonBg,\n              borderRadius: spacing.xs,\n              height: \"16px\",\n              width: \"120px\",\n            }}\n          />\n          {/* Description skeleton - only if metadata exists */}\n          {props.uiOptions.metadata?.description && (\n            <div\n              style={{\n                backgroundColor: theme.colors.skeletonBg,\n                borderRadius: spacing.xs,\n                height: \"12px\",\n                width: \"80px\",\n              }}\n            />\n          )}\n        </Container>\n        <Container\n          center=\"y\"\n          flex=\"column\"\n          gap=\"3xs\"\n          style={{ alignItems: \"flex-end\" }}\n        >\n          {/* Function name skeleton */}\n          <div\n            style={{\n              backgroundColor: theme.colors.skeletonBg,\n              borderRadius: spacing.sm,\n              height: \"24px\",\n              width: \"100px\",\n            }}\n          />\n        </Container>\n      </Container>\n    );\n  }\n\n  return (\n    <Container\n      center=\"y\"\n      flex=\"row\"\n      gap=\"sm\"\n      p=\"md\"\n      style={{ justifyContent: \"space-between\" }}\n    >\n      <Container center=\"y\" flex=\"column\" gap=\"3xs\" style={{ flex: 1 }}>\n        <Text color=\"primaryText\" size=\"sm\" style={{ fontWeight: 600 }}>\n          {props.uiOptions.metadata?.title || \"Transaction\"}\n        </Text>\n        {props.uiOptions.metadata?.description && (\n          <Text color=\"secondaryText\" size=\"xs\">\n            {props.uiOptions.metadata.description}\n          </Text>\n        )}\n      </Container>\n      <Container\n        center=\"y\"\n        flex=\"column\"\n        gap=\"3xs\"\n        style={{ alignItems: \"flex-end\" }}\n      >\n        <Text\n          color=\"secondaryText\"\n          size=\"xs\"\n          style={{\n            backgroundColor: theme.colors.secondaryButtonBg,\n            borderRadius: spacing.sm,\n            fontFamily: \"monospace\",\n            padding: `${spacing.xs} ${spacing.sm}`,\n            textAlign: \"right\",\n          }}\n        >\n          {txInfo.data.functionInfo.functionName}\n        </Text>\n      </Container>\n    </Container>\n  );\n};\n", "\"use client\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useEffect, useState } from \"react\";\nimport { trackPayEvent } from \"../../../../../analytics/track/pay.js\";\nimport type { Token } from \"../../../../../bridge/types/Token.js\";\nimport { defineChain } from \"../../../../../chains/utils.js\";\nimport type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport type { Address } from \"../../../../../utils/address.js\";\nimport { toUnits } from \"../../../../../utils/units.js\";\nimport type { Wallet } from \"../../../../../wallets/interfaces/wallet.js\";\nimport { usePaymentMethods } from \"../../../../core/hooks/usePaymentMethods.js\";\nimport { useActiveWallet } from \"../../../../core/hooks/wallets/useActiveWallet.js\";\nimport { useConnectedWallets } from \"../../../../core/hooks/wallets/useConnectedWallets.js\";\nimport type { PaymentMethod } from \"../../../../core/machines/paymentMachine.js\";\nimport type { ConnectLocale } from \"../../ConnectWallet/locale/types.js\";\nimport { WalletSwitcherConnectionScreen } from \"../../ConnectWallet/screens/WalletSwitcherConnectionScreen.js\";\nimport { Container, ModalHeader } from \"../../components/basic.js\";\nimport { Spacer } from \"../../components/Spacer.js\";\nimport type { PayEmbedConnectOptions } from \"../../PayEmbed.js\";\nimport { FiatProviderSelection } from \"./FiatProviderSelection.js\";\nimport { TokenSelection } from \"./TokenSelection.js\";\nimport { WalletFiatSelection } from \"./WalletFiatSelection.js\";\n\nexport interface PaymentSelectionProps {\n  /**\n   * The destination token to bridge to\n   */\n  destinationToken: Token;\n\n  /**\n   * The destination amount to bridge\n   */\n  destinationAmount: string;\n\n  /**\n   * The receiver address\n   */\n  receiverAddress?: Address;\n\n  /**\n   * ThirdwebClient for API calls\n   */\n  client: ThirdwebClient;\n\n  /**\n   * Called when user selects a payment method\n   */\n  onPaymentMethodSelected: (paymentMethod: PaymentMethod) => void;\n\n  /**\n   * Called when an error occurs\n   */\n  onError: (error: Error) => void;\n\n  /**\n   * Called when user wants to go back\n   */\n  onBack?: () => void;\n\n  /**\n   * Connect options for wallet connection\n   */\n  connectOptions?: PayEmbedConnectOptions;\n\n  /**\n   * Locale for connect UI\n   */\n  connectLocale: ConnectLocale;\n\n  /**\n   * Whether to include the destination token in the payment methods\n   */\n  includeDestinationToken?: boolean;\n\n  /**\n   * Allowed payment methods\n   * @default [\"crypto\", \"card\"]\n   */\n  paymentMethods?: (\"crypto\" | \"card\")[];\n}\n\ntype Step =\n  | { type: \"walletSelection\" }\n  | { type: \"tokenSelection\"; selectedWallet: Wallet }\n  | { type: \"fiatProviderSelection\" }\n  | { type: \"walletConnection\" };\n\nexport function PaymentSelection({\n  destinationToken,\n  client,\n  destinationAmount,\n  receiverAddress,\n  onPaymentMethodSelected,\n  onError,\n  onBack,\n  connectOptions,\n  connectLocale,\n  includeDestinationToken,\n  paymentMethods = [\"crypto\", \"card\"],\n}: PaymentSelectionProps) {\n  const connectedWallets = useConnectedWallets();\n  const activeWallet = useActiveWallet();\n\n  const [currentStep, setCurrentStep] = useState<Step>({\n    type: \"walletSelection\",\n  });\n\n  useQuery({\n    queryFn: () => {\n      trackPayEvent({\n        client,\n        event: \"payment_selection\",\n        toChainId: destinationToken.chainId,\n        toToken: destinationToken.address,\n      });\n    },\n    queryKey: [\"payment_selection\"],\n  });\n\n  const payerWallet =\n    currentStep.type === \"tokenSelection\"\n      ? currentStep.selectedWallet\n      : activeWallet;\n  const {\n    data: suitableTokenPaymentMethods,\n    isLoading: paymentMethodsLoading,\n    error: paymentMethodsError,\n  } = usePaymentMethods({\n    client,\n    destinationAmount,\n    destinationToken,\n    includeDestinationToken:\n      includeDestinationToken ||\n      receiverAddress?.toLowerCase() !==\n        payerWallet?.getAccount()?.address?.toLowerCase(),\n    payerWallet,\n  });\n\n  // Handle error from usePaymentMethods\n  useEffect(() => {\n    if (paymentMethodsError) {\n      onError(paymentMethodsError as Error);\n    }\n  }, [paymentMethodsError, onError]);\n\n  const handlePaymentMethodSelected = (paymentMethod: PaymentMethod) => {\n    try {\n      onPaymentMethodSelected(paymentMethod);\n    } catch (error) {\n      onError(error as Error);\n    }\n  };\n\n  const handleWalletSelected = (wallet: Wallet) => {\n    setCurrentStep({ selectedWallet: wallet, type: \"tokenSelection\" });\n  };\n\n  const handleConnectWallet = async () => {\n    setCurrentStep({ type: \"walletConnection\" });\n  };\n\n  const handleFiatSelected = () => {\n    setCurrentStep({ type: \"fiatProviderSelection\" });\n  };\n\n  const handleBackToWalletSelection = () => {\n    setCurrentStep({ type: \"walletSelection\" });\n  };\n\n  const handleOnrampProviderSelected = (\n    provider: \"coinbase\" | \"stripe\" | \"transak\",\n  ) => {\n    if (!payerWallet) {\n      onError(new Error(\"No wallet available for fiat payment\"));\n      return;\n    }\n\n    const fiatPaymentMethod: PaymentMethod = {\n      currency: \"USD\",\n      onramp: provider,\n      payerWallet, // Default to USD for now\n      type: \"fiat\",\n    };\n    handlePaymentMethodSelected(fiatPaymentMethod);\n  };\n\n  const getStepTitle = () => {\n    switch (currentStep.type) {\n      case \"walletSelection\":\n        return \"Choose Payment Method\";\n      case \"tokenSelection\":\n        return \"Select Token\";\n      case \"fiatProviderSelection\":\n        return \"Select Payment Provider\";\n      case \"walletConnection\":\n        return \"Connect Wallet\";\n    }\n  };\n\n  const getBackHandler = () => {\n    switch (currentStep.type) {\n      case \"walletSelection\":\n        return onBack;\n      case \"tokenSelection\":\n      case \"fiatProviderSelection\":\n      case \"walletConnection\":\n        return handleBackToWalletSelection;\n    }\n  };\n\n  // Handle rendering WalletSwitcherConnectionScreen\n  if (currentStep.type === \"walletConnection\") {\n    const destinationChain = destinationToken\n      ? defineChain(destinationToken.chainId)\n      : undefined;\n    const chains = destinationChain\n      ? [destinationChain, ...(connectOptions?.chains || [])]\n      : connectOptions?.chains;\n\n    return (\n      <WalletSwitcherConnectionScreen\n        accountAbstraction={connectOptions?.accountAbstraction}\n        appMetadata={connectOptions?.appMetadata}\n        chain={destinationChain || connectOptions?.chain}\n        chains={chains}\n        client={client}\n        connectLocale={connectLocale}\n        hiddenWallets={[]}\n        isEmbed={false}\n        onBack={handleBackToWalletSelection}\n        onSelect={handleWalletSelected}\n        recommendedWallets={connectOptions?.recommendedWallets}\n        showAllWallets={\n          connectOptions?.showAllWallets === undefined\n            ? true\n            : connectOptions?.showAllWallets\n        }\n        walletConnect={connectOptions?.walletConnect}\n        wallets={connectOptions?.wallets?.filter((w) => w.id !== \"inApp\")}\n      />\n    );\n  }\n\n  return (\n    <Container flex=\"column\" p=\"lg\">\n      <ModalHeader onBack={getBackHandler()} title={getStepTitle()} />\n\n      <Spacer y=\"xl\" />\n\n      <Container flex=\"column\">\n        {currentStep.type === \"walletSelection\" && (\n          <WalletFiatSelection\n            client={client}\n            connectedWallets={connectedWallets}\n            onConnectWallet={handleConnectWallet}\n            onFiatSelected={handleFiatSelected}\n            onWalletSelected={handleWalletSelected}\n            paymentMethods={paymentMethods}\n          />\n        )}\n\n        {currentStep.type === \"tokenSelection\" && (\n          <TokenSelection\n            client={client}\n            destinationAmount={toUnits(\n              destinationAmount,\n              destinationToken.decimals,\n            )}\n            destinationToken={destinationToken}\n            onBack={handleBackToWalletSelection}\n            onPaymentMethodSelected={handlePaymentMethodSelected}\n            paymentMethods={suitableTokenPaymentMethods}\n            paymentMethodsLoading={paymentMethodsLoading}\n          />\n        )}\n\n        {currentStep.type === \"fiatProviderSelection\" && (\n          <FiatProviderSelection\n            client={client}\n            onProviderSelected={handleOnrampProviderSelected}\n            toAddress={receiverAddress || \"\"}\n            toAmount={destinationAmount}\n            toChainId={destinationToken.chainId}\n            toTokenAddress={destinationToken.address}\n          />\n        )}\n      </Container>\n    </Container>\n  );\n}\n", "import { useQuery } from \"@tanstack/react-query\";\nimport { routes } from \"../../../bridge/Routes.js\";\nimport type { Token } from \"../../../bridge/types/Token.js\";\nimport { getCachedChain } from \"../../../chains/utils.js\";\nimport type { ThirdwebClient } from \"../../../client/client.js\";\nimport { isInsightEnabled } from \"../../../insight/common.js\";\nimport { getOwnedTokens } from \"../../../insight/get-tokens.js\";\nimport { toTokens } from \"../../../utils/units.js\";\nimport type { Wallet } from \"../../../wallets/interfaces/wallet.js\";\nimport type { PaymentMethod } from \"../machines/paymentMachine.js\";\nimport { useActiveWallet } from \"./wallets/useActiveWallet.js\";\n\ntype OwnedTokenWithQuote = {\n  originToken: Token;\n  balance: bigint;\n  originAmount: bigint;\n};\n\n/**\n * Hook that returns available payment methods for BridgeEmbed\n * Fetches real routes data based on the destination token\n *\n * @param options - Configuration options\n * @param options.destinationToken - The destination token to find routes for\n * @param options.client - ThirdwebClient for API calls\n * @returns Available payment methods with route data\n *\n * @example\n * ```tsx\n * const { data: paymentMethods, isLoading, error } = usePaymentMethods({\n *   destinationToken,\n *   client\n * });\n * ```\n */\nexport function usePaymentMethods(options: {\n  destinationToken: Token;\n  destinationAmount: string;\n  client: ThirdwebClient;\n  payerWallet?: Wallet;\n  includeDestinationToken?: boolean;\n}) {\n  const {\n    destinationToken,\n    destinationAmount,\n    client,\n    payerWallet,\n    includeDestinationToken,\n  } = options;\n  const localWallet = useActiveWallet(); // TODO (bridge): get all connected wallets\n  const wallet = payerWallet || localWallet;\n\n  const routesQuery = useQuery({\n    enabled: !!wallet,\n    queryFn: async (): Promise<PaymentMethod[]> => {\n      if (!wallet) {\n        throw new Error(\"No wallet connected\");\n      }\n      const allRoutes = await routes({\n        client,\n        destinationChainId: destinationToken.chainId,\n        destinationTokenAddress: destinationToken.address,\n        includePrices: true,\n        limit: 100,\n        maxSteps: 3,\n        sortBy: \"popularity\", // Get top 100 most popular routes\n      });\n\n      const allOriginTokens = includeDestinationToken\n        ? [destinationToken, ...allRoutes.map((route) => route.originToken)]\n        : allRoutes.map((route) => route.originToken);\n\n      // 1. Resolve all unique chains in the supported token map\n      const uniqueChains = Array.from(\n        new Set(allOriginTokens.map((t) => t.chainId)),\n      );\n\n      // 2. Check insight availability once per chain\n      const insightSupport = await Promise.all(\n        uniqueChains.map(async (c) => ({\n          chain: getCachedChain(c),\n          enabled: await isInsightEnabled(getCachedChain(c)),\n        })),\n      );\n      const insightEnabledChains = insightSupport.filter((c) => c.enabled);\n\n      // 3. ERC-20 balances for insight-enabled chains (batched 5 chains / call)\n      let owned: OwnedTokenWithQuote[] = [];\n      let page = 0;\n      const limit = 100;\n\n      while (true) {\n        const batch = await getOwnedTokens({\n          chains: insightEnabledChains.map((c) => c.chain),\n          client,\n          ownerAddress: wallet.getAccount()?.address || \"\",\n          queryOptions: {\n            limit,\n            metadata: \"false\",\n            page,\n          },\n        });\n\n        if (batch.length === 0) {\n          break;\n        }\n\n        // find matching origin token in allRoutes\n        const tokensWithBalance = batch\n          .map((b) => ({\n            balance: b.value,\n            originAmount: 0n,\n            originToken: allOriginTokens.find(\n              (t) =>\n                t.address.toLowerCase() === b.tokenAddress.toLowerCase() &&\n                t.chainId === b.chainId,\n            ),\n          }))\n          .filter((t) => !!t.originToken) as OwnedTokenWithQuote[];\n\n        owned = [...owned, ...tokensWithBalance];\n        page += 1;\n      }\n\n      const requiredDollarAmount =\n        Number.parseFloat(destinationAmount) * destinationToken.priceUsd;\n\n      // sort by dollar balance descending\n      owned.sort((a, b) => {\n        const aDollarBalance =\n          Number.parseFloat(toTokens(a.balance, a.originToken.decimals)) *\n          a.originToken.priceUsd;\n        const bDollarBalance =\n          Number.parseFloat(toTokens(b.balance, b.originToken.decimals)) *\n          b.originToken.priceUsd;\n        return bDollarBalance - aDollarBalance;\n      });\n\n      const suitableOriginTokens: OwnedTokenWithQuote[] = [];\n\n      for (const b of owned) {\n        if (b.originToken && b.balance > 0n) {\n          const dollarBalance =\n            Number.parseFloat(toTokens(b.balance, b.originToken.decimals)) *\n            b.originToken.priceUsd;\n          if (b.originToken.priceUsd && dollarBalance < requiredDollarAmount) {\n            continue;\n          }\n\n          if (\n            includeDestinationToken &&\n            b.originToken.address.toLowerCase() ===\n              destinationToken.address.toLowerCase() &&\n            b.originToken.chainId === destinationToken.chainId\n          ) {\n            // add same token to the front of the list\n            suitableOriginTokens.unshift({\n              balance: b.balance,\n              originAmount: 0n,\n              originToken: b.originToken,\n            });\n            continue;\n          }\n\n          suitableOriginTokens.push({\n            balance: b.balance,\n            originAmount: 0n,\n            originToken: b.originToken,\n          });\n        }\n      }\n\n      const transformedRoutes = [\n        ...suitableOriginTokens.map((s) => ({\n          balance: s.balance,\n          originToken: s.originToken,\n          payerWallet: wallet,\n          type: \"wallet\" as const,\n        })),\n      ];\n      return transformedRoutes;\n    },\n    queryKey: [\n      \"bridge-routes\",\n      destinationToken.chainId,\n      destinationToken.address,\n      destinationAmount,\n      payerWallet?.getAccount()?.address,\n      includeDestinationToken,\n    ], // 5 minutes\n    refetchOnWindowFocus: false,\n    staleTime: 5 * 60 * 1000,\n  });\n\n  return {\n    data: routesQuery.data || [],\n    error: routesQuery.error,\n    isError: routesQuery.isError,\n    isLoading: routesQuery.isLoading,\n    isSuccess: routesQuery.isSuccess,\n    refetch: routesQuery.refetch,\n  };\n}\n", "\"use client\";\nimport { useMemo } from \"react\";\nimport type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport { checksumAddress } from \"../../../../../utils/address.js\";\nimport { toTokens } from \"../../../../../utils/units.js\";\nimport { useCustomTheme } from \"../../../../core/design-system/CustomThemeProvider.js\";\nimport {\n  iconSize,\n  radius,\n  spacing,\n} from \"../../../../core/design-system/index.js\";\nimport { useBuyWithFiatQuotesForProviders } from \"../../../../core/hooks/pay/useBuyWithFiatQuotesForProviders.js\";\nimport { Container } from \"../../components/basic.js\";\nimport { Button } from \"../../components/buttons.js\";\nimport { Img } from \"../../components/Img.js\";\nimport { Spacer } from \"../../components/Spacer.js\";\nimport { Spinner } from \"../../components/Spinner.js\";\nimport { Text } from \"../../components/text.js\";\n\ninterface FiatProviderSelectionProps {\n  client: ThirdwebClient;\n  onProviderSelected: (provider: \"coinbase\" | \"stripe\" | \"transak\") => void;\n  toChainId: number;\n  toTokenAddress: string;\n  toAddress: string;\n  toAmount?: string;\n}\n\nconst PROVIDERS = [\n  {\n    description: \"Fast and secure payments\",\n    iconUri: \"https://i.ibb.co/LDJ3Rk2t/Frame-5.png\",\n    id: \"coinbase\" as const,\n    name: \"Coinbase\",\n  },\n  {\n    description: \"Trusted payment processing\",\n    iconUri: \"https://i.ibb.co/CpgQC2Lf/images-3.png\",\n    id: \"stripe\" as const,\n    name: \"Stripe\",\n  },\n  {\n    description: \"Global payment solution\",\n    iconUri: \"https://i.ibb.co/Xx2r882p/Transak-official-symbol-1.png\",\n    id: \"transak\" as const,\n    name: \"Transak\",\n  },\n];\n\nexport function FiatProviderSelection({\n  onProviderSelected,\n  client,\n  toChainId,\n  toTokenAddress,\n  toAddress,\n  toAmount,\n}: FiatProviderSelectionProps) {\n  const theme = useCustomTheme();\n\n  // Fetch quotes for all providers\n  const quoteQueries = useBuyWithFiatQuotesForProviders({\n    amount: toAmount || \"0\",\n    chainId: toChainId,\n    client,\n    currency: \"USD\",\n    receiver: checksumAddress(toAddress),\n    tokenAddress: checksumAddress(toTokenAddress),\n  });\n\n  const quotes = useMemo(() => {\n    return quoteQueries.map((q) => q.data).filter((q) => !!q);\n  }, [quoteQueries]);\n\n  if (quoteQueries.every((q) => q.isError)) {\n    return (\n      <Container center=\"both\" flex=\"column\" style={{ minHeight: \"120px\" }}>\n        <Text color=\"secondaryText\" size=\"sm\">\n          No quotes available\n        </Text>\n      </Container>\n    );\n  }\n\n  // TODO: add a \"remember my choice\" checkbox\n\n  return (\n    <>\n      <Container flex=\"column\" gap=\"sm\">\n        {quotes.length > 0 ? (\n          quotes\n            .sort((a, b) => a.currencyAmount - b.currencyAmount)\n            .map((quote, index) => {\n              const provider = PROVIDERS.find(\n                (p) => p.id === quote.intent.onramp,\n              );\n              if (!provider) {\n                return null;\n              }\n\n              return (\n                <Container\n                  animate=\"fadein\"\n                  key={provider.id}\n                  style={{\n                    animationDelay: `${index * 100}ms`,\n                  }}\n                >\n                  <Button\n                    fullWidth\n                    onClick={() => onProviderSelected(provider.id)}\n                    style={{\n                      backgroundColor: theme.colors.tertiaryBg,\n                      border: `1px solid ${theme.colors.borderColor}`,\n                      borderRadius: radius.md,\n                      padding: `${spacing.sm} ${spacing.md}`,\n                      textAlign: \"left\",\n                    }}\n                    variant=\"secondary\"\n                  >\n                    <Container\n                      flex=\"row\"\n                      gap=\"sm\"\n                      style={{ alignItems: \"center\", width: \"100%\" }}\n                    >\n                      <Container\n                        style={{\n                          alignItems: \"center\",\n                          borderRadius: \"50%\",\n                          display: \"flex\",\n                          height: `${iconSize.md}px`,\n                          justifyContent: \"center\",\n                          overflow: \"hidden\",\n                          padding: spacing.xs,\n                          width: `${iconSize.md}px`,\n                        }}\n                      >\n                        <Img\n                          alt={provider.name}\n                          client={client}\n                          height={iconSize.md}\n                          src={provider.iconUri}\n                          width={iconSize.md}\n                        />\n                      </Container>\n                      <Container flex=\"column\" gap=\"3xs\" style={{ flex: 1 }}>\n                        <Text\n                          color=\"primaryText\"\n                          size=\"md\"\n                          style={{ fontWeight: 600 }}\n                        >\n                          {provider.name}\n                        </Text>\n                      </Container>\n                      <Container\n                        flex=\"column\"\n                        gap=\"3xs\"\n                        style={{ alignItems: \"flex-end\" }}\n                      >\n                        <Text\n                          color=\"primaryText\"\n                          size=\"sm\"\n                          style={{ fontWeight: 500 }}\n                        >\n                          $\n                          {quote.currencyAmount.toLocaleString(undefined, {\n                            maximumFractionDigits: 2,\n                            minimumFractionDigits: 2,\n                          })}{\" \"}\n                          {quote.currency}\n                        </Text>\n                        <Text color=\"secondaryText\" size=\"xs\">\n                          {toTokens(\n                            quote.destinationAmount,\n                            quote.destinationToken.decimals,\n                          )}{\" \"}\n                          {quote.destinationToken.symbol}\n                        </Text>\n                      </Container>\n                    </Container>\n                  </Button>\n                </Container>\n              );\n            })\n        ) : (\n          <Container center=\"both\" flex=\"column\" style={{ minHeight: \"120px\" }}>\n            <Spinner color=\"secondaryText\" size=\"lg\" />\n            <Spacer y=\"sm\" />\n            <Text center color=\"secondaryText\" size=\"sm\">\n              Generating quotes...\n            </Text>\n          </Container>\n        )}\n      </Container>\n    </>\n  );\n}\n", "import { type UseQueryOptions, useQueries } from \"@tanstack/react-query\";\nimport { prepare as prepareOnramp } from \"../../../../bridge/Onramp.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport { getToken } from \"../../../../pay/convert/get-token.js\";\nimport type { Address } from \"../../../../utils/address.js\";\nimport { toUnits } from \"../../../../utils/units.js\";\n\n/**\n * @internal\n */\ntype UseBuyWithFiatQuotesForProvidersParams = {\n  /**\n   * A client is the entry point to the thirdweb SDK.\n   */\n  client: ThirdwebClient;\n  /**\n   * The destination chain ID.\n   */\n  chainId: number;\n  /**\n   * The destination token address.\n   */\n  tokenAddress: Address;\n  /**\n   * The address that will receive the tokens.\n   */\n  receiver: Address;\n  /**\n   * The desired token amount in wei.\n   */\n  amount: string;\n  /**\n   * The fiat currency (e.g., \"USD\"). Defaults to \"USD\".\n   */\n  currency?: string;\n};\n\n/**\n * @internal\n */\ntype OnrampQuoteQueryOptions = Omit<\n  UseQueryOptions<Awaited<ReturnType<typeof prepareOnramp>>>,\n  \"queryFn\" | \"queryKey\" | \"enabled\"\n>;\n\n/**\n * @internal\n */\ntype UseBuyWithFiatQuotesForProvidersResult = {\n  data: Awaited<ReturnType<typeof prepareOnramp>> | undefined;\n  isLoading: boolean;\n  error: Error | null;\n  isError: boolean;\n  isSuccess: boolean;\n}[];\n\n/**\n * @internal\n * Hook to get prepared onramp quotes from Coinbase, Stripe, and Transak providers.\n */\nexport function useBuyWithFiatQuotesForProviders(\n  params?: UseBuyWithFiatQuotesForProvidersParams,\n  queryOptions?: OnrampQuoteQueryOptions,\n): UseBuyWithFiatQuotesForProvidersResult {\n  const providers = [\"coinbase\", \"stripe\", \"transak\"] as const;\n\n  const queries = useQueries({\n    queries: providers.map((provider) => ({\n      ...queryOptions,\n      enabled: !!params,\n      queryFn: async () => {\n        if (!params) {\n          throw new Error(\"No params provided\");\n        }\n\n        const token = await getToken(\n          params.client,\n          params.tokenAddress,\n          params.chainId,\n        );\n\n        const amountWei = toUnits(params.amount, token.decimals);\n\n        return prepareOnramp({\n          amount: amountWei,\n          chainId: params.chainId,\n          client: params.client,\n          currency: params.currency || \"USD\",\n          onramp: provider,\n          receiver: params.receiver,\n          tokenAddress: params.tokenAddress,\n        });\n      },\n      queryKey: [\"onramp-prepare\", provider, params],\n      retry: false,\n    })),\n  });\n\n  return queries;\n}\n", "\"use client\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport * as Buy from \"../../../bridge/Buy.js\";\nimport * as Transfer from \"../../../bridge/Transfer.js\";\nimport type { Token } from \"../../../bridge/types/Token.js\";\nimport type { ThirdwebClient } from \"../../../client/client.js\";\nimport { checksumAddress } from \"../../../utils/address.js\";\n\ninterface UseBridgeQuoteParams {\n  originToken: Token;\n  destinationToken: Token;\n  destinationAmount: bigint;\n  client: ThirdwebClient;\n  enabled?: boolean;\n}\n\nexport function useBridgeQuote({\n  originToken,\n  destinationToken,\n  destinationAmount,\n  client,\n  enabled = true,\n}: UseBridgeQuoteParams) {\n  return useQuery({\n    enabled:\n      enabled && !!originToken && !!destinationToken && !!destinationAmount,\n    queryFn: async () => {\n      // if ssame token and chain, use transfer\n      if (\n        checksumAddress(originToken.address) ===\n          checksumAddress(destinationToken.address) &&\n        originToken.chainId === destinationToken.chainId\n      ) {\n        const transfer = await Transfer.prepare({\n          amount: destinationAmount,\n          chainId: originToken.chainId,\n          client,\n          receiver: destinationToken.address,\n          sender: originToken.address,\n          tokenAddress: originToken.address,\n        });\n        return transfer;\n      }\n      const quote = await Buy.quote({\n        amount: destinationAmount,\n        client,\n        destinationChainId: destinationToken.chainId,\n        destinationTokenAddress: destinationToken.address,\n        originChainId: originToken.chainId,\n        originTokenAddress: originToken.address,\n      });\n\n      return quote;\n    },\n    queryKey: [\n      \"bridge-quote\",\n      originToken.chainId,\n      originToken.address,\n      destinationToken.chainId,\n      destinationToken.address,\n      destinationAmount.toString(),\n    ],\n    refetchInterval: 60000, // 30 seconds\n    retry: 3, // 1 minute\n    staleTime: 30000,\n  });\n}\n", "\"use client\";\nimport type { Token } from \"../../../../../bridge/types/Token.js\";\nimport type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport { useCustomTheme } from \"../../../../core/design-system/CustomThemeProvider.js\";\nimport { radius, spacing } from \"../../../../core/design-system/index.js\";\nimport { useBridgeQuote } from \"../../../../core/hooks/useBridgeQuote.js\";\nimport type { PaymentMethod } from \"../../../../core/machines/paymentMachine.js\";\nimport { formatTokenAmount } from \"../../ConnectWallet/screens/formatTokenBalance.js\";\nimport { Container } from \"../../components/basic.js\";\nimport { Button } from \"../../components/buttons.js\";\nimport { Skeleton } from \"../../components/Skeleton.js\";\nimport { Spacer } from \"../../components/Spacer.js\";\nimport { Text } from \"../../components/text.js\";\nimport { TokenAndChain } from \"../common/TokenAndChain.js\";\n\ninterface TokenSelectionProps {\n  paymentMethods: PaymentMethod[];\n  paymentMethodsLoading: boolean;\n  client: ThirdwebClient;\n  onPaymentMethodSelected: (paymentMethod: PaymentMethod) => void;\n  onBack: () => void;\n  destinationToken: Token;\n  destinationAmount: bigint;\n}\n\n// Individual payment method token row component\ninterface PaymentMethodTokenRowProps {\n  paymentMethod: PaymentMethod & { type: \"wallet\" };\n  destinationToken: Token;\n  destinationAmount: bigint;\n  client: ThirdwebClient;\n  onPaymentMethodSelected: (paymentMethod: PaymentMethod) => void;\n}\n\nfunction PaymentMethodTokenRow({\n  paymentMethod,\n  destinationToken,\n  destinationAmount,\n  client,\n  onPaymentMethodSelected,\n}: PaymentMethodTokenRowProps) {\n  const theme = useCustomTheme();\n\n  // Fetch individual quote for this specific token pair\n  const {\n    data: quote,\n    isLoading: quoteLoading,\n    error: quoteError,\n  } = useBridgeQuote({\n    client,\n    destinationAmount,\n    destinationToken,\n    originToken: paymentMethod.originToken,\n  });\n\n  // Use the fetched originAmount if available, otherwise fall back to the one from paymentMethod\n  const displayOriginAmount = quote?.originAmount;\n  const hasEnoughBalance = displayOriginAmount\n    ? paymentMethod.balance >= displayOriginAmount\n    : false;\n\n  return (\n    <Button\n      disabled={!hasEnoughBalance}\n      fullWidth\n      key={`${paymentMethod.originToken.address}-${paymentMethod.originToken.chainId}`}\n      onClick={() => onPaymentMethodSelected(paymentMethod)}\n      style={{\n        backgroundColor: theme.colors.tertiaryBg,\n        border: `1px solid ${theme.colors.borderColor}`,\n        borderRadius: radius.md,\n        opacity: hasEnoughBalance ? 1 : 0.5,\n        padding: `${spacing.sm} ${spacing.md}`,\n        textAlign: \"left\",\n      }}\n      variant=\"secondary\"\n    >\n      <Container\n        flex=\"row\"\n        gap=\"md\"\n        style={{ alignItems: \"center\", width: \"100%\" }}\n      >\n        <TokenAndChain\n          client={client}\n          size=\"lg\"\n          style={{\n            maxWidth: \"50%\",\n          }}\n          token={paymentMethod.originToken}\n        />\n        <Container\n          flex=\"column\"\n          gap=\"3xs\"\n          style={{ alignItems: \"flex-end\", flex: 1 }}\n        >\n          {quoteLoading ? (\n            <>\n              {/* Price amount skeleton */}\n              <Skeleton height=\"16px\" width=\"80px\" />\n              {/* Balance skeleton */}\n              <Container flex=\"row\" gap=\"3xs\">\n                <Skeleton height=\"12px\" width=\"50px\" />\n                <Skeleton height=\"12px\" width=\"40px\" />\n              </Container>\n            </>\n          ) : quoteError ? (\n            <Text color=\"danger\" size=\"sm\" style={{ fontWeight: 600 }}>\n              Quote failed\n            </Text>\n          ) : displayOriginAmount ? (\n            <Text\n              color=\"primaryText\"\n              size=\"sm\"\n              style={{ fontWeight: 600, textWrap: \"nowrap\" }}\n            >\n              {formatTokenAmount(\n                displayOriginAmount,\n                paymentMethod.originToken.decimals,\n              )}{\" \"}\n              {paymentMethod.originToken.symbol}\n            </Text>\n          ) : (\n            \"--.--\"\n          )}\n          {!quoteLoading && (\n            <Container flex=\"row\" gap=\"3xs\">\n              <Text color=\"secondaryText\" size=\"xs\">\n                Balance:{\" \"}\n              </Text>\n              <Text\n                color={\n                  !quoteLoading\n                    ? hasEnoughBalance\n                      ? \"success\"\n                      : \"danger\"\n                    : \"secondaryText\"\n                }\n                size=\"xs\"\n              >\n                {formatTokenAmount(\n                  paymentMethod.balance,\n                  paymentMethod.originToken.decimals,\n                )}\n              </Text>\n            </Container>\n          )}\n        </Container>\n      </Container>\n    </Button>\n  );\n}\n\nexport function TokenSelection({\n  paymentMethods,\n  paymentMethodsLoading,\n  client,\n  onPaymentMethodSelected,\n  onBack,\n  destinationToken,\n  destinationAmount,\n}: TokenSelectionProps) {\n  const theme = useCustomTheme();\n\n  if (paymentMethodsLoading) {\n    return (\n      <>\n        <Text color=\"primaryText\" size=\"md\">\n          Loading your tokens\n        </Text>\n        <Spacer y=\"sm\" />\n        <Container flex=\"column\" gap=\"sm\">\n          {/* Skeleton rows matching PaymentMethodTokenRow structure */}\n          {[1, 2, 3].map((i) => (\n            <Container\n              key={i}\n              style={{\n                backgroundColor: theme.colors.tertiaryBg,\n                border: `1px solid ${theme.colors.borderColor}`,\n                borderRadius: radius.md,\n                padding: `${spacing.sm} ${spacing.md}`,\n              }}\n            >\n              <Container\n                flex=\"row\"\n                gap=\"md\"\n                style={{ alignItems: \"center\", width: \"100%\" }}\n              >\n                {/* Left side: Token icon and name skeleton */}\n                <Container\n                  center=\"y\"\n                  flex=\"row\"\n                  gap=\"sm\"\n                  style={{ maxWidth: \"50%\" }}\n                >\n                  {/* Token icon skeleton */}\n                  <div\n                    style={{\n                      backgroundColor: theme.colors.skeletonBg,\n                      borderRadius: \"50%\",\n                      height: \"32px\",\n                      width: \"32px\",\n                    }}\n                  />\n                  <Container flex=\"column\" gap=\"3xs\">\n                    {/* Token name skeleton */}\n                    <Skeleton height=\"14px\" width=\"60px\" />\n                    {/* Chain name skeleton */}\n                    <Skeleton height=\"12px\" width=\"40px\" />\n                  </Container>\n                </Container>\n\n                {/* Right side: Price and balance skeleton */}\n                <Container\n                  flex=\"column\"\n                  gap=\"3xs\"\n                  style={{ alignItems: \"flex-end\", flex: 1 }}\n                >\n                  {/* Price amount skeleton */}\n                  <Skeleton height=\"16px\" width=\"80px\" />\n                  {/* Balance skeleton */}\n                  <Container flex=\"row\" gap=\"3xs\">\n                    <Skeleton height=\"12px\" width=\"50px\" />\n                    <Skeleton height=\"12px\" width=\"40px\" />\n                  </Container>\n                </Container>\n              </Container>\n            </Container>\n          ))}\n        </Container>\n      </>\n    );\n  }\n\n  if (paymentMethods.length === 0) {\n    return (\n      <Container center=\"both\" flex=\"column\" style={{ minHeight: \"250px\" }}>\n        <Text center color=\"primaryText\" size=\"md\">\n          No available tokens found for this wallet\n        </Text>\n        <Spacer y=\"sm\" />\n        <Text center color=\"secondaryText\" size=\"sm\">\n          Try connecting a different wallet or pay with card\n        </Text>\n        <Spacer y=\"lg\" />\n        <Button onClick={onBack} variant=\"primary\">\n          Select another payment method\n        </Button>\n      </Container>\n    );\n  }\n\n  return (\n    <>\n      <Text color=\"primaryText\" size=\"md\">\n        Select payment token\n      </Text>\n      <Spacer y=\"sm\" />\n      <Container\n        flex=\"column\"\n        gap=\"sm\"\n        style={{\n          maxHeight: \"400px\",\n          overflowY: \"auto\",\n          scrollbarWidth: \"none\",\n        }}\n      >\n        {paymentMethods\n          .filter((method) => method.type === \"wallet\")\n          .map((method) => (\n            <PaymentMethodTokenRow\n              client={client}\n              destinationAmount={destinationAmount}\n              destinationToken={destinationToken}\n              key={`${method.originToken.address}-${method.originToken.chainId}`}\n              onPaymentMethodSelected={onPaymentMethodSelected}\n              paymentMethod={method}\n            />\n          ))}\n      </Container>\n    </>\n  );\n}\n", "import type { IconFC } from \"./types.js\";\n\n/**\n * @internal\n */\nexport const CreditCardIcon: IconFC = (props) => {\n  return (\n    <svg\n      fill=\"none\"\n      height={props.size}\n      role=\"presentation\"\n      stroke={props.color ?? \"currentColor\"}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"1\"\n      viewBox=\"0 0 24 24\"\n      width={props.size}\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <rect height=\"14\" rx=\"2\" width=\"20\" x=\"2\" y=\"5\" />\n      <line x1=\"2\" x2=\"22\" y1=\"10\" y2=\"10\" />\n    </svg>\n  );\n};\n", "\"use client\";\nimport { ChevronRightIcon, PlusIcon } from \"@radix-ui/react-icons\";\nimport type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport type { Wallet } from \"../../../../../wallets/interfaces/wallet.js\";\nimport { useCustomTheme } from \"../../../../core/design-system/CustomThemeProvider.js\";\nimport {\n  iconSize,\n  radius,\n  spacing,\n} from \"../../../../core/design-system/index.js\";\nimport { CreditCardIcon } from \"../../ConnectWallet/icons/CreditCardIcon.js\";\nimport { WalletRow } from \"../../ConnectWallet/screens/Buy/swap/WalletRow.js\";\nimport { Container } from \"../../components/basic.js\";\nimport { Button } from \"../../components/buttons.js\";\nimport { Spacer } from \"../../components/Spacer.js\";\nimport { Text } from \"../../components/text.js\";\n\ninterface WalletFiatSelectionProps {\n  connectedWallets: Wallet[];\n  client: ThirdwebClient;\n  onWalletSelected: (wallet: Wallet) => void;\n  onFiatSelected: () => void;\n  onConnectWallet: () => void;\n  paymentMethods?: (\"crypto\" | \"card\")[];\n}\n\nexport function WalletFiatSelection({\n  connectedWallets,\n  client,\n  onWalletSelected,\n  onFiatSelected,\n  onConnectWallet,\n  paymentMethods = [\"crypto\", \"card\"],\n}: WalletFiatSelectionProps) {\n  const theme = useCustomTheme();\n\n  return (\n    <>\n      {paymentMethods.includes(\"crypto\") && (\n        <>\n          <Text color=\"primaryText\" size=\"md\">\n            Pay with Crypto\n          </Text>\n          <Spacer y=\"md\" />\n          {/* Connected Wallets */}\n          {connectedWallets.length > 0 && (\n            <>\n              <Container flex=\"column\" gap=\"sm\">\n                {connectedWallets.map((wallet) => {\n                  const account = wallet.getAccount();\n                  if (!account?.address) {\n                    return null;\n                  }\n                  return (\n                    <Button\n                      fullWidth\n                      key={wallet.id}\n                      onClick={() => onWalletSelected(wallet)}\n                      style={{\n                        backgroundColor: theme.colors.tertiaryBg,\n                        border: `1px solid ${theme.colors.borderColor}`,\n                        borderRadius: radius.md,\n                        justifyContent: \"space-between\",\n                        padding: `${spacing.sm} ${spacing.md}`,\n                      }}\n                      variant=\"secondary\"\n                    >\n                      <WalletRow\n                        address={account?.address}\n                        client={client}\n                        iconSize=\"lg\"\n                        textSize=\"sm\"\n                      />\n                      <ChevronRightIcon\n                        style={{ height: iconSize.md, width: iconSize.md }}\n                      />\n                    </Button>\n                  );\n                })}\n              </Container>\n              <Spacer y=\"sm\" />\n            </>\n          )}\n\n          {/* Connect Another Wallet */}\n          <Button\n            fullWidth\n            onClick={onConnectWallet}\n            style={{\n              backgroundColor: theme.colors.tertiaryBg,\n              border: `1px solid ${theme.colors.borderColor}`,\n              borderRadius: radius.md,\n              height: \"auto\",\n              padding: `${spacing.sm} ${spacing.md}`,\n              textAlign: \"left\",\n            }}\n            variant=\"secondary\"\n          >\n            <Container\n              flex=\"row\"\n              gap=\"md\"\n              style={{ alignItems: \"center\", width: \"100%\" }}\n            >\n              <Container\n                style={{\n                  alignItems: \"center\",\n                  border: `1px dashed ${theme.colors.secondaryIconColor}`,\n                  borderRadius: radius.sm,\n                  display: \"flex\",\n                  height: iconSize.lg,\n                  justifyContent: \"center\",\n                  padding: spacing[\"4xs\"],\n                  width: iconSize.lg,\n                }}\n              >\n                <PlusIcon\n                  color={theme.colors.secondaryText}\n                  height={iconSize.md}\n                  width={iconSize.md}\n                />\n              </Container>\n              <Container flex=\"column\" gap=\"3xs\" style={{ flex: 1 }}>\n                <Text color=\"primaryText\" size=\"sm\" style={{ fontWeight: 600 }}>\n                  Connect Another Wallet\n                </Text>\n                <Text color=\"secondaryText\" size=\"xs\">\n                  Use a different wallet to pay\n                </Text>\n              </Container>\n            </Container>\n          </Button>\n        </>\n      )}\n\n      {paymentMethods.includes(\"card\") && (\n        <>\n          <Spacer y=\"md\" />\n\n          <Text color=\"primaryText\" size=\"md\">\n            Pay with Card\n          </Text>\n\n          <Spacer y=\"md\" />\n\n          <Button\n            fullWidth\n            onClick={onFiatSelected}\n            style={{\n              backgroundColor: theme.colors.tertiaryBg,\n              border: `1px solid ${theme.colors.borderColor}`,\n              borderRadius: radius.md,\n              height: \"auto\",\n              padding: `${spacing.sm} ${spacing.md}`,\n              textAlign: \"left\",\n            }}\n            variant=\"secondary\"\n          >\n            <Container\n              flex=\"row\"\n              gap=\"md\"\n              style={{ alignItems: \"center\", width: \"100%\" }}\n            >\n              <CreditCardIcon\n                color={theme.colors.secondaryIconColor}\n                size={iconSize.lg}\n              />\n              <Container flex=\"column\" gap=\"3xs\" style={{ flex: 1 }}>\n                <Text color=\"primaryText\" size=\"sm\" style={{ fontWeight: 600 }}>\n                  Pay with Card\n                </Text>\n                <Text color=\"secondaryText\" size=\"xs\">\n                  Buy crypto and bridge in one step\n                </Text>\n              </Container>\n            </Container>\n          </Button>\n        </>\n      )}\n    </>\n  );\n}\n", "\"use client\";\nimport { CheckIcon } from \"@radix-ui/react-icons\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { trackPayEvent } from \"../../../../../analytics/track/pay.js\";\nimport type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport type { WindowAdapter } from \"../../../../core/adapters/WindowAdapter.js\";\nimport { useCustomTheme } from \"../../../../core/design-system/CustomThemeProvider.js\";\nimport { iconSize } from \"../../../../core/design-system/index.js\";\nimport type { BridgePrepareResult } from \"../../../../core/hooks/useBridgePrepare.js\";\nimport type { CompletedStatusResult } from \"../../../../core/hooks/useStepExecutor.js\";\nimport { Container, ModalHeader } from \"../../components/basic.js\";\nimport { Button } from \"../../components/buttons.js\";\nimport { Spacer } from \"../../components/Spacer.js\";\nimport { Text } from \"../../components/text.js\";\nimport type { UIOptions } from \"../BridgeOrchestrator.js\";\nimport { PaymentReceipt } from \"./PaymentReceipt.js\";\n\nexport interface SuccessScreenProps {\n  /**\n   * UI options\n   */\n  uiOptions: UIOptions;\n  /**\n   * Prepared quote from Bridge.prepare\n   */\n  preparedQuote: BridgePrepareResult;\n\n  /**\n   * Completed status results from step execution\n   */\n  completedStatuses: CompletedStatusResult[];\n\n  /**\n   * Called when user closes the success screen\n   */\n  onDone: () => void;\n\n  /**\n   * Window adapter for opening URLs\n   */\n  windowAdapter: WindowAdapter;\n\n  client: ThirdwebClient;\n}\n\ntype ViewState = \"success\" | \"detail\";\n\nexport function SuccessScreen({\n  uiOptions,\n  preparedQuote,\n  completedStatuses,\n  onDone,\n  windowAdapter,\n  client,\n}: SuccessScreenProps) {\n  const theme = useCustomTheme();\n  const [viewState, setViewState] = useState<ViewState>(\"success\");\n\n  useQuery({\n    queryFn: () => {\n      if (preparedQuote.type === \"buy\" || preparedQuote.type === \"sell\") {\n        trackPayEvent({\n          chainId: preparedQuote.intent.originChainId,\n          client: client,\n          event: \"ub:ui:success_screen\",\n          fromToken: preparedQuote.intent.originTokenAddress,\n          toChainId: preparedQuote.intent.destinationChainId,\n          toToken: preparedQuote.intent.destinationTokenAddress,\n        });\n      }\n    },\n    queryKey: [\"success_screen\", preparedQuote.type],\n  });\n\n  if (viewState === \"detail\") {\n    return (\n      <PaymentReceipt\n        completedStatuses={completedStatuses}\n        onBack={() => setViewState(\"success\")}\n        preparedQuote={preparedQuote}\n        windowAdapter={windowAdapter}\n      />\n    );\n  }\n\n  return (\n    <Container flex=\"column\" fullHeight p=\"lg\">\n      <ModalHeader title=\"Payment Complete\" />\n\n      <Spacer y=\"xl\" />\n\n      <Container center=\"x\" flex=\"column\" gap=\"md\">\n        {/* Success Icon with Animation */}\n        <Container\n          center=\"both\"\n          flex=\"row\"\n          style={{\n            animation: \"successBounce 0.6s ease-out\",\n            backgroundColor: theme.colors.tertiaryBg,\n            border: `2px solid ${theme.colors.success}`,\n            borderRadius: \"50%\",\n            height: \"64px\",\n            marginBottom: \"16px\",\n            width: \"64px\",\n          }}\n        >\n          <CheckIcon\n            color={theme.colors.success}\n            height={iconSize.xl}\n            style={{\n              animation: \"checkAppear 0.3s ease-out 0.3s both\",\n            }}\n            width={iconSize.xl}\n          />\n        </Container>\n\n        <Text center color=\"primaryText\" size=\"xl\">\n          Payment Successful!\n        </Text>\n\n        <Text center color=\"secondaryText\" size=\"sm\">\n          Your cross-chain payment has been completed successfully.\n        </Text>\n      </Container>\n      <Spacer y=\"lg\" />\n\n      {/* Action Buttons */}\n      <Container flex=\"column\" gap=\"sm\" style={{ width: \"100%\" }}>\n        <Button\n          fullWidth\n          onClick={() => setViewState(\"detail\")}\n          variant=\"secondary\"\n        >\n          View Payment Receipt\n        </Button>\n\n        <Button fullWidth onClick={onDone} variant=\"accent\">\n          {uiOptions.mode === \"transaction\" ? \"Continue\" : \"Done\"}\n        </Button>\n      </Container>\n\n      {/* CSS Animations */}\n      <style>\n        {`\n          @keyframes successBounce {\n            0% {\n              transform: scale(0.3);\n              opacity: 0;\n            }\n            50% {\n              transform: scale(1.05);\n            }\n            70% {\n              transform: scale(0.9);\n            }\n            100% {\n              transform: scale(1);\n              opacity: 1;\n            }\n          }\n\n          @keyframes checkAppear {\n            0% {\n              transform: scale(0);\n              opacity: 0;\n            }\n            100% {\n              transform: scale(1);\n              opacity: 1;\n            }\n          }\n        `}\n      </style>\n    </Container>\n  );\n}\n", "\"use client\";\nimport { CopyIcon } from \"@radix-ui/react-icons\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useCallback } from \"react\";\nimport type { Token } from \"../../../../../bridge/types/Token.js\";\nimport type { ChainMetadata } from \"../../../../../chains/types.js\";\nimport {\n  defineChain,\n  getCachedChain,\n  getChainMetadata,\n} from \"../../../../../chains/utils.js\";\nimport { shortenHex } from \"../../../../../utils/address.js\";\nimport { formatExplorerTxUrl } from \"../../../../../utils/url.js\";\nimport type { WindowAdapter } from \"../../../../core/adapters/WindowAdapter.js\";\nimport { useCustomTheme } from \"../../../../core/design-system/CustomThemeProvider.js\";\nimport {\n  iconSize,\n  radius,\n  spacing,\n} from \"../../../../core/design-system/index.js\";\nimport type { BridgePrepareResult } from \"../../../../core/hooks/useBridgePrepare.js\";\nimport type { CompletedStatusResult } from \"../../../../core/hooks/useStepExecutor.js\";\nimport { formatTokenAmount } from \"../../ConnectWallet/screens/formatTokenBalance.js\";\nimport { Container, ModalHeader } from \"../../components/basic.js\";\nimport { shorterChainName } from \"../../components/ChainName.js\";\nimport { Skeleton } from \"../../components/Skeleton.js\";\nimport { Spacer } from \"../../components/Spacer.js\";\nimport { Text } from \"../../components/text.js\";\n\ninterface TransactionInfo {\n  type: \"paymentId\" | \"transactionHash\";\n  id: string;\n  label: string;\n  chain: ChainMetadata;\n  destinationToken?: Token;\n  destinationChain?: ChainMetadata;\n  originToken?: Token;\n  originChain?: ChainMetadata;\n  amountPaid?: string;\n  amountReceived?: string;\n}\n\nfunction getPaymentId(\n  preparedQuote: BridgePrepareResult,\n  status: CompletedStatusResult,\n) {\n  if (preparedQuote.type === \"onramp\") {\n    return preparedQuote.id;\n  }\n  return status.transactions[status.transactions.length - 1]?.transactionHash;\n}\n\n/**\n * Hook to fetch transaction info for a completed status\n */\nfunction useTransactionInfo(\n  status: CompletedStatusResult,\n  preparedQuote: BridgePrepareResult,\n) {\n  return useQuery({\n    enabled: true,\n    queryFn: async (): Promise<TransactionInfo | null> => {\n      const isOnramp = status.type === \"onramp\";\n\n      if (isOnramp && preparedQuote.type === \"onramp\") {\n        // For onramp, create a display ID since OnrampStatus doesn't have paymentId\n        return {\n          amountPaid: `${preparedQuote.currencyAmount} ${preparedQuote.currency}`,\n          amountReceived: `${formatTokenAmount(\n            preparedQuote.destinationAmount,\n            preparedQuote.destinationToken.decimals,\n          )} ${preparedQuote.destinationToken.symbol}`,\n          chain: await getChainMetadata(\n            defineChain(preparedQuote.destinationToken.chainId),\n          ),\n          destinationToken: preparedQuote.destinationToken,\n          id: preparedQuote.id,\n          label: \"Onramp Payment\",\n          type: \"paymentId\" as const,\n        };\n      } else if (\n        status.type === \"buy\" ||\n        status.type === \"sell\" ||\n        status.type === \"transfer\"\n      ) {\n        if (status.transactions.length > 0) {\n          // get the last transaction hash\n          const tx = status.transactions[status.transactions.length - 1];\n          if (tx) {\n            const [destinationChain, originChain] = await Promise.all([\n              getChainMetadata(getCachedChain(status.destinationToken.chainId)),\n              getChainMetadata(getCachedChain(status.originToken.chainId)),\n            ]);\n            return {\n              amountPaid: `${formatTokenAmount(\n                status.originAmount,\n                status.originToken.decimals,\n              )} ${status.originToken.symbol}`,\n              amountReceived: `${formatTokenAmount(\n                status.destinationAmount,\n                status.destinationToken.decimals,\n              )} ${status.destinationToken.symbol}`,\n              chain: destinationChain,\n              destinationChain,\n              destinationToken: status.destinationToken,\n              id: tx.transactionHash,\n              label: \"Transaction\",\n              originChain,\n              originToken: status.originToken,\n              type: \"transactionHash\" as const,\n            };\n          }\n        }\n      }\n\n      return null;\n    },\n    queryKey: [\n      \"transaction-info\",\n      status.type,\n      getPaymentId(preparedQuote, status),\n    ],\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}\n\ninterface CompletedStepDetailCardProps {\n  status: CompletedStatusResult;\n  preparedQuote: BridgePrepareResult;\n  windowAdapter: WindowAdapter;\n  onCopyToClipboard: (text: string) => Promise<void>;\n}\n\n/**\n * Component to display details for a completed transaction step\n */\nfunction CompletedStepDetailCard({\n  status,\n  preparedQuote,\n  windowAdapter,\n  onCopyToClipboard,\n}: CompletedStepDetailCardProps) {\n  const theme = useCustomTheme();\n  const { data: txInfo, isLoading } = useTransactionInfo(status, preparedQuote);\n\n  if (isLoading) {\n    return (\n      <Container\n        flex=\"column\"\n        gap=\"sm\"\n        style={{\n          backgroundColor: theme.colors.tertiaryBg,\n          border: `1px solid ${theme.colors.borderColor}`,\n          borderRadius: radius.sm,\n          padding: spacing.md,\n        }}\n      >\n        <Skeleton height=\"30px\" />\n        <Skeleton height=\"30px\" />\n        <Skeleton height=\"30px\" />\n      </Container>\n    );\n  }\n\n  if (!txInfo) {\n    return null;\n  }\n\n  return (\n    <Container\n      flex=\"column\"\n      gap=\"sm\"\n      key={txInfo.id}\n      style={{\n        backgroundColor: theme.colors.tertiaryBg,\n        border: `1px solid ${theme.colors.borderColor}`,\n        borderRadius: radius.sm,\n        padding: spacing.md,\n      }}\n    >\n      {/* Status Badge */}\n      <Container\n        flex=\"row\"\n        gap=\"sm\"\n        style={{\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Text color=\"primaryText\" size=\"sm\">\n          {txInfo.label}\n        </Text>\n        <Container\n          style={{\n            backgroundColor: theme.colors.success,\n            borderRadius: radius.sm,\n            padding: `${spacing[\"3xs\"]} ${spacing.xs}`,\n          }}\n        >\n          <Text size=\"xs\" style={{ color: theme.colors.primaryButtonText }}>\n            COMPLETED\n          </Text>\n        </Container>\n      </Container>\n\n      {/* Amount Paid */}\n      {txInfo.amountPaid && (\n        <Container\n          center=\"y\"\n          flex=\"row\"\n          style={{ justifyContent: \"space-between\" }}\n        >\n          <Text color=\"secondaryText\" size=\"sm\">\n            Amount Paid\n          </Text>\n          <Text color=\"primaryText\" size=\"sm\">\n            {txInfo.amountPaid}\n          </Text>\n        </Container>\n      )}\n\n      {/* Origin Chain */}\n      {txInfo.originChain && (\n        <Container\n          center=\"y\"\n          flex=\"row\"\n          style={{ justifyContent: \"space-between\" }}\n        >\n          <Text color=\"secondaryText\" size=\"sm\">\n            Origin Chain\n          </Text>\n          <Text color=\"primaryText\" size=\"sm\">\n            {shorterChainName(txInfo.originChain.name)}\n          </Text>\n        </Container>\n      )}\n\n      {/* Amount Received */}\n      {txInfo.amountReceived && (\n        <Container\n          center=\"y\"\n          flex=\"row\"\n          style={{ justifyContent: \"space-between\" }}\n        >\n          <Text color=\"secondaryText\" size=\"sm\">\n            Amount Received\n          </Text>\n          <Text color=\"primaryText\" size=\"sm\">\n            {txInfo.amountReceived}\n          </Text>\n        </Container>\n      )}\n\n      {/* Chain */}\n      <Container\n        center=\"y\"\n        flex=\"row\"\n        style={{ justifyContent: \"space-between\" }}\n      >\n        <Text color=\"secondaryText\" size=\"sm\">\n          Chain\n        </Text>\n        <Text color=\"primaryText\" size=\"sm\">\n          {shorterChainName(txInfo.chain.name)}\n        </Text>\n      </Container>\n\n      {/* Transaction Info */}\n      <Container\n        center=\"y\"\n        flex=\"row\"\n        style={{ justifyContent: \"space-between\" }}\n      >\n        <Text color=\"secondaryText\" size=\"sm\">\n          {txInfo.type === \"paymentId\" ? \"Payment ID\" : \"Transaction Hash\"}\n        </Text>\n        <Container flex=\"row\" gap=\"sm\" style={{ alignItems: \"center\" }}>\n          <Text\n            color=\"accentText\"\n            onClick={\n              txInfo.type === \"paymentId\"\n                ? () => onCopyToClipboard(txInfo.id)\n                : () => {\n                    const explorer = txInfo.chain.explorers?.[0];\n                    if (explorer) {\n                      windowAdapter.open(\n                        formatExplorerTxUrl(explorer.url, txInfo.id),\n                      );\n                    }\n                  }\n            }\n            size=\"sm\"\n            style={{\n              cursor: \"pointer\",\n              fontFamily: \"monospace\",\n            }}\n          >\n            {shortenHex(txInfo.id)}\n          </Text>\n\n          {txInfo.type === \"paymentId\" ? (\n            <button\n              onClick={() => onCopyToClipboard(txInfo.id)}\n              style={{\n                background: \"none\",\n                border: \"none\",\n                cursor: \"pointer\",\n                padding: 0,\n              }}\n              type=\"button\"\n            >\n              <CopyIcon\n                color={theme.colors.primaryText}\n                height={iconSize.sm}\n                width={iconSize.sm}\n              />\n            </button>\n          ) : null}\n        </Container>\n      </Container>\n    </Container>\n  );\n}\n\ninterface PaymentReceitProps {\n  /**\n   * Prepared quote from Bridge.prepare\n   */\n  preparedQuote: BridgePrepareResult;\n\n  /**\n   * Completed status results from step execution\n   */\n  completedStatuses: CompletedStatusResult[];\n\n  /**\n   * Called when user goes back to success screen\n   */\n  onBack: () => void;\n\n  /**\n   * Window adapter for opening URLs\n   */\n  windowAdapter: WindowAdapter;\n}\n\nexport function PaymentReceipt({\n  preparedQuote,\n  completedStatuses,\n  onBack,\n  windowAdapter,\n}: PaymentReceitProps) {\n  // Copy to clipboard\n  const copyToClipboard = useCallback(async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      // Could add a toast notification here\n    } catch (error) {\n      console.warn(\"Failed to copy to clipboard:\", error);\n    }\n  }, []);\n\n  return (\n    <Container\n      flex=\"column\"\n      fullHeight\n      p=\"lg\"\n      style={{ maxHeight: \"500px\", minHeight: \"250px\", overflowY: \"auto\" }}\n    >\n      <ModalHeader onBack={onBack} title=\"Payment Receipt\" />\n\n      <Spacer y=\"lg\" />\n\n      <Container flex=\"column\" gap=\"lg\">\n        {/* Status Results */}\n        <Container flex=\"column\" gap=\"md\">\n          <Text color=\"primaryText\" size=\"md\">\n            Transactions\n          </Text>\n\n          {completedStatuses.map((status, index) => (\n            <CompletedStepDetailCard\n              key={`${status.type}-${index}`}\n              onCopyToClipboard={copyToClipboard}\n              preparedQuote={preparedQuote}\n              status={status}\n              windowAdapter={windowAdapter}\n            />\n          ))}\n        </Container>\n      </Container>\n    </Container>\n  );\n}\n", "\"use client\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useEffect } from \"react\";\nimport { trackPayEvent } from \"../../../../analytics/track/pay.js\";\nimport type { Token } from \"../../../../bridge/types/Token.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport { toUnits } from \"../../../../utils/units.js\";\nimport {\n  type BridgePrepareRequest,\n  type BridgePrepareResult,\n  type UseBridgePrepareParams,\n  useBridgePrepare,\n} from \"../../../core/hooks/useBridgePrepare.js\";\nimport type { PaymentMethod } from \"../../../core/machines/paymentMachine.js\";\nimport { Container } from \"../components/basic.js\";\nimport { Spacer } from \"../components/Spacer.js\";\nimport { Spinner } from \"../components/Spinner.js\";\nimport { Text } from \"../components/text.js\";\n\ninterface QuoteLoaderProps {\n  /**\n   * The destination token to bridge to\n   */\n  destinationToken: Token;\n\n  /**\n   * The payment method to use\n   */\n  paymentMethod: PaymentMethod;\n\n  /**\n   * The amount to bridge (as string)\n   */\n  amount: string;\n\n  /**\n   * The sender address\n   */\n  sender?: string;\n\n  /**\n   * The receiver address (defaults to sender for fund_wallet mode)\n   */\n  receiver: string;\n\n  /**\n   * ThirdwebClient for API calls\n   */\n  client: ThirdwebClient;\n\n  /**\n   * Called when a quote is successfully received\n   */\n  onQuoteReceived: (\n    preparedQuote: BridgePrepareResult,\n    request: BridgePrepareRequest,\n  ) => void;\n\n  /**\n   * Called when an error occurs\n   */\n  onError: (error: Error) => void;\n\n  /**\n   * Called when user wants to go back\n   */\n  onBack?: () => void;\n\n  /**\n   * Optional purchase data for the payment\n   */\n  purchaseData?: object;\n\n  /**\n   * Optional payment link ID for the payment\n   */\n  paymentLinkId?: string;\n\n  /**\n   * Fee payer for direct transfers (defaults to sender)\n   */\n  feePayer?: \"sender\" | \"receiver\";\n  mode: \"fund_wallet\" | \"direct_payment\" | \"transaction\";\n}\n\nexport function QuoteLoader({\n  mode,\n  destinationToken,\n  paymentMethod,\n  amount,\n  sender,\n  receiver,\n  client,\n  onQuoteReceived,\n  onError,\n  purchaseData,\n  paymentLinkId,\n  feePayer,\n}: QuoteLoaderProps) {\n  // For now, we'll use a simple buy operation\n  // This will be expanded to handle different bridge types based on the payment method\n  const request: BridgePrepareRequest = getBridgeParams({\n    amount,\n    client,\n    destinationToken,\n    feePayer,\n    paymentLinkId,\n    paymentMethod,\n    purchaseData,\n    receiver,\n    sender,\n  });\n  const prepareQuery = useBridgePrepare(request);\n\n  useQuery({\n    queryFn: () => {\n      trackPayEvent({\n        chainId:\n          paymentMethod.type === \"wallet\"\n            ? paymentMethod.originToken.chainId\n            : undefined,\n        client,\n        event: `ub:ui:loading_quote:${mode}`,\n        fromToken:\n          paymentMethod.type === \"wallet\"\n            ? paymentMethod.originToken.address\n            : undefined,\n        toChainId: destinationToken.chainId,\n        toToken: destinationToken.address,\n      });\n    },\n    queryKey: [\"loading_quote\", paymentMethod.type],\n  });\n\n  // Handle successful quote\n  useEffect(() => {\n    if (prepareQuery.data) {\n      onQuoteReceived(prepareQuery.data, request);\n    }\n  }, [prepareQuery.data, onQuoteReceived, request]);\n\n  // Handle errors\n  useEffect(() => {\n    if (prepareQuery.error) {\n      onError(prepareQuery.error as Error);\n    }\n  }, [prepareQuery.error, onError]);\n\n  return (\n    <Container\n      center=\"both\"\n      flex=\"column\"\n      fullHeight\n      p=\"lg\"\n      style={{ minHeight: \"350px\" }}\n    >\n      <Spinner color=\"secondaryText\" size=\"xl\" />\n      <Spacer y=\"md\" />\n      <Text center color=\"primaryText\" size=\"lg\" style={{ fontWeight: 600 }}>\n        Finding the best route...\n      </Text>\n      <Spacer y=\"sm\" />\n      <Text center color=\"secondaryText\" size=\"sm\">\n        We're searching for the most efficient path for this payment.\n      </Text>\n    </Container>\n  );\n}\n\nfunction getBridgeParams(args: {\n  paymentMethod: PaymentMethod;\n  amount: string;\n  destinationToken: Token;\n  receiver: string;\n  client: ThirdwebClient;\n  sender?: string;\n  feePayer?: \"sender\" | \"receiver\";\n  purchaseData?: object;\n  paymentLinkId?: string;\n}): UseBridgePrepareParams {\n  const { paymentMethod, amount, destinationToken, receiver, client, sender } =\n    args;\n\n  switch (paymentMethod.type) {\n    case \"fiat\":\n      return {\n        amount: toUnits(amount, destinationToken.decimals),\n        chainId: destinationToken.chainId,\n        client,\n        currency: paymentMethod.currency,\n        enabled: !!(destinationToken && amount && client),\n        onramp: paymentMethod.onramp || \"coinbase\",\n        paymentLinkId: args.paymentLinkId,\n        purchaseData: args.purchaseData,\n        receiver,\n        sender, // always onramp to native token\n        tokenAddress: destinationToken.address,\n        type: \"onramp\",\n      };\n    case \"wallet\":\n      // if the origin token is the same as the destination token, use transfer type\n      if (\n        paymentMethod.originToken.chainId === destinationToken.chainId &&\n        paymentMethod.originToken.address.toLowerCase() ===\n          destinationToken.address.toLowerCase()\n      ) {\n        return {\n          amount: toUnits(amount, destinationToken.decimals),\n          chainId: destinationToken.chainId,\n          client,\n          enabled: !!(destinationToken && amount && client),\n          feePayer: args.feePayer || \"sender\",\n          paymentLinkId: args.paymentLinkId,\n          purchaseData: args.purchaseData,\n          receiver,\n          sender:\n            sender ||\n            paymentMethod.payerWallet.getAccount()?.address ||\n            receiver,\n          tokenAddress: destinationToken.address,\n          type: \"transfer\",\n        };\n      }\n\n      return {\n        amount: toUnits(amount, destinationToken.decimals),\n        client,\n        destinationChainId: destinationToken.chainId,\n        destinationTokenAddress: destinationToken.address,\n        enabled: !!(destinationToken && amount && client),\n        originChainId: paymentMethod.originToken.chainId,\n        originTokenAddress: paymentMethod.originToken.address,\n        paymentLinkId: args.paymentLinkId,\n        purchaseData: args.purchaseData,\n        receiver,\n        sender:\n          sender || paymentMethod.payerWallet.getAccount()?.address || receiver,\n        type: \"buy\",\n      };\n  }\n}\n", "import { useQuery } from \"@tanstack/react-query\";\nimport type { prepare as BuyPrepare } from \"../../../bridge/Buy.js\";\nimport * as Bridge from \"../../../bridge/index.js\";\nimport type { prepare as OnrampPrepare } from \"../../../bridge/Onramp.js\";\nimport type { prepare as SellPrepare } from \"../../../bridge/Sell.js\";\nimport type { prepare as TransferPrepare } from \"../../../bridge/Transfer.js\";\nimport { ApiError } from \"../../../bridge/types/Errors.js\";\nimport { stringify } from \"../../../utils/json.js\";\nimport { mapBridgeError } from \"../errors/mapBridgeError.js\";\n\n/**\n * Union type for different Bridge prepare request types\n */\nexport type BridgePrepareRequest =\n  | ({ type: \"buy\" } & BuyPrepare.Options)\n  | ({ type: \"sell\" } & SellPrepare.Options)\n  | ({ type: \"transfer\" } & TransferPrepare.Options)\n  | ({ type: \"onramp\" } & OnrampPrepare.Options);\n\n/**\n * Union type for different Bridge prepare result types\n */\nexport type BridgePrepareResult =\n  | ({ type: \"buy\" } & BuyPrepare.Result)\n  | ({ type: \"sell\" } & SellPrepare.Result)\n  | ({ type: \"transfer\" } & TransferPrepare.Result)\n  | ({ type: \"onramp\" } & OnrampPrepare.Result);\n\n/**\n * Parameters for the useBridgePrepare hook\n */\nexport type UseBridgePrepareParams = BridgePrepareRequest & {\n  /**\n   * Whether to enable the query. Useful for conditional fetching.\n   * @default true\n   */\n  enabled?: boolean;\n};\n\n/**\n * Hook that prepares bridge transactions with caching and retry logic\n *\n * @param params - Parameters for preparing bridge transactions including type and specific options\n * @returns React Query result with prepared transaction data, loading state, and error handling\n *\n * @example\n * ```tsx\n * // Buy preparation\n * const { data: preparedBuy, isLoading, error } = useBridgePrepare({\n *   type: \"buy\",\n *   client: thirdwebClient,\n *   originChainId: 1,\n *   originTokenAddress: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n *   destinationChainId: 137,\n *   destinationTokenAddress: \"0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619\",\n *   amount: parseEther(\"1\"),\n *   sender: \"0x...\",\n *   receiver: \"0x...\"\n * });\n *\n * // Transfer preparation\n * const { data: preparedTransfer } = useBridgePrepare({\n *   type: \"transfer\",\n *   client: thirdwebClient,\n *   originChainId: 1,\n *   originTokenAddress: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n *   destinationChainId: 137,\n *   destinationTokenAddress: \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\n *   amount: 1000000n,\n *   sender: \"0x...\",\n *   receiver: \"0x...\"\n * });\n * ```\n */\nexport function useBridgePrepare(params: UseBridgePrepareParams) {\n  const { enabled = true, type, ...prepareParams } = params;\n\n  return useQuery({\n    enabled: enabled && !!prepareParams.client,\n    gcTime: 5 * 60 * 1000,\n    queryFn: async (): Promise<BridgePrepareResult> => {\n      switch (type) {\n        case \"buy\": {\n          const result = await Bridge.Buy.prepare(\n            prepareParams as BuyPrepare.Options,\n          );\n          return { type: \"buy\", ...result };\n        }\n        case \"sell\": {\n          const result = await Bridge.Sell.prepare(\n            prepareParams as SellPrepare.Options,\n          );\n          return { type: \"sell\", ...result };\n        }\n        case \"transfer\": {\n          const result = await Bridge.Transfer.prepare(\n            prepareParams as TransferPrepare.Options,\n          );\n          return { type: \"transfer\", ...result };\n        }\n        case \"onramp\": {\n          const result = await Bridge.Onramp.prepare(\n            prepareParams as OnrampPrepare.Options,\n          );\n          return { type: \"onramp\", ...result };\n        }\n        default:\n          throw new Error(`Unsupported bridge prepare type: ${type}`);\n      }\n    },\n    queryKey: [\"bridge-prepare\", type, stringify(prepareParams)], // 2 minutes - prepared quotes have shorter validity\n    retry: (failureCount, error) => {\n      // Handle both ApiError and generic Error instances\n      if (error instanceof ApiError) {\n        const bridgeError = mapBridgeError(error);\n\n        // Don't retry on client-side errors (4xx)\n        if (\n          bridgeError.statusCode &&\n          bridgeError.statusCode >= 400 &&\n          bridgeError.statusCode < 500\n        ) {\n          return false;\n        }\n      }\n\n      // Retry up to 2 times for prepared quotes (they're more time-sensitive)\n      return failureCount < 2;\n    }, // 5 minutes garbage collection\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 10000),\n    staleTime: 2 * 60 * 1000, // Exponential backoff, max 10s\n  });\n}\n", "import { useQuery } from \"@tanstack/react-query\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport type { status as OnrampStatus } from \"../../../bridge/OnrampStatus.js\";\nimport { ApiError } from \"../../../bridge/types/Errors.js\";\nimport type {\n  RouteStep,\n  RouteTransaction,\n} from \"../../../bridge/types/Route.js\";\nimport type { Status } from \"../../../bridge/types/Status.js\";\nimport { getCachedChain } from \"../../../chains/utils.js\";\nimport type { ThirdwebClient } from \"../../../client/client.js\";\nimport { waitForReceipt } from \"../../../transaction/actions/wait-for-tx-receipt.js\";\nimport { stringify } from \"../../../utils/json.js\";\nimport type { Account, Wallet } from \"../../../wallets/interfaces/wallet.js\";\nimport type { WindowAdapter } from \"../adapters/WindowAdapter.js\";\nimport {\n  type BridgePrepareRequest,\n  type BridgePrepareResult,\n  useBridgePrepare,\n} from \"./useBridgePrepare.js\";\n\n/**\n * Type for completed status results from Bridge.status and Onramp.status\n */\nexport type CompletedStatusResult =\n  | ({ type: \"buy\" } & Extract<Status, { status: \"COMPLETED\" }>)\n  | ({ type: \"sell\" } & Extract<Status, { status: \"COMPLETED\" }>)\n  | ({ type: \"transfer\" } & Extract<Status, { status: \"COMPLETED\" }>)\n  | ({ type: \"onramp\" } & Extract<\n      OnrampStatus.Result,\n      { status: \"COMPLETED\" }\n    >);\n\n/**\n * Options for the step executor hook\n */\ninterface StepExecutorOptions {\n  /** Prepared quote returned by Bridge.prepare */\n  request: BridgePrepareRequest;\n  /** Wallet instance providing getAccount() & sendTransaction */\n  wallet: Wallet;\n  /** Window adapter for opening on-ramp URLs (web / RN) */\n  windowAdapter: WindowAdapter;\n  /** Thirdweb client for API calls */\n  client: ThirdwebClient;\n  /** Auto start execution as soon as hook mounts */\n  autoStart?: boolean;\n  /** Callback when all steps complete successfully - receives array of all completed status results */\n  onComplete?: (completedStatuses: CompletedStatusResult[]) => void;\n}\n\n/**\n * Internal flattened transaction type\n */\ninterface FlattenedTx extends RouteTransaction {\n  /** Index in flat array */\n  _index: number;\n  /** Parent step index */\n  _stepIndex: number;\n}\n\n/**\n * Public return type of useStepExecutor\n */\ninterface StepExecutorResult {\n  currentStep?: RouteStep;\n  currentTxIndex?: number;\n  progress: number; // 0–100\n  onrampStatus?: \"pending\" | \"executing\" | \"completed\" | \"failed\";\n  executionState: \"fetching\" | \"idle\" | \"executing\" | \"auto-starting\";\n  steps?: RouteStep[];\n  error?: ApiError;\n  start: () => void;\n  cancel: () => void;\n  retry: () => void;\n}\n\n/**\n * Flatten RouteStep[] into a linear list of transactions preserving ordering & indices.\n */\nfunction flattenRouteSteps(steps: RouteStep[]): FlattenedTx[] {\n  const out: FlattenedTx[] = [];\n  steps.forEach((step, stepIdx) => {\n    step.transactions?.forEach((tx, _txIdx) => {\n      out.push({\n        ...(tx as RouteTransaction),\n        _index: out.length,\n        _stepIndex: stepIdx,\n      });\n    });\n  });\n  return out;\n}\n\n/**\n * Hook that sequentially executes prepared steps.\n * NOTE: initial implementation only exposes progress + basic state machine. Actual execution logic will follow in later subtasks.\n */\nexport function useStepExecutor(\n  options: StepExecutorOptions,\n): StepExecutorResult {\n  const {\n    request,\n    wallet,\n    windowAdapter,\n    client,\n    autoStart = false,\n    onComplete,\n  } = options;\n\n  const { data: preparedQuote, isLoading } = useBridgePrepare(request);\n\n  // Flatten all transactions upfront\n  const flatTxs = useMemo(\n    () => (preparedQuote?.steps ? flattenRouteSteps(preparedQuote.steps) : []),\n    [preparedQuote?.steps],\n  );\n\n  // State management\n  const [currentTxIndex, setCurrentTxIndex] = useState<number | undefined>(\n    undefined,\n  );\n  const [executionState, setExecutionState] = useState<\n    \"fetching\" | \"idle\" | \"executing\" | \"auto-starting\"\n  >(\"idle\");\n  const [error, setError] = useState<ApiError | undefined>(undefined);\n  const [completedTxs, setCompletedTxs] = useState<Set<number>>(new Set());\n  const [onrampStatus, setOnrampStatus] = useState<\n    \"pending\" | \"executing\" | \"completed\" | \"failed\" | undefined\n  >(preparedQuote?.type === \"onramp\" ? \"pending\" : undefined);\n\n  useQuery({\n    queryFn: async () => {\n      if (!isLoading) {\n        setExecutionState(\"idle\");\n      } else {\n        setExecutionState(\"fetching\");\n      }\n      return executionState;\n    },\n    queryKey: [\n      \"bridge-quote-execution-state\",\n      stringify(preparedQuote?.steps),\n      isLoading,\n    ],\n  });\n\n  // Cancellation tracking\n  const abortControllerRef = useRef<AbortController | null>(null);\n\n  // Get current step based on current tx index\n  const currentStep = useMemo(() => {\n    if (typeof preparedQuote?.steps === \"undefined\") return undefined;\n    if (currentTxIndex === undefined) {\n      return undefined;\n    }\n    const tx = flatTxs[currentTxIndex];\n    return tx ? preparedQuote.steps[tx._stepIndex] : undefined;\n  }, [currentTxIndex, flatTxs, preparedQuote?.steps]);\n\n  // Calculate progress including onramp step\n  const progress = useMemo(() => {\n    if (typeof preparedQuote?.type === \"undefined\") return 0;\n    const totalSteps =\n      flatTxs.length + (preparedQuote.type === \"onramp\" ? 1 : 0);\n    if (totalSteps === 0) {\n      return 0;\n    }\n    const completedSteps =\n      completedTxs.size + (onrampStatus === \"completed\" ? 1 : 0);\n    return Math.round((completedSteps / totalSteps) * 100);\n  }, [completedTxs.size, flatTxs.length, preparedQuote?.type, onrampStatus]);\n\n  // Exponential backoff polling utility\n  const poller = useCallback(\n    async (\n      pollFn: () => Promise<{\n        completed: boolean;\n      }>,\n      abortSignal: AbortSignal,\n    ) => {\n      const delay = 2000; // 2 second poll interval\n\n      while (!abortSignal.aborted) {\n        const result = await pollFn();\n        if (result.completed) {\n          return;\n        }\n\n        await new Promise((resolve) => {\n          const timeout = setTimeout(resolve, delay);\n          abortSignal.addEventListener(\"abort\", () => clearTimeout(timeout), {\n            once: true,\n          });\n        });\n      }\n\n      throw new Error(\"Polling aborted\");\n    },\n    [],\n  );\n\n  // Execute a single transaction\n  const executeSingleTx = useCallback(\n    async (\n      tx: FlattenedTx,\n      account: Account,\n      completedStatusResults: CompletedStatusResult[],\n      abortSignal: AbortSignal,\n    ) => {\n      if (typeof preparedQuote?.type === \"undefined\") {\n        throw new Error(\"No quote generated. This is unexpected.\");\n      }\n      const { prepareTransaction } = await import(\n        \"../../../transaction/prepare-transaction.js\"\n      );\n      const { sendTransaction } = await import(\n        \"../../../transaction/actions/send-transaction.js\"\n      );\n\n      // Prepare the transaction\n      const preparedTx = prepareTransaction({\n        chain: tx.chain,\n        client: tx.client,\n        data: tx.data,\n        to: tx.to,\n        value: tx.value,\n      });\n\n      // Send the transaction\n      const result = await sendTransaction({\n        account,\n        transaction: preparedTx,\n      });\n      const hash = result.transactionHash;\n\n      if (tx.action === \"approval\" || tx.action === \"fee\") {\n        // don't poll status for approval transactions, just wait for confirmation\n        await waitForReceipt(result);\n        await new Promise((resolve) => setTimeout(resolve, 2000)); // Add an extra 2 second delay for RPC to catch up to new state\n        return;\n      }\n\n      // Poll for completion\n      const { status } = await import(\"../../../bridge/Status.js\");\n      await poller(async () => {\n        const statusResult = await status({\n          chainId: tx.chainId,\n          client: tx.client,\n          transactionHash: hash,\n        });\n\n        if (statusResult.status === \"COMPLETED\") {\n          // Add type field from preparedQuote for discriminated union\n          const typedStatusResult = {\n            type: preparedQuote.type,\n            ...statusResult,\n          };\n          completedStatusResults.push(typedStatusResult);\n          return { completed: true };\n        }\n\n        if (statusResult.status === \"FAILED\") {\n          throw new Error(\"Payment failed\");\n        }\n\n        return { completed: false };\n      }, abortSignal);\n    },\n    [poller, preparedQuote?.type],\n  );\n\n  // Execute batch transactions\n  const executeBatch = useCallback(\n    async (\n      txs: FlattenedTx[],\n      account: Account,\n      completedStatusResults: CompletedStatusResult[],\n      abortSignal: AbortSignal,\n    ) => {\n      if (typeof preparedQuote?.type === \"undefined\") {\n        throw new Error(\"No quote generated. This is unexpected.\");\n      }\n      if (!account.sendBatchTransaction) {\n        throw new Error(\"Account does not support batch transactions\");\n      }\n\n      const { prepareTransaction } = await import(\n        \"../../../transaction/prepare-transaction.js\"\n      );\n      const { sendBatchTransaction } = await import(\n        \"../../../transaction/actions/send-batch-transaction.js\"\n      );\n\n      // Prepare and convert all transactions\n      const serializableTxs = await Promise.all(\n        txs.map(async (tx) => {\n          const preparedTx = prepareTransaction({\n            chain: tx.chain,\n            client: tx.client,\n            data: tx.data,\n            to: tx.to,\n            value: tx.value,\n          });\n          return preparedTx;\n        }),\n      );\n\n      // Send batch\n      const result = await sendBatchTransaction({\n        account,\n        transactions: serializableTxs,\n      });\n      // Batch transactions return a single receipt, we need to handle this differently\n      // For now, we'll assume all transactions in the batch succeed together\n\n      // Poll for the first transaction's completion (representative of the batch)\n      if (txs.length === 0) {\n        throw new Error(\"No transactions to batch\");\n      }\n      const firstTx = txs[0];\n      if (!firstTx) {\n        throw new Error(\"Invalid batch transaction\");\n      }\n\n      const { status } = await import(\"../../../bridge/Status.js\");\n      await poller(async () => {\n        const statusResult = await status({\n          chainId: firstTx.chainId,\n          client: firstTx.client,\n          transactionHash: result.transactionHash,\n        });\n\n        if (statusResult.status === \"COMPLETED\") {\n          // Add type field from preparedQuote for discriminated union\n          const typedStatusResult = {\n            type: preparedQuote.type,\n            ...statusResult,\n          };\n          completedStatusResults.push(typedStatusResult);\n          return { completed: true };\n        }\n\n        if (statusResult.status === \"FAILED\") {\n          throw new Error(\"Payment failed\");\n        }\n\n        return { completed: false };\n      }, abortSignal);\n    },\n    [poller, preparedQuote?.type],\n  );\n\n  // Execute onramp step\n  const executeOnramp = useCallback(\n    async (\n      onrampQuote: Extract<BridgePrepareResult, { type: \"onramp\" }>,\n      completedStatusResults: CompletedStatusResult[],\n      abortSignal: AbortSignal,\n    ) => {\n      setOnrampStatus(\"executing\");\n      // Open the payment URL\n      windowAdapter.open(onrampQuote.link);\n\n      // Poll for completion using the session ID\n      const { Onramp } = await import(\"../../../bridge/index.js\");\n      await poller(async () => {\n        const statusResult = await Onramp.status({\n          client: client,\n          id: onrampQuote.id,\n        });\n\n        const status = statusResult.status;\n        if (status === \"COMPLETED\") {\n          setOnrampStatus(\"completed\");\n          // Add type field for discriminated union\n          const typedStatusResult = {\n            type: \"onramp\" as const,\n            ...statusResult,\n          };\n          completedStatusResults.push(typedStatusResult);\n          return { completed: true };\n        } else if (status === \"FAILED\") {\n          setOnrampStatus(\"failed\");\n        }\n\n        return { completed: false };\n      }, abortSignal);\n    },\n    [poller, client, windowAdapter],\n  );\n\n  // Main execution function\n  const execute = useCallback(async () => {\n    if (typeof preparedQuote?.type === \"undefined\") {\n      throw new Error(\"No quote generated. This is unexpected.\");\n    }\n    if (executionState !== \"idle\") {\n      return;\n    }\n\n    setExecutionState(\"executing\");\n    setError(undefined);\n    const completedStatusResults: CompletedStatusResult[] = [];\n\n    // Create new abort controller\n    const abortController = new AbortController();\n    abortControllerRef.current = abortController;\n\n    try {\n      // Execute onramp first if configured and not already completed\n      if (preparedQuote.type === \"onramp\" && onrampStatus === \"pending\") {\n        await executeOnramp(\n          preparedQuote,\n          completedStatusResults,\n          abortController.signal,\n        );\n      }\n\n      // Then execute transactions\n      const account = wallet.getAccount();\n      if (!account) {\n        throw new ApiError({\n          code: \"INVALID_INPUT\",\n          message: \"Wallet not connected\",\n          statusCode: 400,\n        });\n      }\n\n      // Start from where we left off, or from the beginning\n      const startIndex = currentTxIndex ?? 0;\n\n      for (let i = startIndex; i < flatTxs.length; i++) {\n        if (abortController.signal.aborted) {\n          break;\n        }\n\n        const currentTx = flatTxs[i];\n        if (!currentTx) {\n          continue; // Skip invalid index\n        }\n\n        setCurrentTxIndex(i);\n        const currentStepData = preparedQuote.steps[currentTx._stepIndex];\n        if (!currentStepData) {\n          throw new Error(`Invalid step index: ${currentTx._stepIndex}`);\n        }\n\n        // switch chain if needed\n        if (currentTx.chainId !== wallet.getChain()?.id) {\n          await wallet.switchChain(getCachedChain(currentTx.chainId));\n        }\n\n        // Check if we can batch transactions\n        const canBatch =\n          account.sendBatchTransaction !== undefined && i < flatTxs.length - 1; // Not the last transaction\n\n        if (canBatch) {\n          // Find consecutive transactions on the same chain\n          const batchTxs: FlattenedTx[] = [currentTx];\n          let j = i + 1;\n          while (j < flatTxs.length) {\n            const nextTx = flatTxs[j];\n            if (!nextTx || nextTx.chainId !== currentTx.chainId) {\n              break;\n            }\n            batchTxs.push(nextTx);\n            j++;\n          }\n\n          // Execute batch if we have multiple transactions\n          if (batchTxs.length > 1) {\n            await executeBatch(\n              batchTxs,\n              account,\n              completedStatusResults,\n              abortController.signal,\n            );\n\n            // Mark all batched transactions as completed\n            for (const tx of batchTxs) {\n              setCompletedTxs((prev) => new Set(prev).add(tx._index));\n            }\n\n            // Skip ahead\n            i = j - 1;\n            continue;\n          }\n        }\n\n        // Execute single transaction\n        await executeSingleTx(\n          currentTx,\n          account,\n          completedStatusResults,\n          abortController.signal,\n        );\n\n        // Mark transaction as completed\n        setCompletedTxs((prev) => new Set(prev).add(currentTx._index));\n      }\n\n      // All done - check if we actually completed everything\n      if (!abortController.signal.aborted) {\n        setCurrentTxIndex(undefined);\n\n        // Call completion callback with all completed status results\n        if (onComplete) {\n          onComplete(completedStatusResults);\n        }\n      }\n    } catch (err) {\n      console.error(\"Error executing payment\", err);\n      if (err instanceof ApiError) {\n        setError(err);\n      } else {\n        setError(\n          new ApiError({\n            code: \"UNKNOWN_ERROR\",\n            message: (err as Error)?.message || \"An unknown error occurred\",\n            statusCode: 500,\n          }),\n        );\n      }\n    } finally {\n      setExecutionState(\"idle\");\n      abortControllerRef.current = null;\n    }\n  }, [\n    executionState,\n    wallet,\n    currentTxIndex,\n    flatTxs,\n    executeSingleTx,\n    executeBatch,\n    onrampStatus,\n    executeOnramp,\n    onComplete,\n    preparedQuote,\n  ]);\n\n  // Start execution\n  const start = useCallback(() => {\n    if (executionState === \"idle\") {\n      execute();\n    }\n  }, [execute, executionState]);\n\n  // Cancel execution\n  const cancel = useCallback(() => {\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n    setExecutionState(\"idle\");\n    if (onrampStatus === \"executing\") {\n      setOnrampStatus(\"pending\");\n    }\n  }, [onrampStatus]);\n\n  // Retry from failed transaction\n  const retry = useCallback(() => {\n    if (error) {\n      setError(undefined);\n      execute();\n    }\n  }, [error, execute]);\n\n  const hasInitialized = useRef(false);\n\n  useEffect(() => {\n    if (\n      autoStart &&\n      executionState === \"idle\" &&\n      currentTxIndex === undefined &&\n      !hasInitialized.current\n    ) {\n      hasInitialized.current = true;\n      setExecutionState(\"auto-starting\");\n      // add a delay to ensure the UI is ready\n      setTimeout(() => {\n        start();\n      }, 500);\n    }\n  }, [autoStart, executionState, currentTxIndex, start]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n    };\n  }, []);\n\n  return {\n    cancel,\n    currentStep,\n    currentTxIndex,\n    error,\n    executionState,\n    onrampStatus,\n    progress,\n    retry,\n    start,\n    steps: preparedQuote?.steps,\n  };\n}\n", "\"use client\";\nimport { CheckIcon, ClockIcon, Cross1Icon } from \"@radix-ui/react-icons\";\nimport type { RouteStep } from \"../../../../bridge/types/Route.js\";\nimport type { Chain } from \"../../../../chains/types.js\";\nimport { defineChain } from \"../../../../chains/utils.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport type { Wallet } from \"../../../../wallets/interfaces/wallet.js\";\nimport type { WindowAdapter } from \"../../../core/adapters/WindowAdapter.js\";\nimport { useCustomTheme } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport {\n  iconSize,\n  radius,\n  spacing,\n} from \"../../../core/design-system/index.js\";\nimport type { BridgePrepareRequest } from \"../../../core/hooks/useBridgePrepare.js\";\nimport {\n  type CompletedStatusResult,\n  useStepExecutor,\n} from \"../../../core/hooks/useStepExecutor.js\";\nimport { Container, ModalHeader } from \"../components/basic.js\";\nimport { Button } from \"../components/buttons.js\";\nimport { ChainName } from \"../components/ChainName.js\";\nimport { Spacer } from \"../components/Spacer.js\";\nimport { Spinner } from \"../components/Spinner.js\";\nimport { Text } from \"../components/text.js\";\n\ninterface StepRunnerProps {\n  request: BridgePrepareRequest;\n\n  /**\n   * Wallet instance for executing transactions\n   */\n  wallet: Wallet;\n\n  /**\n   * Thirdweb client for API calls\n   */\n  client: ThirdwebClient;\n\n  /**\n   * Window adapter for opening URLs (web/RN)\n   */\n  windowAdapter: WindowAdapter;\n\n  /**\n   * Whether to automatically start the transaction process\n   */\n  autoStart?: boolean;\n\n  /**\n   * Called when all steps are completed - receives array of completed status results\n   */\n  onComplete: (completedStatuses: CompletedStatusResult[]) => void;\n\n  /**\n   * Called when user cancels the flow\n   */\n  onCancel?: () => void;\n\n  /**\n   * Called when user clicks the back button\n   */\n  onBack?: () => void;\n}\n\nexport function StepRunner({\n  request,\n  wallet,\n  client,\n  windowAdapter,\n  onComplete,\n  onCancel,\n  onBack,\n  autoStart,\n}: StepRunnerProps) {\n  const theme = useCustomTheme();\n\n  // Use the real step executor hook\n  const {\n    currentStep,\n    progress,\n    executionState,\n    onrampStatus,\n    steps,\n    error,\n    start,\n    cancel,\n    retry,\n  } = useStepExecutor({\n    autoStart,\n    client,\n    onComplete: (completedStatuses: CompletedStatusResult[]) => {\n      onComplete(completedStatuses);\n    },\n    request,\n    wallet,\n    windowAdapter,\n  });\n\n  const handleCancel = () => {\n    cancel();\n    if (onCancel) {\n      onCancel();\n    }\n  };\n\n  const handleRetry = () => {\n    retry();\n  };\n\n  const getStepStatus = (\n    stepIndex: number,\n  ): \"pending\" | \"executing\" | \"completed\" | \"failed\" => {\n    if (!currentStep || !steps) {\n      // Not started yet\n      return stepIndex === 0 ? (error ? \"failed\" : \"pending\") : \"pending\";\n    }\n\n    const currentStepIndex = steps.findIndex((step) => step === currentStep);\n\n    if (stepIndex < currentStepIndex) return \"completed\";\n    if (stepIndex === currentStepIndex && executionState === \"executing\")\n      return \"executing\";\n    if (stepIndex === currentStepIndex && error) return \"failed\";\n    if (\n      stepIndex === currentStepIndex &&\n      executionState === \"idle\" &&\n      progress === 100\n    )\n      return \"completed\";\n\n    return \"pending\";\n  };\n\n  const getStatusIcon = (\n    status: \"pending\" | \"executing\" | \"completed\" | \"failed\",\n  ) => {\n    switch (status) {\n      case \"completed\":\n        return (\n          <CheckIcon\n            color={theme.colors.accentButtonText}\n            height={iconSize.sm}\n            width={iconSize.sm}\n          />\n        );\n      case \"executing\":\n        return <Spinner color={\"accentButtonText\"} size=\"sm\" />;\n      case \"failed\":\n        return (\n          <Cross1Icon color=\"white\" height={iconSize.sm} width={iconSize.sm} />\n        );\n      default:\n        return (\n          <ClockIcon\n            color={theme.colors.primaryText}\n            height={iconSize.sm}\n            width={iconSize.sm}\n          />\n        );\n    }\n  };\n\n  const getStepBackgroundColor = (\n    status: \"pending\" | \"executing\" | \"completed\" | \"failed\",\n  ) => {\n    switch (status) {\n      case \"completed\":\n        return theme.colors.tertiaryBg;\n      case \"executing\":\n        return theme.colors.tertiaryBg;\n      case \"failed\":\n        return theme.colors.tertiaryBg;\n      default:\n        return theme.colors.tertiaryBg;\n    }\n  };\n\n  const getIconBackgroundColor = (\n    status: \"pending\" | \"executing\" | \"completed\" | \"failed\",\n  ) => {\n    switch (status) {\n      case \"completed\":\n        return theme.colors.success;\n      case \"executing\":\n        return theme.colors.accentButtonBg;\n      case \"failed\":\n        return theme.colors.danger;\n      default:\n        return theme.colors.borderColor;\n    }\n  };\n\n  const getStepDescription = (step: RouteStep) => {\n    const { originToken, destinationToken } = step;\n\n    // If tokens are the same, it's likely a bridge operation\n    if (originToken.chainId !== destinationToken.chainId) {\n      return (\n        <Container flex=\"row\" gap=\"3xs\">\n          <Text color=\"primaryText\" size=\"sm\">\n            Bridge {originToken.symbol} to{\" \"}\n          </Text>\n          <ChainName\n            chain={getDestinationChain(request)}\n            client={client}\n            color=\"primaryText\"\n            short\n            size=\"sm\"\n          />\n        </Container>\n      );\n    }\n\n    // If different tokens on same chain, it's a swap\n    if (originToken.symbol !== destinationToken.symbol) {\n      return (\n        <Text color=\"primaryText\" size=\"sm\">\n          Swap {originToken.symbol} to {destinationToken.symbol}\n        </Text>\n      );\n    }\n\n    // Fallback to step number\n    return (\n      <Text color=\"primaryText\" size=\"sm\">\n        Process transaction\n      </Text>\n    );\n  };\n\n  const getStepStatusText = (\n    status: \"pending\" | \"executing\" | \"completed\" | \"failed\",\n  ) => {\n    switch (status) {\n      case \"executing\":\n        return \"Processing...\";\n      case \"completed\":\n        return \"Completed\";\n      case \"pending\":\n        return \"Waiting...\";\n      case \"failed\":\n        return \"Failed\";\n      default:\n        return \"Unknown\";\n    }\n  };\n\n  return (\n    <Container flex=\"column\" fullHeight p=\"lg\">\n      <ModalHeader onBack={onBack} title=\"Processing Payment\" />\n\n      <Spacer y=\"xl\" />\n\n      <Container flex=\"column\">\n        {/* Progress Bar */}\n        <Container flex=\"column\" gap=\"sm\">\n          <Container center=\"y\" flex=\"row\">\n            <Text color=\"secondaryText\" size=\"sm\" style={{ flex: 1 }}>\n              Progress\n            </Text>\n            <Text color=\"primaryText\" size=\"sm\">\n              {progress}%\n            </Text>\n          </Container>\n\n          <Container\n            style={{\n              backgroundColor: theme.colors.tertiaryBg,\n              border: `1px solid ${theme.colors.borderColor}`,\n              borderRadius: \"4px\",\n              height: \"8px\",\n              overflow: \"hidden\",\n              width: \"100%\",\n            }}\n          >\n            <Container\n              style={{\n                backgroundColor: error\n                  ? theme.colors.danger\n                  : theme.colors.accentButtonBg,\n                height: \"100%\",\n                transition: \"width 0.3s ease\",\n                width: `${progress}%`,\n              }}\n            >\n              <Text />\n            </Container>\n          </Container>\n        </Container>\n\n        <Spacer y=\"lg\" />\n\n        {/* Steps List */}\n        <Container flex=\"column\" gap=\"sm\">\n          {request.type === \"onramp\" && onrampStatus ? (\n            <Container\n              flex=\"row\"\n              gap=\"md\"\n              style={{\n                alignItems: \"center\",\n                backgroundColor: getStepBackgroundColor(onrampStatus),\n                border: `1px solid ${theme.colors.borderColor}`,\n                borderRadius: radius.md,\n                padding: `${spacing.sm} ${spacing.md}`,\n              }}\n            >\n              <Container\n                center=\"both\"\n                flex=\"row\"\n                style={{\n                  backgroundColor: getIconBackgroundColor(onrampStatus),\n                  borderRadius: \"50%\",\n                  color: theme.colors.primaryButtonText,\n                  flexShrink: 0,\n                  height: `${iconSize.lg}px`,\n                  width: `${iconSize.lg}px`,\n                }}\n              >\n                {getStatusIcon(onrampStatus)}\n              </Container>\n\n              <Container flex=\"column\" gap=\"3xs\" style={{ flex: 1 }}>\n                <Text color=\"primaryText\" size=\"sm\">\n                  {request.onramp.slice(0, 1).toUpperCase() +\n                    request.onramp.slice(1)}\n                </Text>\n                <Text color=\"secondaryText\" size=\"xs\">\n                  {getStepStatusText(onrampStatus)}\n                </Text>\n              </Container>\n            </Container>\n          ) : null}\n          {steps?.map((step, index) => {\n            const status = getStepStatus(index);\n\n            return (\n              <Container\n                flex=\"row\"\n                gap=\"md\"\n                key={`${step.originToken.chainId}-${step.destinationToken.chainId}-${index}`}\n                style={{\n                  alignItems: \"center\",\n                  backgroundColor: getStepBackgroundColor(status),\n                  border: `1px solid ${theme.colors.borderColor}`,\n                  borderRadius: radius.md,\n                  padding: `${spacing.sm} ${spacing.md}`,\n                }}\n              >\n                <Container\n                  center=\"both\"\n                  flex=\"row\"\n                  style={{\n                    backgroundColor: getIconBackgroundColor(status),\n                    borderRadius: \"50%\",\n                    color: theme.colors.primaryButtonText,\n                    flexShrink: 0,\n                    height: `${iconSize.lg}px`,\n                    width: `${iconSize.lg}px`,\n                  }}\n                >\n                  {getStatusIcon(status)}\n                </Container>\n\n                <Container flex=\"column\" gap=\"3xs\" style={{ flex: 1 }}>\n                  {getStepDescription(step)}\n                  <Text color=\"secondaryText\" size=\"xs\">\n                    {getStepStatusText(status)}\n                  </Text>\n                </Container>\n              </Container>\n            );\n          })}\n        </Container>\n\n        <Spacer y=\"md\" />\n        <Text center color=\"secondaryText\" size=\"xs\">\n          Keep this window open until all\n          <br /> transactions are complete.\n        </Text>\n\n        <Spacer y=\"lg\" />\n\n        {/* Action Buttons */}\n        {error ? (\n          <Container flex=\"row\" gap=\"md\">\n            <Button fullWidth onClick={handleRetry} variant=\"primary\">\n              Retry\n            </Button>\n          </Container>\n        ) : executionState === \"idle\" && progress === 0 ? (\n          <Button fullWidth onClick={start} variant=\"accent\">\n            Start Transaction\n          </Button>\n        ) : executionState === \"executing\" ||\n          executionState === \"auto-starting\" ? (\n          <Button fullWidth onClick={handleCancel} variant=\"secondary\">\n            Cancel Transaction\n          </Button>\n        ) : null}\n      </Container>\n    </Container>\n  );\n}\n\nfunction getDestinationChain(request: BridgePrepareRequest): Chain {\n  switch (request.type) {\n    case \"onramp\":\n      return defineChain(request.chainId);\n    case \"buy\":\n    case \"sell\":\n      return defineChain(request.destinationChainId);\n    case \"transfer\":\n      return defineChain(request.chainId);\n    default:\n      throw new Error(\"Invalid quote type\");\n  }\n}\n", "\"use client\";\nimport type { Token } from \"../../../../bridge/index.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport {\n  type Address,\n  getAddress,\n  shortenAddress,\n} from \"../../../../utils/address.js\";\nimport { useCustomTheme } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport {\n  fontSize,\n  spacing,\n  type Theme,\n} from \"../../../core/design-system/index.js\";\nimport { useChainMetadata } from \"../../../core/hooks/others/useChainQuery.js\";\nimport { useTransactionDetails } from \"../../../core/hooks/useTransactionDetails.js\";\nimport { useActiveAccount } from \"../../../core/hooks/wallets/useActiveAccount.js\";\nimport { useActiveWallet } from \"../../../core/hooks/wallets/useActiveWallet.js\";\nimport { ConnectButton } from \"../ConnectWallet/ConnectButton.js\";\nimport { PoweredByThirdweb } from \"../ConnectWallet/PoweredByTW.js\";\nimport { Container, Line } from \"../components/basic.js\";\nimport { Button } from \"../components/buttons.js\";\nimport { ChainName } from \"../components/ChainName.js\";\nimport { Spacer } from \"../components/Spacer.js\";\nimport { Text } from \"../components/text.js\";\nimport type { PayEmbedConnectOptions } from \"../PayEmbed.js\";\nimport type { UIOptions } from \"./BridgeOrchestrator.js\";\nimport { ChainIcon } from \"./common/TokenAndChain.js\";\nimport { WithHeader } from \"./common/WithHeader.js\";\n\nexport interface TransactionPaymentProps {\n  /**\n   * UI configuration and mode\n   */\n  uiOptions: Extract<UIOptions, { mode: \"transaction\" }>;\n\n  /**\n   * ThirdwebClient for blockchain interactions\n   */\n  client: ThirdwebClient;\n\n  /**\n   * Called when user confirms transaction execution\n   */\n  onContinue: (amount: string, token: Token, receiverAddress: Address) => void;\n\n  /**\n   * Connect options for wallet connection\n   */\n  connectOptions?: PayEmbedConnectOptions;\n}\n\nexport function TransactionPayment({\n  uiOptions,\n  client,\n  onContinue,\n  connectOptions,\n}: TransactionPaymentProps) {\n  const theme = useCustomTheme();\n  const activeAccount = useActiveAccount();\n  const wallet = useActiveWallet();\n\n  // Get chain metadata for native currency symbol\n  const chainMetadata = useChainMetadata(uiOptions.transaction.chain);\n\n  // Use the extracted hook for transaction details\n  const transactionDataQuery = useTransactionDetails({\n    client,\n    transaction: uiOptions.transaction,\n    wallet,\n  });\n\n  const contractName =\n    transactionDataQuery.data?.contractMetadata?.name || \"Unknown Contract\";\n  const functionName =\n    transactionDataQuery.data?.functionInfo?.functionName || \"Contract Call\";\n  const isLoading = transactionDataQuery.isLoading || chainMetadata.isLoading;\n\n  const buttonLabel = `Execute ${functionName}`;\n\n  if (isLoading) {\n    return (\n      <WithHeader\n        client={client}\n        defaultTitle=\"Transaction\"\n        uiOptions={uiOptions}\n      >\n        {/* Loading Header */}\n        <SkeletonHeader theme={theme} />\n\n        <Spacer y=\"md\" />\n\n        <Line />\n\n        <Spacer y=\"md\" />\n\n        {/* Loading Rows */}\n        <SkeletonRow theme={theme} width=\"60%\" />\n        <Spacer y=\"xs\" />\n        <SkeletonRow theme={theme} width=\"40%\" />\n        <Spacer y=\"xs\" />\n        <SkeletonRow theme={theme} width=\"50%\" />\n        <Spacer y=\"xs\" />\n        <SkeletonRow theme={theme} width=\"45%\" />\n        <Spacer y=\"xs\" />\n        <SkeletonRow theme={theme} width=\"55%\" />\n\n        <Spacer y=\"md\" />\n\n        <Line />\n\n        <Spacer y=\"lg\" />\n\n        {/* Loading Button */}\n        <div\n          style={{\n            backgroundColor: theme.colors.skeletonBg,\n            borderRadius: spacing.md,\n            height: \"48px\",\n            width: \"100%\",\n          }}\n        />\n\n        <Spacer y=\"md\" />\n\n        <PoweredByThirdweb />\n        <Spacer y=\"md\" />\n      </WithHeader>\n    );\n  }\n\n  return (\n    <WithHeader\n      client={client}\n      defaultTitle=\"Transaction\"\n      uiOptions={uiOptions}\n    >\n      {/* Cost and Function Name section */}\n      <Container\n        center=\"y\"\n        flex=\"row\"\n        gap=\"3xs\"\n        style={{\n          justifyContent: \"space-between\",\n        }}\n      >\n        {/* USD Value */}\n        <Text color=\"primaryText\" size=\"xl\" weight={700}>\n          {transactionDataQuery.data?.usdValueDisplay ||\n            transactionDataQuery.data?.txCostDisplay}\n        </Text>\n\n        {/* Function Name */}\n        <Text\n          color=\"secondaryText\"\n          size=\"md\"\n          style={{\n            backgroundColor: theme.colors.tertiaryBg,\n            borderRadius: spacing.sm,\n            fontFamily: \"monospace\",\n            padding: `${spacing.xs} ${spacing.sm}`,\n            textAlign: \"right\",\n          }}\n        >\n          {functionName}\n        </Text>\n      </Container>\n\n      <Spacer y=\"md\" />\n\n      <Line />\n\n      <Spacer y=\"md\" />\n\n      {/* Contract Info */}\n      <Container\n        flex=\"row\"\n        style={{\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Text color=\"secondaryText\" size=\"sm\">\n          Contract\n        </Text>\n        <Text color=\"primaryText\" size=\"sm\">\n          {contractName}\n        </Text>\n      </Container>\n\n      <Spacer y=\"xs\" />\n\n      {/* Address */}\n      <Container\n        flex=\"row\"\n        style={{\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Text color=\"secondaryText\" size=\"sm\">\n          Address\n        </Text>\n        <a\n          href={`https://thirdweb.com/${uiOptions.transaction.chain.id}/${uiOptions.transaction.to}`}\n          rel=\"noopener noreferrer\"\n          style={{\n            color: theme.colors.accentText,\n            fontFamily: \"monospace\",\n            fontSize: fontSize.sm,\n            textDecoration: \"none\",\n          }}\n          target=\"_blank\"\n        >\n          {shortenAddress(uiOptions.transaction.to as string)}\n        </a>\n      </Container>\n\n      <Spacer y=\"xs\" />\n\n      {/* Network */}\n      <Container\n        flex=\"row\"\n        style={{\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Text color=\"secondaryText\" size=\"sm\">\n          Network\n        </Text>\n        <Container center=\"y\" flex=\"row\" gap=\"3xs\">\n          <ChainIcon\n            chain={uiOptions.transaction.chain}\n            client={client}\n            size=\"xs\"\n          />\n          <ChainName\n            chain={uiOptions.transaction.chain}\n            client={client}\n            color=\"primaryText\"\n            short\n            size=\"sm\"\n            style={{\n              fontFamily: \"monospace\",\n            }}\n          />\n        </Container>\n      </Container>\n\n      <Spacer y=\"xs\" />\n\n      {/* Cost */}\n      {transactionDataQuery.data?.txCostDisplay && (\n        <>\n          <Container\n            flex=\"row\"\n            style={{\n              alignItems: \"center\",\n              justifyContent: \"space-between\",\n            }}\n          >\n            <Text color=\"secondaryText\" size=\"sm\">\n              Cost\n            </Text>\n            <Text\n              color=\"primaryText\"\n              size=\"sm\"\n              style={{\n                fontFamily: \"monospace\",\n              }}\n            >\n              {transactionDataQuery.data?.txCostDisplay}\n            </Text>\n          </Container>\n\n          <Spacer y=\"xs\" />\n        </>\n      )}\n\n      {/* Network Fees */}\n      {transactionDataQuery.data?.gasCostDisplay && (\n        <>\n          <Container\n            flex=\"row\"\n            style={{\n              alignItems: \"center\",\n              justifyContent: \"space-between\",\n            }}\n          >\n            <Text color=\"secondaryText\" size=\"sm\">\n              Network fees\n            </Text>\n            <Text\n              color=\"primaryText\"\n              size=\"sm\"\n              style={{\n                fontFamily: \"monospace\",\n              }}\n            >\n              {transactionDataQuery.data?.gasCostDisplay}\n            </Text>\n          </Container>\n\n          <Spacer y=\"md\" />\n        </>\n      )}\n\n      <Line />\n\n      <Spacer y=\"lg\" />\n\n      {/* Action Button */}\n      {activeAccount ? (\n        <Button\n          fullWidth\n          onClick={() => {\n            if (transactionDataQuery.data?.tokenInfo) {\n              onContinue(\n                transactionDataQuery.data.totalCost,\n                transactionDataQuery.data.tokenInfo,\n                getAddress(activeAccount.address),\n              );\n            }\n          }}\n          style={{\n            fontSize: fontSize.md,\n            padding: `${spacing.sm} ${spacing.md}`,\n          }}\n          variant=\"primary\"\n        >\n          {buttonLabel}\n        </Button>\n      ) : (\n        <ConnectButton\n          client={client}\n          connectButton={{\n            label: buttonLabel,\n          }}\n          theme={theme}\n          {...connectOptions}\n        />\n      )}\n\n      <Spacer y=\"md\" />\n\n      <PoweredByThirdweb />\n      <Spacer y=\"lg\" />\n    </WithHeader>\n  );\n}\n\nconst SkeletonHeader = (props: { theme: Theme }) => (\n  <Container\n    center=\"y\"\n    flex=\"row\"\n    gap=\"3xs\"\n    style={{\n      justifyContent: \"space-between\",\n    }}\n  >\n    {/* USD Value Skeleton */}\n    <div\n      style={{\n        backgroundColor: props.theme.colors.skeletonBg,\n        borderRadius: spacing.xs,\n        height: \"32px\",\n        width: \"80px\",\n      }}\n    />\n\n    {/* Function Name Skeleton */}\n    <div\n      style={{\n        backgroundColor: props.theme.colors.skeletonBg,\n        borderRadius: spacing.sm,\n        height: \"24px\",\n        width: \"120px\",\n      }}\n    />\n  </Container>\n);\n\n// Skeleton component for loading state\nconst SkeletonRow = ({\n  width = \"100%\",\n  theme,\n}: {\n  width?: string;\n  theme: Theme;\n}) => (\n  <Container\n    flex=\"row\"\n    style={{\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n    }}\n  >\n    <div\n      style={{\n        backgroundColor: theme.colors.skeletonBg,\n        borderRadius: spacing.xs,\n        height: \"16px\",\n        width: \"30%\",\n      }}\n    />\n    <div\n      style={{\n        backgroundColor: theme.colors.skeletonBg,\n        borderRadius: spacing.xs,\n        height: \"16px\",\n        width,\n      }}\n    />\n  </Container>\n);\n", "import { keyframes } from \"@emotion/react\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport type { PreparedTransaction } from \"../../../../transaction/prepare-transaction.js\";\nimport { shortenAddress } from \"../../../../utils/address.js\";\nimport { formatNumber } from \"../../../../utils/formatNumber.js\";\nimport { toTokens } from \"../../../../utils/units.js\";\nimport { hasSponsoredTransactionsEnabled } from \"../../../../wallets/smart/is-smart-wallet.js\";\nimport { useCustomTheme } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport {\n  fontSize,\n  iconSize,\n  radius,\n  spacing,\n} from \"../../../core/design-system/index.js\";\nimport { useActiveAccount } from \"../../../core/hooks/wallets/useActiveAccount.js\";\nimport { useActiveWallet } from \"../../../core/hooks/wallets/useActiveWallet.js\";\nimport { ErrorState } from \"../../wallets/shared/ErrorState.js\";\nimport { LoadingScreen } from \"../../wallets/shared/LoadingScreen.js\";\nimport { CoinsIcon } from \"../ConnectWallet/icons/CoinsIcon.js\";\nimport type { ConnectLocale } from \"../ConnectWallet/locale/types.js\";\nimport { useTransactionCostAndData } from \"../ConnectWallet/screens/Buy/main/useBuyTxStates.js\";\nimport { WalletRow } from \"../ConnectWallet/screens/Buy/swap/WalletRow.js\";\nimport { formatTokenBalance } from \"../ConnectWallet/screens/formatTokenBalance.js\";\nimport { isNativeToken } from \"../ConnectWallet/screens/nativeToken.js\";\nimport { Container, ModalHeader } from \"../components/basic.js\";\nimport { Button } from \"../components/buttons.js\";\nimport { CopyIcon } from \"../components/CopyIcon.js\";\nimport { QRCode } from \"../components/QRCode.js\";\nimport { Skeleton } from \"../components/Skeleton.js\";\nimport { Spacer } from \"../components/Spacer.js\";\nimport { Text } from \"../components/text.js\";\nimport { TokenSymbol } from \"../components/token/TokenSymbol.js\";\nimport { WalletImage } from \"../components/WalletImage.js\";\nimport { StyledButton, StyledDiv } from \"../design-system/elements.js\";\nimport { useClipboard } from \"../hooks/useCopyClipboard.js\";\n\nconst pulseAnimation = keyframes`\n0% {\n  opacity: 1;\n  transform: scale(0.5);\n}\n100% {\n  opacity: 0;\n  transform: scale(1.5);\n}\n`;\n\nconst WaitingBadge = /* @__PURE__ */ StyledDiv(() => {\n  const theme = useCustomTheme();\n  return {\n    \"&::before\": {\n      animation: `${pulseAnimation} 1s infinite`,\n      backgroundColor: theme.colors.accentText,\n      borderRadius: \"50%\",\n      content: '\"\"',\n      height: \"8px\",\n      width: \"8px\",\n    },\n    alignItems: \"center\",\n    backgroundColor: theme.colors.tertiaryBg,\n    border: `1px solid ${theme.colors.borderColor}`,\n    borderRadius: radius.lg,\n    color: theme.colors.secondaryText,\n    display: \"flex\",\n    fontSize: fontSize.sm,\n    fontWeight: 500,\n    gap: spacing.sm,\n    padding: `${spacing.md} ${spacing.sm}`,\n    position: \"relative\" as const,\n  };\n});\n\n/**\n *\n * @internal\n */\nexport function DepositScreen(props: {\n  onBack: (() => void) | undefined;\n  connectLocale: ConnectLocale;\n  client: ThirdwebClient;\n  tx: PreparedTransaction;\n  onDone: () => void;\n}) {\n  const activeWallet = useActiveWallet();\n  const activeAccount = useActiveAccount();\n  const address = activeAccount?.address;\n  const { hasCopied, onCopy } = useClipboard(address || \"\");\n  const { connectLocale, client } = props;\n  const locale = connectLocale.receiveFundsScreen;\n  const isTestnet = props.tx.chain.testnet === true;\n  const {\n    data: transactionCostAndData,\n    error: transactionCostAndDataError,\n    isFetching: transactionCostAndDataFetching,\n    refetch: transactionCostAndDataRefetch,\n  } = useTransactionCostAndData({\n    account: activeAccount,\n    refetchIntervalMs: 10_000,\n    supportedDestinations: [],\n    transaction: props.tx,\n  });\n  const theme = useCustomTheme();\n  const sponsoredTransactionsEnabled =\n    hasSponsoredTransactionsEnabled(activeWallet);\n\n  if (transactionCostAndDataError) {\n    return (\n      <Container\n        center=\"both\"\n        flex=\"row\"\n        fullHeight\n        style={{\n          minHeight: \"350px\",\n        }}\n      >\n        <ErrorState\n          onTryAgain={transactionCostAndDataRefetch}\n          title={transactionCostAndDataError?.message || \"Something went wrong\"}\n        />\n      </Container>\n    );\n  }\n\n  if (!transactionCostAndData) {\n    return <LoadingScreen />;\n  }\n\n  const totalCost =\n    isNativeToken(transactionCostAndData.token) && !sponsoredTransactionsEnabled\n      ? transactionCostAndData.transactionValueWei +\n        transactionCostAndData.gasCostWei\n      : transactionCostAndData.transactionValueWei;\n  const insufficientFunds =\n    transactionCostAndData.walletBalance.value < totalCost;\n  const requiredFunds = transactionCostAndData.walletBalance.value\n    ? totalCost - transactionCostAndData.walletBalance.value\n    : totalCost;\n\n  const openFaucetLink = () => {\n    window.open(\n      `https://thirdweb.com/${props.tx.chain.id}?utm_source=ub_deposit`,\n    );\n  };\n\n  return (\n    <Container p=\"lg\">\n      <ModalHeader onBack={props.onBack} title={\"Insufficient funds\"} />\n\n      <Spacer y=\"lg\" />\n\n      <Container flex=\"column\" gap=\"sm\">\n        {insufficientFunds && (\n          <div>\n            <Text center color=\"danger\" multiline size=\"xs\">\n              You need{\" \"}\n              {formatNumber(\n                Number.parseFloat(\n                  toTokens(requiredFunds, transactionCostAndData.decimals),\n                ),\n                5,\n              )}{\" \"}\n              {transactionCostAndData.token.symbol} to continue\n            </Text>\n          </div>\n        )}\n        <Container\n          flex=\"row\"\n          style={{\n            border: `1px solid ${theme.colors.borderColor}`,\n            borderBottom: \"none\",\n            borderRadius: `${radius.md} ${radius.md} 0 0`,\n            justifyContent: \"space-between\",\n            padding: spacing.sm,\n          }}\n        >\n          {activeAccount && (\n            <WalletRow\n              address={activeAccount?.address}\n              client={client}\n              iconSize=\"md\"\n            />\n          )}\n          {transactionCostAndData.walletBalance.value !== undefined &&\n          !transactionCostAndDataFetching ? (\n            <Container center=\"y\" flex=\"row\" gap=\"3xs\">\n              <Text color=\"secondaryText\" size=\"xs\" weight={500}>\n                {formatTokenBalance(\n                  transactionCostAndData.walletBalance,\n                  false,\n                )}\n              </Text>\n              <TokenSymbol\n                chain={props.tx.chain}\n                color=\"secondaryText\"\n                size=\"xs\"\n                token={transactionCostAndData.token}\n              />\n            </Container>\n          ) : (\n            <Container center=\"y\" flex=\"row\" gap=\"3xs\">\n              <Skeleton height={fontSize.xs} width=\"70px\" />\n            </Container>\n          )}\n        </Container>\n      </Container>\n\n      <WalletAddressContainer onClick={onCopy}>\n        <Container center=\"both\" expand flex=\"column\" gap=\"md\">\n          <Container center=\"x\" flex=\"row\">\n            <QRCode\n              QRIcon={\n                activeWallet && (\n                  <WalletImage\n                    client={client}\n                    id={activeWallet.id}\n                    size={iconSize.xl}\n                  />\n                )\n              }\n              qrCodeUri={address}\n              size={250}\n            />\n          </Container>\n          <Container center=\"x\" flex=\"row\" gap=\"xs\">\n            <Text\n              color=\"primaryText\"\n              size=\"md\"\n              style={{\n                fontFamily: \"monospace\",\n              }}\n            >\n              {address ? shortenAddress(address) : \"\"}\n            </Text>\n            <CopyIcon\n              hasCopied={hasCopied}\n              text={address || \"\"}\n              tip=\"Copy address\"\n            />\n          </Container>\n        </Container>\n      </WalletAddressContainer>\n\n      <Spacer y=\"md\" />\n\n      <Text\n        balance\n        center\n        className=\"receive_fund_screen_instruction\"\n        multiline\n        size=\"sm\"\n      >\n        {locale.instruction}\n      </Text>\n\n      <Spacer y=\"md\" />\n\n      {insufficientFunds ? (\n        <WaitingBadge>\n          Waiting for funds on {transactionCostAndData.chainMetadata.name}...\n        </WaitingBadge>\n      ) : (\n        <Button fullWidth onClick={props.onDone} variant=\"accent\">\n          Continue\n        </Button>\n      )}\n      {insufficientFunds && isTestnet && (\n        <>\n          <Spacer y=\"md\" />\n          <Button fullWidth onClick={openFaucetLink} variant=\"link\">\n            <Container center=\"x\" color=\"accentText\" flex=\"row\" gap=\"xs\">\n              <CoinsIcon size={iconSize.sm} />\n              <Text center color=\"accentText\" size=\"xs\" weight={500}>\n                Get testnet funds\n              </Text>\n            </Container>\n          </Button>\n        </>\n      )}\n    </Container>\n  );\n}\n\nconst WalletAddressContainer = /* @__PURE__ */ StyledButton((_) => {\n  const theme = useCustomTheme();\n  return {\n    \"&:hover\": {\n      borderColor: theme.colors.accentText,\n    },\n    all: \"unset\",\n    border: `1px solid ${theme.colors.borderColor}`,\n    borderRadius: `0 0 ${radius.md} ${radius.md}`,\n    boxSizing: \"border-box\",\n    cursor: \"pointer\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    padding: spacing.md,\n    transition: \"border-color 200ms ease\",\n    width: \"100%\",\n  };\n});\n", "import { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { isEcosystemWallet } from \"../../../../wallets/ecosystem/is-ecosystem-wallet.js\";\nimport type { AuthArgsType } from \"../../../../wallets/in-app/core/authentication/types.js\";\nimport type { Ecosystem } from \"../../../../wallets/in-app/core/wallet/types.js\";\nimport { linkProfile } from \"../../../../wallets/in-app/web/lib/auth/index.js\";\nimport { useConnectedWallets } from \"../../../core/hooks/wallets/useConnectedWallets.js\";\n\n/**\n * Links a web2 or web3 profile to the connected in-app or ecosystem account.\n * **When a profile is linked to the account, that profile can then be used to sign into the same account.**\n *\n * @example\n *\n * ### Linking a social profile\n *\n * ```jsx\n * import { useLinkProfile } from \"thirdweb/react\";\n *\n * const { mutate: linkProfile } = useLinkProfile();\n *\n * const onClick = () => {\n *   linkProfile({\n *     client,\n *     strategy: \"discord\", // or \"google\", \"x\", \"telegram\", etc\n *   });\n * };\n * ```\n *\n * ### Linking an email\n *\n * ```jsx\n * import { useLinkProfile } from \"thirdweb/react\";\n * import { preAuthenticate } from \"thirdweb/wallets\";\n *\n * const { mutate: linkProfile } = useLinkProfile();\n *\n * // send a verification email first\n * const sendEmail = async () => {\n *   const email = await preAuthenticate({\n *     client,\n *     strategy: \"email\",\n *     email: \"john.doe@example.com\",\n *   });\n * };\n *\n * // then link the profile with the verification code\n * const onClick = (code: string) => {\n *   linkProfile({\n *     client,\n *     strategy: \"email\",\n *     email: \"john.doe@example.com\",\n *     verificationCode: code,\n *   });\n * };\n * ```\n *\n * The same process can be used for phone and email, simply swap out the `strategy` parameter.\n *\n * ### Linking a wallet\n *\n * ```jsx\n * import { useLinkProfile } from \"thirdweb/react\";\n *\n * const { mutate: linkProfile } = useLinkProfile();\n *\n * const onClick = () => {\n *   linkProfile({\n *     client,\n *     strategy: \"wallet\",\n *     wallet: createWallet(\"io.metamask\"), // autocompletion for 400+ wallet ids\n *     chain: sepolia, // any chain works, needed for SIWE signature\n *   });\n * };\n * ```\n *\n * @wallet\n */\nexport function useLinkProfile() {\n  const wallets = useConnectedWallets();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async (options: AuthArgsType) => {\n      const ecosystemWallet = wallets.find((w) => isEcosystemWallet(w));\n      const ecosystem: Ecosystem | undefined = ecosystemWallet\n        ? {\n            id: ecosystemWallet.id,\n            partnerId: ecosystemWallet.getConfig()?.partnerId,\n          }\n        : undefined;\n      const optionsWithEcosystem = { ...options, ecosystem } as AuthArgsType;\n      return linkProfile(optionsWithEcosystem);\n    },\n    mutationKey: [\"profiles\"],\n    onSuccess() {\n      setTimeout(() => {\n        queryClient.invalidateQueries({ queryKey: [\"profiles\"] });\n      }, 500);\n    },\n  });\n}\n", "\"use client\";\nimport { useMemo } from \"react\";\nimport { webLocalStorage } from \"../../../utils/storage/webStorage.js\";\nimport {\n  type ConnectionManager,\n  createConnectionManager,\n} from \"../../../wallets/manager/index.js\";\nimport { ThirdwebProviderCore } from \"../../core/providers/thirdweb-provider.js\";\n\n/**\n * The ThirdwebProvider is component is a provider component that sets up the React Query client.\n * @param props - The props for the ThirdwebProvider\n * @example\n * ```jsx\n * import { ThirdwebProvider } from \"thirdweb/react\";\n *\n * function Example() {\n *  return (\n *    <ThirdwebProvider>\n *      <App />\n *    </ThirdwebProvider>\n *   )\n * }\n * ```\n * @component\n * @walletConnection\n */\nexport function ThirdwebProvider(\n  props: React.PropsWithChildren<{\n    connectionManager?: ConnectionManager;\n  }>,\n) {\n  const connectionManager = useMemo(\n    () => props.connectionManager || createConnectionManager(webLocalStorage),\n    [props.connectionManager],\n  );\n\n  return (\n    <ThirdwebProviderCore manager={connectionManager}>\n      {props.children}\n    </ThirdwebProviderCore>\n  );\n}\n", "\"use client\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { waitForReceipt } from \"../../../transaction/actions/wait-for-tx-receipt.js\";\nimport { isBaseTransactionOptions } from \"../../../transaction/types.js\";\nimport type { Hex } from \"../../../utils/encoding/hex.js\";\nimport { isObjectWithKeys } from \"../../../utils/type-guards.js\";\nimport type { ConnectionManager } from \"../../../wallets/manager/index.js\";\nimport { structuralSharing } from \"../utils/structuralSharing.js\";\nimport { ConnectionManagerCtx } from \"./connection-manager.js\";\nimport { invalidateWalletBalance } from \"./invalidateWalletBalance.js\";\nimport { SetRootElementContext } from \"./RootElementContext.js\";\n\n/**\n * @internal\n */\nexport function ThirdwebProviderCore(props: {\n  manager: ConnectionManager;\n  children: React.ReactNode;\n}) {\n  const [el, setEl] = useState<React.ReactNode>(null);\n  const [queryClient] = useState(\n    () =>\n      new QueryClient({\n        defaultOptions: {\n          mutations: {\n            onSettled: (data, _error, variables) => {\n              if (isBaseTransactionOptions(variables)) {\n                if (\n                  isObjectWithKeys(data, [\"transactionHash\"]) &&\n                  isObjectWithKeys(variables, [\"client\", \"chain\"])\n                ) {\n                  waitForReceipt({\n                    chain: variables.chain, // We know it exists from the if\n                    client: variables.client,\n                    transactionHash: data.transactionHash as Hex,\n                  })\n                    .catch((e) => {\n                      // swallow errors for receipts, but log\n                      console.error(\"[Transaction Error]\", e);\n                    })\n                    .then(() => {\n                      return Promise.all([\n                        queryClient.invalidateQueries({\n                          queryKey:\n                            // invalidate any readContract queries for this chainId:contractAddress\n                            [\n                              \"readContract\",\n                              variables.__contract?.chain.id ||\n                                variables.chain.id,\n                              variables.__contract?.address || variables.to,\n                            ] as const,\n                        }),\n                        invalidateWalletBalance(\n                          queryClient,\n                          variables.__contract?.chain.id || variables.chain.id,\n                        ),\n                      ]);\n                    });\n                }\n              }\n            },\n          },\n          queries: {\n            // With SSR, we usually want to set some default staleTime\n            // above 0 to avoid refetching immediately on the client\n            staleTime: 60 * 1000,\n            structuralSharing,\n          },\n        },\n      }),\n  );\n\n  return (\n    <ConnectionManagerCtx.Provider value={props.manager}>\n      <QueryClientProvider client={queryClient}>\n        <SetRootElementContext.Provider value={setEl}>\n          {props.children}\n        </SetRootElementContext.Provider>\n        {el}\n      </QueryClientProvider>\n    </ConnectionManagerCtx.Provider>\n  );\n}\n", "import { replaceEqualDeep } from \"@tanstack/react-query\";\n\n/** Forked from https://github.com/epoberezkin/fast-deep-equal */\n// biome-ignore lint/suspicious/noExplicitAny: This function by nature takes any object\nfunction deepEqual(a: any, b: any) {\n  if (a === b) return true;\n\n  if (a && b && typeof a === \"object\" && typeof b === \"object\") {\n    if (a.constructor !== b.constructor) return false;\n\n    let length: number;\n    let i: number;\n\n    if (Array.isArray(a) && Array.isArray(b)) {\n      length = a.length;\n      if (length !== b.length) return false;\n      for (i = length; i-- !== 0; ) if (!deepEqual(a[i], b[i])) return false;\n      return true;\n    }\n\n    if (a.valueOf !== Object.prototype.valueOf)\n      return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString)\n      return a.toString() === b.toString();\n\n    const keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0; )\n      // biome-ignore lint/style/noNonNullAssertion: We know its there\n      if (!Object.hasOwn(b, keys[i]!)) return false;\n\n    for (i = length; i-- !== 0; ) {\n      const key = keys[i];\n\n      if (key && !deepEqual(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  // biome-ignore lint/suspicious/noSelfCompare: TODO\n  return a !== a && b !== b;\n}\n\nexport function structuralSharing<T>(oldData: T | undefined, newData: T) {\n  if (deepEqual(oldData, newData)) {\n    return oldData as T;\n  }\n  return replaceEqualDeep(oldData, newData) as T;\n}\n", "\"use client\";\nimport { useEffect, useMemo } from \"react\";\nimport type { Chain } from \"../../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport { getDefaultWallets } from \"../../../../../wallets/defaultWallets.js\";\nimport type { Wallet } from \"../../../../../wallets/interfaces/wallet.js\";\nimport type { SmartWalletOptions } from \"../../../../../wallets/smart/types.js\";\nimport type { WalletId } from \"../../../../../wallets/wallet-types.js\";\nimport {\n  CustomThemeProvider,\n  useCustomTheme,\n} from \"../../../../core/design-system/CustomThemeProvider.js\";\nimport { radius } from \"../../../../core/design-system/index.js\";\nimport {\n  type SiweAuthOptions,\n  useSiweAuth,\n} from \"../../../../core/hooks/auth/useSiweAuth.js\";\nimport type { ConnectEmbedProps } from \"../../../../core/hooks/connection/ConnectEmbedProps.js\";\nimport { useActiveAccount } from \"../../../../core/hooks/wallets/useActiveAccount.js\";\nimport { useActiveWallet } from \"../../../../core/hooks/wallets/useActiveWallet.js\";\nimport { useIsAutoConnecting } from \"../../../../core/hooks/wallets/useIsAutoConnecting.js\";\nimport { useConnectionManager } from \"../../../../core/providers/connection-manager.js\";\nimport { WalletUIStatesProvider } from \"../../../providers/wallet-ui-states-provider.js\";\nimport { canFitWideModal } from \"../../../utils/canFitWideModal.js\";\nimport { usePreloadWalletProviders } from \"../../../utils/usePreloadWalletProviders.js\";\nimport { LoadingScreen } from \"../../../wallets/shared/LoadingScreen.js\";\nimport { AutoConnect } from \"../../AutoConnect/AutoConnect.js\";\nimport { DynamicHeight } from \"../../components/DynamicHeight.js\";\nimport { StyledDiv } from \"../../design-system/elements.js\";\nimport type { LocaleId } from \"../../types.js\";\nimport {\n  modalMaxWidthCompact,\n  modalMaxWidthWide,\n  reservedScreens,\n  wideModalMaxHeight,\n} from \"../constants.js\";\nimport { useConnectLocale } from \"../locale/getConnectLocale.js\";\nimport type { ConnectLocale } from \"../locale/types.js\";\nimport type { WelcomeScreen } from \"../screens/types.js\";\nimport { ConnectModalContent } from \"./ConnectModalContent.js\";\nimport { useSetupScreen } from \"./screen.js\";\n\n/**\n * An inline wallet connection component that allows to:\n *\n * - Connect to 500+ external wallets\n * - Connect with email, phone, passkey or socials\n * - Convert any wallet to a ERC4337 smart wallet for gasless transactions\n * - Sign in with ethereum (Auth)\n *\n * It renders the same UI as the [`ConnectButton`](https://portal.thirdweb.com/react/v5/ConnectButton) component's modal - but directly inline in the page instead of being in a modal.\n *\n * Once connected, the component does not render any UI. It only renders UI if wallet is not connected.\n *\n * @example\n *\n * ## Default setup\n *\n * ```tsx\n * import { createThirdwebClient } from \"thirdweb\";\n * import { ConnectEmbed } from \"thirdweb/react\";\n *\n * const client = createThirdwebClient({ clientId: \"YOUR_CLIENT_ID\" });\n *\n * <ConnectEmbed\n *    client={client}\n * />\n * ```\n *\n * [View all available config options](https://portal.thirdweb.com/references/typescript/v5/ConnectEmbedProps)\n *\n *  ## Customization options\n *\n * ### Customizing wallet options\n *\n * ```tsx\n * <ConnectEmbed\n *    client={client}\n *    wallets={[\n *      createWallet(\"io.metamask\"),\n *      createWallet(\"com.coinbase.wallet\"),\n *      createWallet(\"me.rainbow\"),\n *    ]}\n * />\n * ```\n *\n * [View all available wallets](https://portal.thirdweb.com/typescript/v5/supported-wallets)\n *\n *  ### Customizing the default chain to connect to\n *\n * ```tsx\n * import { base } from \"thirdweb/chains\";\n *\n * <ConnectEmbed\n *   client={client}\n *   chain={base}\n * />\n * ```\n *\n * ### Enabling Account Abstraction\n *\n * By passing the `accountAbstraction` prop, ALL connected wallets will be converted to smart accounts.\n * And by setting `sponsorGas` to `true`, all transactions done with those smart accounts will be sponsored.\n *\n * ```tsx\n * <ConnectEmbed\n * client={client}\n * accountAbstraction={{\n *   chain: sepolia,\n *   sponsorGas: true,\n * }}\n * />;\n * ```\n * Note that this prop doesn't affect ecosystem wallets. Ecosystem wallets will only be converted to smart accounts if the ecosystem owner has enabled account abstraction.\n *\n * ### Enabling sign in with ethereum (Auth)\n *\n * ```tsx\n * <ConnectEmbed\n * client={client}\n * auth={{\n *   isLoggedIn: async (address) => {\n *     console.log(\"checking if logged in!\", { address });\n *     return await isLoggedIn();\n *   },\n *   doLogin: async (params) => {\n *     console.log(\"logging in!\");\n *     await login(params);\n *   },\n *   getLoginPayload: async ({ address }) =>\n *     generatePayload({ address }),\n *   doLogout: async () => {\n *     console.log(\"logging out!\");\n *     await logout();\n *   },\n * }}\n * />;\n * ```\n *\n * ### Customizing the theme\n *\n * ```tsx\n * <ConnectEmbed\n *    client={client}\n *    theme=\"light\"\n * />\n * ```\n *\n * For more granular control, you can also pass a custom theme object:\n *\n * ```tsx\n * <ConnectEmbed\n *    client={client}\n *    theme={lightTheme({\n *      colors: {\n *        modalBg: \"red\",\n *      },\n *    })}\n * />\n * ```\n *\n * [View all available themes properties](https://portal.thirdweb.com/references/typescript/v5/Theme)\n *\n * ### Changing the display language\n *\n * ```tsx\n * <ConnectEmbed\n *    client={client}\n *    locale=\"ja_JP\"\n * />\n * ```\n *\n * [View all available locales](https://portal.thirdweb.com/references/typescript/v5/LocaleId)\n *\n * @param props -\n * The props for the `ConnectEmbed` component.\n *\n * Refer to the [`ConnectEmbedProps`](https://portal.thirdweb.com/references/typescript/v5/ConnectEmbedProps) type for more details\n *\n * @returns A JSX element that renders the <ConnectEmbed> component.\n * @component\n * @walletConnection\n */\nexport function ConnectEmbed(props: ConnectEmbedProps) {\n  const activeWallet = useActiveWallet();\n  const activeAccount = useActiveAccount();\n  const siweAuth = useSiweAuth(activeWallet, activeAccount, props.auth);\n  const show =\n    !activeAccount || (siweAuth.requiresAuth && !siweAuth.isLoggedIn);\n  const connectionManager = useConnectionManager();\n\n  // Add props.chain and props.chains to defined chains store\n  useEffect(() => {\n    if (props.chain) {\n      connectionManager.defineChains([props.chain]);\n    }\n  }, [props.chain, connectionManager]);\n\n  useEffect(() => {\n    if (props.chains) {\n      connectionManager.defineChains(props.chains);\n    }\n  }, [props.chains, connectionManager]);\n\n  const wallets = useMemo(\n    () =>\n      props.wallets ||\n      getDefaultWallets({\n        appMetadata: props.appMetadata,\n        chains: props.chains,\n      }),\n    [props.wallets, props.appMetadata, props.chains],\n  );\n  const localeId = props.locale || \"en_US\";\n  const localeQuery = useConnectLocale(localeId);\n\n  usePreloadWalletProviders({\n    wallets,\n  });\n\n  const modalSize = useMemo(() => {\n    return !canFitWideModal() || wallets.length === 1\n      ? \"compact\"\n      : props.modalSize || (\"compact\" as const);\n  }, [wallets.length, props.modalSize]);\n\n  const meta = useMemo(() => {\n    return {\n      privacyPolicyUrl: props.privacyPolicyUrl,\n      requireApproval: props.requireApproval,\n      showThirdwebBranding: props.showThirdwebBranding !== false,\n      termsOfServiceUrl: props.termsOfServiceUrl,\n      title: undefined,\n      titleIconUrl: undefined,\n    };\n  }, [\n    props.privacyPolicyUrl,\n    props.showThirdwebBranding,\n    props.termsOfServiceUrl,\n    props.requireApproval,\n  ]);\n\n  const preferredChain =\n    props.accountAbstraction?.chain || props.chain || props.chains?.[0];\n\n  const autoConnectComp = props.autoConnect !== false && (\n    <AutoConnect\n      accountAbstraction={props.accountAbstraction}\n      appMetadata={props.appMetadata}\n      chain={preferredChain}\n      client={props.client}\n      onConnect={props.onConnect}\n      siweAuth={siweAuth}\n      timeout={\n        typeof props.autoConnect === \"boolean\"\n          ? undefined\n          : props.autoConnect?.timeout\n      }\n      wallets={wallets}\n    />\n  );\n\n  if (show) {\n    if (!localeQuery.data) {\n      return (\n        <>\n          {autoConnectComp}\n          <CustomThemeProvider theme={props.theme}>\n            <EmbedContainer modalSize={modalSize}>\n              <LoadingScreen />\n            </EmbedContainer>\n          </CustomThemeProvider>\n        </>\n      );\n    }\n\n    return (\n      <WalletUIStatesProvider isOpen={true} theme={props.theme}>\n        <ConnectEmbedContent\n          accountAbstraction={props.accountAbstraction}\n          auth={props.auth}\n          chain={preferredChain}\n          chains={props.chains}\n          className={props.className}\n          client={props.client}\n          connectLocale={localeQuery.data}\n          header={props.header}\n          hiddenWallets={props.hiddenWallets}\n          localeId={props.locale || \"en_US\"}\n          meta={meta}\n          modalSize={modalSize}\n          onConnect={props.onConnect}\n          recommendedWallets={props.recommendedWallets}\n          showAllWallets={props.showAllWallets}\n          size={modalSize}\n          style={props.style}\n          walletConnect={props.walletConnect}\n          wallets={wallets}\n          welcomeScreen={props.welcomeScreen}\n        />\n        {autoConnectComp}\n      </WalletUIStatesProvider>\n    );\n  }\n\n  return <div>{autoConnectComp}</div>;\n}\n\n/**\n * @internal\n */\nconst ConnectEmbedContent = (props: {\n  modalSize?: \"compact\" | \"wide\";\n  className?: string;\n  style?: React.CSSProperties;\n  // ---\n  accountAbstraction: SmartWalletOptions | undefined;\n  auth: SiweAuthOptions | undefined;\n  chain: Chain | undefined;\n  chains: Chain[] | undefined;\n  client: ThirdwebClient;\n  connectLocale: ConnectLocale;\n  meta: {\n    title?: string;\n    titleIconUrl?: string;\n    showThirdwebBranding?: boolean;\n    termsOfServiceUrl?: string;\n    privacyPolicyUrl?: string;\n  };\n  size: \"compact\" | \"wide\";\n  header:\n    | {\n        title?: string;\n        titleIcon?: string;\n      }\n    | true\n    | undefined;\n  localeId: LocaleId;\n  onConnect: ((wallet: Wallet) => void) | undefined;\n  recommendedWallets: Wallet[] | undefined;\n  showAllWallets: boolean | undefined;\n  hiddenWallets: WalletId[] | undefined;\n  walletConnect:\n    | {\n        projectId?: string;\n      }\n    | undefined;\n  wallets: Wallet[];\n  welcomeScreen: WelcomeScreen | undefined;\n}) => {\n  // const requiresSignIn = false;\n  const screenSetup = useSetupScreen({\n    size: props.size,\n    wallets: props.wallets,\n    welcomeScreen: undefined,\n  });\n  const { setScreen, initialScreen, screen } = screenSetup;\n  const activeWallet = useActiveWallet();\n  const activeAccount = useActiveAccount();\n  const siweAuth = useSiweAuth(activeWallet, activeAccount, props.auth);\n\n  const isAutoConnecting = useIsAutoConnecting();\n\n  let content = null;\n\n  // if sign in is required but connect embed is showing the initial screen - change to sign in screen\n  useEffect(() => {\n    if (\n      siweAuth.requiresAuth &&\n      !siweAuth.isLoggedIn &&\n      activeAccount &&\n      screen === initialScreen\n    ) {\n      setScreen(reservedScreens.signIn);\n    }\n  }, [siweAuth, setScreen, activeAccount, screen, initialScreen]);\n\n  const modalSize = !canFitWideModal()\n    ? \"compact\"\n    : props.modalSize || (\"compact\" as const);\n\n  // show spinner on page load and during auto connecting a wallet\n  if (isAutoConnecting) {\n    content = <LoadingScreen />;\n  } else {\n    content = (\n      <ConnectModalContent\n        accountAbstraction={props.accountAbstraction}\n        auth={props.auth}\n        chain={props.chain}\n        chains={props.chains}\n        client={props.client}\n        connectLocale={props.connectLocale}\n        hideHeader={!props.header}\n        isOpen={true}\n        meta={{\n          ...props.meta,\n          title:\n            typeof props.header === \"object\" ? props.header.title : undefined,\n          titleIconUrl:\n            typeof props.header === \"object\"\n              ? props.header.titleIcon\n              : undefined,\n        }}\n        modalHeader={undefined}\n        onClose={() => {\n          setScreen(initialScreen);\n        }}\n        onConnect={props.onConnect}\n        recommendedWallets={props.recommendedWallets}\n        screenSetup={screenSetup}\n        setModalVisibility={() => {\n          // no op\n        }}\n        shouldSetActive={true}\n        showAllWallets={props.showAllWallets}\n        size={props.size}\n        walletConnect={props.walletConnect}\n        walletIdsToHide={props.hiddenWallets}\n        wallets={props.wallets}\n        welcomeScreen={props.welcomeScreen}\n      />\n    );\n  }\n\n  return (\n    <EmbedContainer\n      className={props.className}\n      modalSize={modalSize}\n      style={props.style}\n    >\n      {modalSize === \"wide\" ? (\n        content\n      ) : (\n        <DynamicHeight> {content} </DynamicHeight>\n      )}\n    </EmbedContainer>\n  );\n};\n\nexport const EmbedContainer = /* @__PURE__ */ StyledDiv<{\n  modalSize: \"compact\" | \"wide\";\n}>((props) => {\n  const { modalSize } = props;\n  const theme = useCustomTheme();\n  return {\n    \"& *\": {\n      boxSizing: \"border-box\",\n    },\n    \"& *::selection\": {\n      backgroundColor: theme.colors.selectedTextBg,\n      color: theme.colors.selectedTextColor,\n    },\n    background: theme.colors.modalBg,\n    border: `1px solid ${theme.colors.borderColor}`,\n    borderRadius: radius.xl,\n    boxSizing: \"border-box\",\n    color: theme.colors.primaryText,\n    fontFamily: theme.fontFamily,\n    height: modalSize === \"compact\" ? \"auto\" : wideModalMaxHeight,\n    lineHeight: \"normal\",\n    overflow: \"hidden\",\n    position: \"relative\",\n    width: modalSize === \"compact\" ? modalMaxWidthCompact : modalMaxWidthWide,\n  };\n});\n", "import { useQuery } from \"@tanstack/react-query\";\nimport { trackPayEvent } from \"../../../../analytics/track/pay.js\";\nimport type { Chain } from \"../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport { iconSize } from \"../../../core/design-system/index.js\";\nimport { useChainMetadata } from \"../../../core/hooks/others/useChainQuery.js\";\nimport { AccentFailIcon } from \"../ConnectWallet/icons/AccentFailIcon.js\";\nimport { Container } from \"../components/basic.js\";\nimport { Spacer } from \"../components/Spacer.js\";\nimport { Text } from \"../components/text.js\";\n\nexport interface UnsupportedTokenScreenProps {\n  /**\n   * The chain the token is on\n   */\n  chain: Chain;\n  client: ThirdwebClient;\n  tokenAddress?: string;\n}\n\n/**\n * Screen displayed when a specified token is not supported by the Bridge API\n * @internal\n */\nexport function UnsupportedTokenScreen(props: UnsupportedTokenScreenProps) {\n  const { chain, tokenAddress, client } = props;\n\n  const { data: chainMetadata } = useChainMetadata(chain);\n\n  useQuery({\n    queryFn: () => {\n      trackPayEvent({\n        chainId: chain.id,\n        client,\n        event: \"ub:ui:unsupported_token\",\n        fromToken: tokenAddress,\n      });\n    },\n    queryKey: [\"unsupported_token\"],\n  });\n\n  if (chainMetadata?.testnet) {\n    return (\n      <Container\n        animate=\"fadein\"\n        center=\"both\"\n        flex=\"column\"\n        style={{ minHeight: \"350px\" }}\n      >\n        {/* Error Icon */}\n        <AccentFailIcon size={iconSize[\"3xl\"]} />\n        <Spacer y=\"lg\" />\n\n        {/* Title */}\n        <Text center color=\"primaryText\" size=\"lg\" weight={600}>\n          Testnet Not Supported\n        </Text>\n        <Spacer y=\"sm\" />\n\n        {/* Description */}\n        <Text\n          center\n          color=\"secondaryText\"\n          size=\"sm\"\n          style={{ lineHeight: 1.5, maxWidth: \"280px\" }}\n        >\n          The Universal Bridge does not support testnets at this time.\n        </Text>\n      </Container>\n    );\n  }\n\n  return (\n    <Container\n      animate=\"fadein\"\n      center=\"both\"\n      flex=\"column\"\n      style={{ minHeight: \"350px\" }}\n    >\n      {/* Error Icon */}\n      <AccentFailIcon size={iconSize[\"3xl\"]} />\n      <Spacer y=\"lg\" />\n\n      {/* Title */}\n      <Text center color=\"primaryText\" size=\"lg\" weight={600}>\n        Token Not Supported\n      </Text>\n      <Spacer y=\"sm\" />\n\n      {/* Description */}\n      <Text\n        center\n        color=\"secondaryText\"\n        size=\"sm\"\n        style={{ lineHeight: 1.5, maxWidth: \"280px\" }}\n      >\n        This token or chain is not supported by the Universal Bridge.\n      </Text>\n    </Container>\n  );\n}\n", "\"use client\";\n\nimport { useQuery } from \"@tanstack/react-query\";\nimport { trackPayEvent } from \"../../../../analytics/track/pay.js\";\nimport type { Token } from \"../../../../bridge/index.js\";\nimport type { Chain } from \"../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../constants/addresses.js\";\nimport { getToken } from \"../../../../pay/convert/get-token.js\";\nimport {\n  type Address,\n  checksumAddress,\n  isAddress,\n} from \"../../../../utils/address.js\";\nimport { stringify } from \"../../../../utils/json.js\";\nimport type { Wallet } from \"../../../../wallets/interfaces/wallet.js\";\nimport type { SmartWalletOptions } from \"../../../../wallets/smart/types.js\";\nimport type { AppMetadata } from \"../../../../wallets/types.js\";\nimport type { WalletId } from \"../../../../wallets/wallet-types.js\";\nimport { CustomThemeProvider } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport type { Theme } from \"../../../core/design-system/index.js\";\nimport type { SiweAuthOptions } from \"../../../core/hooks/auth/useSiweAuth.js\";\nimport type { ConnectButton_connectModalOptions } from \"../../../core/hooks/connection/ConnectButtonProps.js\";\nimport type { SupportedTokens } from \"../../../core/utils/defaultTokens.js\";\nimport { useConnectLocale } from \"../ConnectWallet/locale/getConnectLocale.js\";\nimport { EmbedContainer } from \"../ConnectWallet/Modal/ConnectEmbed.js\";\nimport { DynamicHeight } from \"../components/DynamicHeight.js\";\nimport { Spinner } from \"../components/Spinner.js\";\nimport type { LocaleId } from \"../types.js\";\nimport { BridgeOrchestrator, type UIOptions } from \"./BridgeOrchestrator.js\";\nimport { UnsupportedTokenScreen } from \"./UnsupportedTokenScreen.js\";\n\nexport type BuyWidgetProps = {\n  supportedTokens?: SupportedTokens;\n  /**\n   * A client is the entry point to the thirdweb SDK.\n   * It is required for all other actions.\n   * You can create a client using the `createThirdwebClient` function. Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   *\n   * You must provide a `clientId` or `secretKey` in order to initialize a client. Pass `clientId` if you want for client-side usage and `secretKey` for server-side usage.\n   *\n   * ```tsx\n   * import { createThirdwebClient } from \"thirdweb\";\n   *\n   * const client = createThirdwebClient({\n   *  clientId: \"<your_client_id>\",\n   * })\n   * ```\n   */\n  client: ThirdwebClient;\n  /**\n   * By default - ConnectButton UI uses the `en-US` locale for english language users.\n   *\n   * You can customize the language used in the ConnectButton UI by setting the `locale` prop.\n   *\n   * Refer to the [`LocaleId`](https://portal.thirdweb.com/references/typescript/v5/LocaleId) type for supported locales.\n   */\n  locale?: LocaleId;\n  /**\n   * Set the theme for the `BuyWidget` component. By default it is set to `\"dark\"`\n   *\n   * theme can be set to either `\"dark\"`, `\"light\"` or a custom theme object.\n   * You can also import [`lightTheme`](https://portal.thirdweb.com/references/typescript/v5/lightTheme)\n   * or [`darkTheme`](https://portal.thirdweb.com/references/typescript/v5/darkTheme)\n   * functions from `thirdweb/react` to use the default themes as base and overrides parts of it.\n   * @example\n   * ```ts\n   * import { lightTheme } from \"thirdweb/react\";\n   *\n   * const customTheme = lightTheme({\n   *  colors: {\n   *    modalBg: 'red'\n   *  }\n   * })\n   *\n   * function Example() {\n   *  return <BuyWidget client={client} theme={customTheme} />\n   * }\n   * ```\n   */\n  theme?: \"light\" | \"dark\" | Theme;\n\n  /**\n   * Customize the options for \"Connect\" Button showing in the BuyWidget UI when the user is not connected to a wallet.\n   *\n   * Refer to the [`BuyWidgetConnectOptions`](https://portal.thirdweb.com/references/typescript/v5/BuyWidgetConnectOptions) type for more details.\n   */\n  connectOptions?: BuyWidgetConnectOptions;\n\n  /**\n   * All wallet IDs included in this array will be hidden from wallet selection when connected.\n   */\n  hiddenWallets?: WalletId[];\n\n  /**\n   * The wallet that should be pre-selected in the BuyWidget UI.\n   */\n  activeWallet?: Wallet;\n\n  style?: React.CSSProperties;\n\n  className?: string;\n\n  /**\n   * The chain the accepted token is on.\n   */\n  chain: Chain;\n\n  /**\n   * Address of the token to buy. Leave undefined for the native token, or use 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE.\n   */\n  tokenAddress?: Address;\n\n  /**\n   * The amount to buy **(as a decimal string)**, e.g. \"1.5\" for 1.5 tokens.\n   */\n  amount: string;\n\n  /**\n   * The title to display in the widget.\n   */\n  title?: string;\n\n  /**\n   * The description to display in the widget.\n   */\n  description?: string;\n\n  /**\n   * The image to display in the widget.\n   */\n  image?: string;\n\n  /**\n   * Preset fiat amounts to display in the UI. Defaults to [5, 10, 20].\n   */\n  presetOptions?: [number, number, number];\n\n  /**\n   * Arbitrary data to be included in the returned status and webhook events.\n   */\n  purchaseData?: Record<string, unknown>;\n\n  /**\n   * Callback triggered when the purchase is successful.\n   */\n  onSuccess?: () => void;\n\n  /**\n   * Callback triggered when the purchase encounters an error.\n   */\n  onError?: (error: Error) => void;\n\n  /**\n   * Callback triggered when the user cancels the purchase.\n   */\n  onCancel?: () => void;\n\n  /**\n   * @hidden\n   */\n  paymentLinkId?: string;\n\n  /**\n   * Allowed payment methods\n   * @default [\"crypto\", \"card\"]\n   */\n  paymentMethods?: (\"crypto\" | \"card\")[];\n};\n\n// Enhanced UIOptions to handle unsupported token state\ntype UIOptionsResult =\n  | { type: \"success\"; data: UIOptions }\n  | {\n      type: \"indexing_token\";\n      token: Token;\n      chain: Chain;\n    }\n  | {\n      type: \"unsupported_token\";\n      tokenAddress: Address;\n      chain: Chain;\n    };\n\n/**\n * Widget is a prebuilt UI for purchasing a specific token.\n *\n * @param props - Props of type [`BuyWidgetProps`](https://portal.thirdweb.com/references/typescript/v5/BuyWidgetProps) to configure the BuyWidget component.\n *\n * @example\n * ### Basic usage\n *\n * The `BuyWidget` component requires `client`, `chain`, and `amount` props to function.\n *\n * ```tsx\n * import { ethereum } from \"thirdweb/chains\";\n *\n * <BuyWidget\n *   client={client}\n *   chain={ethereum}\n *   amount=\"0.1\"\n * />\n * ```\n *\n * ### Buy a specific token\n *\n * You can specify a token to purchase by passing the `tokenAddress` prop.\n *\n * ```tsx\n * <BuyWidget\n *   client={client}\n *   chain={ethereum}\n *   amount=\"100\"\n *   tokenAddress=\"0xA0b86a33E6417E4df2057B2d3C6d9F7cc11b0a70\"\n * />\n * ```\n *\n * ### Customize the UI\n *\n * You can customize the UI of the `BuyWidget` component by passing a custom theme object to the `theme` prop.\n *\n * ```tsx\n * <BuyWidget\n *   client={client}\n *   chain={ethereum}\n *   amount=\"0.1\"\n *   theme={darkTheme({\n *     colors: {\n *       modalBg: \"red\",\n *     },\n *   })}\n * />\n * ```\n *\n * Refer to the [`Theme`](https://portal.thirdweb.com/references/typescript/v5/Theme) type for more details.\n *\n * ### Update the Title\n *\n * You can update the title of the widget by passing a `title` prop to the `BuyWidget` component.\n *\n * ```tsx\n * <BuyWidget\n *   client={client}\n *   chain={ethereum}\n *   amount=\"0.1\"\n *   title=\"Buy ETH\"\n * />\n * ```\n *\n * ### Configure the wallet connection\n *\n * You can customize the wallet connection flow by passing a `connectOptions` object to the `BuyWidget` component.\n *\n * ```tsx\n * <BuyWidget\n *   client={client}\n *   chain={ethereum}\n *   amount=\"0.1\"\n *   connectOptions={{\n *     connectModal: {\n *       size: 'compact',\n *       title: \"Sign in\",\n *     }\n *   }}\n * />\n * ```\n *\n * Refer to the [`BuyWidgetConnectOptions`](https://portal.thirdweb.com/references/typescript/v5/BuyWidgetConnectOptions) type for more details.\n *\n * @bridge Widgets\n */\nexport function BuyWidget(props: BuyWidgetProps) {\n  const localeQuery = useConnectLocale(props.locale || \"en_US\");\n  const theme = props.theme || \"dark\";\n\n  useQuery({\n    queryFn: () => {\n      trackPayEvent({\n        client: props.client,\n        event: \"ub:ui:buy_widget:render\",\n        toChainId: props.chain.id,\n        toToken: props.tokenAddress,\n      });\n    },\n    queryKey: [\"buy_widget:render\"],\n  });\n\n  const bridgeDataQuery = useQuery({\n    queryFn: async (): Promise<UIOptionsResult> => {\n      if (\n        !props.tokenAddress ||\n        (isAddress(props.tokenAddress) &&\n          checksumAddress(props.tokenAddress) ===\n            checksumAddress(NATIVE_TOKEN_ADDRESS))\n      ) {\n        const ETH = await getToken(\n          props.client,\n          NATIVE_TOKEN_ADDRESS,\n          props.chain.id,\n        );\n        return {\n          data: {\n            destinationToken: ETH,\n            initialAmount: props.amount,\n            metadata: {\n              description: props.description,\n              image: props.image,\n              title: props.title,\n            },\n            mode: \"fund_wallet\",\n          },\n          type: \"success\",\n        };\n      }\n\n      const token = await getToken(\n        props.client,\n        props.tokenAddress,\n        props.chain.id,\n      ).catch((err) => {\n        err.message.includes(\"not supported\") ? undefined : Promise.reject(err);\n      });\n      if (!token) {\n        return {\n          chain: props.chain,\n          tokenAddress: props.tokenAddress,\n          type: \"unsupported_token\",\n        };\n      }\n      return {\n        data: {\n          destinationToken: token,\n          initialAmount: props.amount,\n          metadata: {\n            description: props.description,\n            image: props.image,\n            title: props.title,\n          },\n          mode: \"fund_wallet\",\n        },\n        type: \"success\",\n      };\n    },\n    queryKey: [\"bridgeData\", stringify(props)],\n  });\n\n  let content = null;\n  if (!localeQuery.data || bridgeDataQuery.isLoading) {\n    content = (\n      <div\n        style={{\n          alignItems: \"center\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          minHeight: \"350px\",\n        }}\n      >\n        <Spinner color=\"secondaryText\" size=\"xl\" />\n      </div>\n    );\n  } else if (bridgeDataQuery.data?.type === \"unsupported_token\") {\n    // Show unsupported token screen\n    content = (\n      <UnsupportedTokenScreen\n        chain={bridgeDataQuery.data.chain}\n        client={props.client}\n        tokenAddress={props.tokenAddress}\n      />\n    );\n  } else if (bridgeDataQuery.data?.type === \"success\") {\n    // Show normal bridge orchestrator\n    content = (\n      <BridgeOrchestrator\n        client={props.client}\n        connectLocale={localeQuery.data}\n        connectOptions={props.connectOptions}\n        onCancel={() => {\n          props.onCancel?.();\n        }}\n        onComplete={() => {\n          props.onSuccess?.();\n        }}\n        onError={(err: Error) => {\n          props.onError?.(err);\n        }}\n        paymentLinkId={props.paymentLinkId}\n        paymentMethods={props.paymentMethods}\n        presetOptions={props.presetOptions}\n        purchaseData={props.purchaseData}\n        receiverAddress={undefined}\n        uiOptions={bridgeDataQuery.data.data}\n      />\n    );\n  }\n\n  return (\n    <CustomThemeProvider theme={theme}>\n      <EmbedContainer\n        className={props.className}\n        modalSize=\"compact\"\n        style={props.style}\n      >\n        <DynamicHeight>{content}</DynamicHeight>\n      </EmbedContainer>\n    </CustomThemeProvider>\n  );\n}\n\n/**\n * Connection options for the `BuyWidget` component\n *\n * @example\n * ```tsx\n * <BuyWidget client={client} connectOptions={{\n *    connectModal: {\n *      size: 'compact',\n *      title: \"Sign in\",\n *    }\n *  }}\n * />\n * ```\n */\ntype BuyWidgetConnectOptions = {\n  /**\n   * Configurations for the `ConnectButton`'s Modal that is shown for connecting a wallet\n   * Refer to the [`ConnectButton_connectModalOptions`](https://portal.thirdweb.com/references/typescript/v5/ConnectButton_connectModalOptions) type for more details\n   */\n  connectModal?: ConnectButton_connectModalOptions;\n\n  /**\n   * Configure options for WalletConnect\n   *\n   * By default WalletConnect uses the thirdweb's default project id.\n   * Setting your own project id is recommended.\n   *\n   * You can create a project id by signing up on [walletconnect.com](https://walletconnect.com/)\n   */\n  walletConnect?: {\n    projectId?: string;\n  };\n\n  /**\n   * Enable Account abstraction for all wallets. This will connect to the users's smart account based on the connected personal wallet and the given options.\n   *\n   * This allows to sponsor gas fees for your user's transaction using the thirdweb account abstraction infrastructure.\n   *\n   */\n  accountAbstraction?: SmartWalletOptions;\n\n  /**\n   * Array of wallets to show in Connect Modal. If not provided, default wallets will be used.\n   */\n  wallets?: Wallet[];\n  /**\n   * When the user has connected their wallet to your site, this configuration determines whether or not you want to automatically connect to the last connected wallet when user visits your site again in the future.\n   *\n   * By default it is set to `{ timeout: 15000 }` meaning that autoConnect is enabled and if the autoConnection does not succeed within 15 seconds, it will be cancelled.\n   *\n   * If you want to disable autoConnect, set this prop to `false`.\n   *\n   * If you want to customize the timeout, you can assign an object with a `timeout` key to this prop.\n   * ```\n   */\n  autoConnect?:\n    | {\n        timeout: number;\n      }\n    | boolean;\n\n  /**\n   * Metadata of the app that will be passed to connected wallet. Setting this is highly recommended.\n   */\n  appMetadata?: AppMetadata;\n\n  /**\n   * The [`Chain`](https://portal.thirdweb.com/references/typescript/v5/Chain) object of the blockchain you want the wallet to connect to\n   *\n   * If a `chain` is not specified, Wallet will be connected to whatever is the default set in the wallet.\n   *\n   * If a `chain` is specified, Wallet will be prompted to switch to given chain after connection if it is not already connected to it.\n   * This ensures that the wallet is connected to the correct blockchain before interacting with your app.\n   *\n   * The `ConnectButton` also shows a \"Switch Network\" button until the wallet is connected to the specified chain. Clicking on the \"Switch Network\" button triggers the wallet to switch to the specified chain.\n   *\n   * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.\n   * At minimum, you need to pass the `id` of the blockchain to `defineChain` function to create a `Chain` object.\n   * ```\n   */\n  chain?: Chain;\n\n  /**\n   * Array of chains that your app supports.\n   *\n   * This is only relevant if your app is a multi-chain app and works across multiple blockchains.\n   * If your app only works on a single blockchain, you should only specify the `chain` prop.\n   *\n   * Given list of chains will used in various ways:\n   * - They will be displayed in the network selector in the `ConnectButton`'s details modal post connection\n   * - They will be sent to wallet at the time of connection if the wallet supports requesting multiple chains ( example: WalletConnect ) so that users can switch between the chains post connection easily\n   *\n   * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.\n   * At minimum, you need to pass the `id` of the blockchain to `defineChain` function to create a `Chain` object.\n   *\n   * ```tsx\n   * import { defineChain } from \"thirdweb/react\";\n   *\n   * const polygon = defineChain({\n   *   id: 137,\n   * });\n   * ```\n   */\n  chains?: Chain[];\n\n  /**\n   * Wallets to show as recommended in the `ConnectButton`'s Modal\n   */\n  recommendedWallets?: Wallet[];\n\n  /**\n   * By default, ConnectButton modal shows a \"All Wallets\" button that shows a list of 500+ wallets.\n   *\n   * You can disable this button by setting `showAllWallets` prop to `false`\n   */\n  showAllWallets?: boolean;\n\n  /**\n   * Enable SIWE (Sign in with Ethererum) by passing an object of type `SiweAuthOptions` to\n   * enforce the users to sign a message after connecting their wallet to authenticate themselves.\n   *\n   * Refer to the [`SiweAuthOptions`](https://portal.thirdweb.com/references/typescript/v5/SiweAuthOptions) for more details\n   */\n  auth?: SiweAuthOptions;\n};\n", "\"use client\";\n\nimport { useQuery } from \"@tanstack/react-query\";\nimport { trackPayEvent } from \"../../../../analytics/track/pay.js\";\nimport type { Token } from \"../../../../bridge/index.js\";\nimport type { Chain } from \"../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../constants/addresses.js\";\nimport { getToken } from \"../../../../pay/convert/get-token.js\";\nimport { type Address, checksumAddress } from \"../../../../utils/address.js\";\nimport { stringify } from \"../../../../utils/json.js\";\nimport type { Wallet } from \"../../../../wallets/interfaces/wallet.js\";\nimport type { SmartWalletOptions } from \"../../../../wallets/smart/types.js\";\nimport type { AppMetadata } from \"../../../../wallets/types.js\";\nimport type { WalletId } from \"../../../../wallets/wallet-types.js\";\nimport { CustomThemeProvider } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport type { Theme } from \"../../../core/design-system/index.js\";\nimport type { SiweAuthOptions } from \"../../../core/hooks/auth/useSiweAuth.js\";\nimport type { ConnectButton_connectModalOptions } from \"../../../core/hooks/connection/ConnectButtonProps.js\";\nimport type { SupportedTokens } from \"../../../core/utils/defaultTokens.js\";\nimport { useConnectLocale } from \"../ConnectWallet/locale/getConnectLocale.js\";\nimport { EmbedContainer } from \"../ConnectWallet/Modal/ConnectEmbed.js\";\nimport { DynamicHeight } from \"../components/DynamicHeight.js\";\nimport { Spinner } from \"../components/Spinner.js\";\nimport type { LocaleId } from \"../types.js\";\nimport { BridgeOrchestrator, type UIOptions } from \"./BridgeOrchestrator.js\";\nimport { UnsupportedTokenScreen } from \"./UnsupportedTokenScreen.js\";\n\nexport type CheckoutWidgetProps = {\n  supportedTokens?: SupportedTokens;\n  /**\n   * A client is the entry point to the thirdweb SDK.\n   * It is required for all other actions.\n   * You can create a client using the `createThirdwebClient` function. Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   *\n   * You must provide a `clientId` or `secretKey` in order to initialize a client. Pass `clientId` if you want for client-side usage and `secretKey` for server-side usage.\n   *\n   * ```tsx\n   * import { createThirdwebClient } from \"thirdweb\";\n   *\n   * const client = createThirdwebClient({\n   *  clientId: \"<your_client_id>\",\n   * })\n   * ```\n   */\n  client: ThirdwebClient;\n  /**\n   * By default - ConnectButton UI uses the `en-US` locale for english language users.\n   *\n   * You can customize the language used in the ConnectButton UI by setting the `locale` prop.\n   *\n   * Refer to the [`LocaleId`](https://portal.thirdweb.com/references/typescript/v5/LocaleId) type for supported locales.\n   */\n  locale?: LocaleId;\n  /**\n   * Set the theme for the `CheckoutWidget` component. By default it is set to `\"dark\"`\n   *\n   * theme can be set to either `\"dark\"`, `\"light\"` or a custom theme object.\n   * You can also import [`lightTheme`](https://portal.thirdweb.com/references/typescript/v5/lightTheme)\n   * or [`darkTheme`](https://portal.thirdweb.com/references/typescript/v5/darkTheme)\n   * functions from `thirdweb/react` to use the default themes as base and overrides parts of it.\n   * @example\n   * ```ts\n   * import { lightTheme } from \"thirdweb/react\";\n   *\n   * const customTheme = lightTheme({\n   *  colors: {\n   *    modalBg: 'red'\n   *  }\n   * })\n   *\n   * function Example() {\n   *  return <CheckoutWidget client={client} theme={customTheme} />\n   * }\n   * ```\n   */\n  theme?: \"light\" | \"dark\" | Theme;\n\n  /**\n   * Customize the options for \"Connect\" Button showing in the CheckoutWidget UI when the user is not connected to a wallet.\n   *\n   * Refer to the [`CheckoutWidgetConnectOptions`](https://portal.thirdweb.com/references/typescript/v5/CheckoutWidgetConnectOptions) type for more details.\n   */\n  connectOptions?: CheckoutWidgetConnectOptions;\n\n  /**\n   * All wallet IDs included in this array will be hidden from wallet selection when connected.\n   */\n  hiddenWallets?: WalletId[];\n\n  /**\n   * The wallet that should be pre-selected in the CheckoutWidget UI.\n   */\n  activeWallet?: Wallet;\n\n  style?: React.CSSProperties;\n\n  className?: string;\n\n  /**\n   * The chain the accepted token is on.\n   */\n  chain: Chain;\n\n  /**\n   * Address of the token to accept as payment. Leave undefined for the native token, or use 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE.\n   */\n  tokenAddress?: Address;\n\n  /**\n   * The price of the item **(as a decimal string)**, e.g. \"1.5\" for 1.5 tokens.\n   */\n  amount: string;\n\n  /**\n   * The wallet address or ENS funds will be paid to.\n   */\n  seller: Address;\n\n  /**\n   * The product name.\n   */\n  name?: string;\n\n  /**\n   * The product description.\n   */\n  description?: string;\n\n  /**\n   * The product image URL.\n   */\n  image?: string;\n\n  /**\n   * Whether the user or the seller pays the protocol fees. Defaults to the user.\n   */\n  feePayer?: \"user\" | \"seller\";\n\n  /**\n   * Preset fiat amounts to display in the UI. Defaults to [5, 10, 20].\n   */\n  presetOptions?: [number, number, number];\n\n  /**\n   * Arbitrary data to be included in the returned status and webhook events.\n   */\n  purchaseData?: Record<string, unknown>;\n\n  /**\n   * Callback triggered when the purchase is successful.\n   */\n  onSuccess?: () => void;\n\n  /**\n   * Callback triggered when the purchase encounters an error.\n   */\n  onError?: (error: Error) => void;\n\n  /**\n   * Callback triggered when the user cancels the purchase.\n   */\n  onCancel?: () => void;\n\n  /**\n   * @hidden\n   */\n  paymentLinkId?: string;\n\n  /**\n   * Allowed payment methods\n   * @default [\"crypto\", \"card\"]\n   */\n  paymentMethods?: (\"crypto\" | \"card\")[];\n};\n\n// Enhanced UIOptions to handle unsupported token state\ntype UIOptionsResult =\n  | { type: \"success\"; data: UIOptions }\n  | {\n      type: \"indexing_token\";\n      token: Token;\n      chain: Chain;\n    }\n  | {\n      type: \"unsupported_token\";\n      tokenAddress: Address;\n      chain: Chain;\n    };\n\n/**\n * Widget a prebuilt UI for purchasing a specific token.\n *\n * @param props - Props of type [`CheckoutWidgetProps`](https://portal.thirdweb.com/references/typescript/v5/CheckoutWidgetProps) to configure the CheckoutWidget component.\n *\n * @example\n * ### Default configuration\n *\n * By default, the `CheckoutWidget` component will allows users to fund their wallets with crypto or fiat on any of the supported chains..\n *\n * ```tsx\n * <CheckoutWidget\n *   client={client}\n *  />\n * ```\n *\n * ### Customize the UI\n *\n * You can customize the UI of the `CheckoutWidget` component by passing a custom theme object to the `theme` prop.\n *\n * ```tsx\n * <CheckoutWidget\n *   client={client}\n *   theme={darkTheme({\n *     colors: {\n *       modalBg: \"red\",\n *     },\n *   })}\n * />\n * ```\n *\n * Refer to the [`Theme`](https://portal.thirdweb.com/references/typescript/v5/Theme) type for more details.\n *\n * ### Update the Title\n *\n * You can update the title of the widget by passing a `title` prop to the `CheckoutWidget` component.\n *\n * ```tsx\n * <CheckoutWidget\n *   client={client}\n *   title=\"Checkout ETH\"\n * />\n * ```\n *\n * ### Configure the wallet connection\n *\n * You can customize the wallet connection flow by passing a `connectOptions` object to the `CheckoutWidget` component.\n *\n * ```tsx\n * <CheckoutWidget\n *   client={client}\n *   connectOptions={{\n *     connectModal: {\n *       size: 'compact',\n *       title: \"Sign in\",\n *     }\n *   }}\n * />\n * ```\n *\n * Refer to the [`CheckoutWidgetConnectOptions`](https://portal.thirdweb.com/references/typescript/v5/CheckoutWidgetConnectOptions) type for more details.\n *\n * @bridge Widgets\n */\nexport function CheckoutWidget(props: CheckoutWidgetProps) {\n  const localeQuery = useConnectLocale(props.locale || \"en_US\");\n  const theme = props.theme || \"dark\";\n\n  useQuery({\n    queryFn: () => {\n      trackPayEvent({\n        client: props.client,\n        event: \"ub:ui:checkout_widget:render\",\n        toChainId: props.chain.id,\n        toToken: props.tokenAddress,\n      });\n    },\n    queryKey: [\"checkout_widget:render\"],\n  });\n\n  const bridgeDataQuery = useQuery({\n    queryFn: async (): Promise<UIOptionsResult> => {\n      const token = await getToken(\n        props.client,\n        checksumAddress(props.tokenAddress || NATIVE_TOKEN_ADDRESS),\n        props.chain.id,\n      ).catch((err) =>\n        err.message.includes(\"not supported\") ? undefined : Promise.reject(err),\n      );\n      if (!token) {\n        return {\n          chain: props.chain,\n          tokenAddress: checksumAddress(\n            props.tokenAddress || NATIVE_TOKEN_ADDRESS,\n          ),\n          type: \"unsupported_token\",\n        };\n      }\n      return {\n        data: {\n          metadata: {\n            description: props.description,\n            image: props.image,\n            title: props.name,\n          },\n          mode: \"direct_payment\",\n          paymentInfo: {\n            amount: props.amount,\n            feePayer: props.feePayer === \"seller\" ? \"receiver\" : \"sender\",\n            sellerAddress: props.seller,\n            token, // User is sender, seller is receiver\n          },\n        },\n        type: \"success\",\n      };\n    },\n    queryKey: [\"bridgeData\", stringify(props)],\n  });\n\n  let content = null;\n  if (!localeQuery.data || bridgeDataQuery.isLoading) {\n    content = (\n      <div\n        style={{\n          alignItems: \"center\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          minHeight: \"350px\",\n        }}\n      >\n        <Spinner color=\"secondaryText\" size=\"xl\" />\n      </div>\n    );\n  } else if (bridgeDataQuery.data?.type === \"unsupported_token\") {\n    // Show unsupported token screen\n    content = (\n      <UnsupportedTokenScreen\n        chain={bridgeDataQuery.data.chain}\n        client={props.client}\n        tokenAddress={props.tokenAddress}\n      />\n    );\n  } else if (bridgeDataQuery.data?.type === \"success\") {\n    // Show normal bridge orchestrator\n    content = (\n      <BridgeOrchestrator\n        client={props.client}\n        connectLocale={localeQuery.data}\n        connectOptions={props.connectOptions}\n        onCancel={() => {\n          props.onCancel?.();\n        }}\n        onComplete={() => {\n          props.onSuccess?.();\n        }}\n        onError={(err: Error) => {\n          props.onError?.(err);\n        }}\n        paymentLinkId={props.paymentLinkId}\n        paymentMethods={props.paymentMethods}\n        presetOptions={props.presetOptions}\n        purchaseData={props.purchaseData}\n        receiverAddress={props.seller}\n        uiOptions={bridgeDataQuery.data.data}\n      />\n    );\n  }\n\n  return (\n    <CustomThemeProvider theme={theme}>\n      <EmbedContainer\n        className={props.className}\n        modalSize=\"compact\"\n        style={props.style}\n      >\n        <DynamicHeight>{content}</DynamicHeight>\n      </EmbedContainer>\n    </CustomThemeProvider>\n  );\n}\n\n/**\n * Connection options for the `CheckoutWidget` component\n *\n * @example\n * ```tsx\n * <CheckoutWidget client={client} connectOptions={{\n *    connectModal: {\n *      size: 'compact',\n *      title: \"Sign in\",\n *    }\n *  }}\n * />\n * ```\n */\ntype CheckoutWidgetConnectOptions = {\n  /**\n   * Configurations for the `ConnectButton`'s Modal that is shown for connecting a wallet\n   * Refer to the [`ConnectButton_connectModalOptions`](https://portal.thirdweb.com/references/typescript/v5/ConnectButton_connectModalOptions) type for more details\n   */\n  connectModal?: ConnectButton_connectModalOptions;\n\n  /**\n   * Configure options for WalletConnect\n   *\n   * By default WalletConnect uses the thirdweb's default project id.\n   * Setting your own project id is recommended.\n   *\n   * You can create a project id by signing up on [walletconnect.com](https://walletconnect.com/)\n   */\n  walletConnect?: {\n    projectId?: string;\n  };\n\n  /**\n   * Enable Account abstraction for all wallets. This will connect to the users's smart account based on the connected personal wallet and the given options.\n   *\n   * This allows to sponsor gas fees for your user's transaction using the thirdweb account abstraction infrastructure.\n   *\n   */\n  accountAbstraction?: SmartWalletOptions;\n\n  /**\n   * Array of wallets to show in Connect Modal. If not provided, default wallets will be used.\n   */\n  wallets?: Wallet[];\n  /**\n   * When the user has connected their wallet to your site, this configuration determines whether or not you want to automatically connect to the last connected wallet when user visits your site again in the future.\n   *\n   * By default it is set to `{ timeout: 15000 }` meaning that autoConnect is enabled and if the autoConnection does not succeed within 15 seconds, it will be cancelled.\n   *\n   * If you want to disable autoConnect, set this prop to `false`.\n   *\n   * If you want to customize the timeout, you can assign an object with a `timeout` key to this prop.\n   * ```\n   */\n  autoConnect?:\n    | {\n        timeout: number;\n      }\n    | boolean;\n\n  /**\n   * Metadata of the app that will be passed to connected wallet. Setting this is highly recommended.\n   */\n  appMetadata?: AppMetadata;\n\n  /**\n   * The [`Chain`](https://portal.thirdweb.com/references/typescript/v5/Chain) object of the blockchain you want the wallet to connect to\n   *\n   * If a `chain` is not specified, Wallet will be connected to whatever is the default set in the wallet.\n   *\n   * If a `chain` is specified, Wallet will be prompted to switch to given chain after connection if it is not already connected to it.\n   * This ensures that the wallet is connected to the correct blockchain before interacting with your app.\n   *\n   * The `ConnectButton` also shows a \"Switch Network\" button until the wallet is connected to the specified chain. Clicking on the \"Switch Network\" button triggers the wallet to switch to the specified chain.\n   *\n   * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.\n   * At minimum, you need to pass the `id` of the blockchain to `defineChain` function to create a `Chain` object.\n   * ```\n   */\n  chain?: Chain;\n\n  /**\n   * Array of chains that your app supports.\n   *\n   * This is only relevant if your app is a multi-chain app and works across multiple blockchains.\n   * If your app only works on a single blockchain, you should only specify the `chain` prop.\n   *\n   * Given list of chains will used in various ways:\n   * - They will be displayed in the network selector in the `ConnectButton`'s details modal post connection\n   * - They will be sent to wallet at the time of connection if the wallet supports requesting multiple chains ( example: WalletConnect ) so that users can switch between the chains post connection easily\n   *\n   * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.\n   * At minimum, you need to pass the `id` of the blockchain to `defineChain` function to create a `Chain` object.\n   *\n   * ```tsx\n   * import { defineChain } from \"thirdweb/react\";\n   *\n   * const polygon = defineChain({\n   *   id: 137,\n   * });\n   * ```\n   */\n  chains?: Chain[];\n\n  /**\n   * Wallets to show as recommended in the `ConnectButton`'s Modal\n   */\n  recommendedWallets?: Wallet[];\n\n  /**\n   * By default, ConnectButton modal shows a \"All Wallets\" button that shows a list of 500+ wallets.\n   *\n   * You can disable this button by setting `showAllWallets` prop to `false`\n   */\n  showAllWallets?: boolean;\n\n  /**\n   * Enable SIWE (Sign in with Ethererum) by passing an object of type `SiweAuthOptions` to\n   * enforce the users to sign a message after connecting their wallet to authenticate themselves.\n   *\n   * Refer to the [`SiweAuthOptions`](https://portal.thirdweb.com/references/typescript/v5/SiweAuthOptions) for more details\n   */\n  auth?: SiweAuthOptions;\n};\n", "\"use client\";\n\nimport { useQuery } from \"@tanstack/react-query\";\nimport { trackPayEvent } from \"../../../../analytics/track/pay.js\";\nimport type { Token } from \"../../../../bridge/index.js\";\nimport type { Chain } from \"../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../constants/addresses.js\";\nimport { getToken } from \"../../../../pay/convert/get-token.js\";\nimport {\n  type PreparedTransaction,\n  prepareTransaction,\n} from \"../../../../transaction/prepare-transaction.js\";\nimport { type Address, checksumAddress } from \"../../../../utils/address.js\";\nimport { stringify } from \"../../../../utils/json.js\";\nimport { toUnits } from \"../../../../utils/units.js\";\nimport type { Wallet } from \"../../../../wallets/interfaces/wallet.js\";\nimport type { SmartWalletOptions } from \"../../../../wallets/smart/types.js\";\nimport type { AppMetadata } from \"../../../../wallets/types.js\";\nimport type { WalletId } from \"../../../../wallets/wallet-types.js\";\nimport { CustomThemeProvider } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport { iconSize, type Theme } from \"../../../core/design-system/index.js\";\nimport type { SiweAuthOptions } from \"../../../core/hooks/auth/useSiweAuth.js\";\nimport type { ConnectButton_connectModalOptions } from \"../../../core/hooks/connection/ConnectButtonProps.js\";\nimport type { SupportedTokens } from \"../../../core/utils/defaultTokens.js\";\nimport { AccentFailIcon } from \"../ConnectWallet/icons/AccentFailIcon.js\";\nimport { useConnectLocale } from \"../ConnectWallet/locale/getConnectLocale.js\";\nimport { EmbedContainer } from \"../ConnectWallet/Modal/ConnectEmbed.js\";\nimport { DynamicHeight } from \"../components/DynamicHeight.js\";\nimport { Spacer } from \"../components/Spacer.js\";\nimport { Spinner } from \"../components/Spinner.js\";\nimport { Text } from \"../components/text.js\";\nimport type { LocaleId } from \"../types.js\";\nimport { BridgeOrchestrator, type UIOptions } from \"./BridgeOrchestrator.js\";\nimport { UnsupportedTokenScreen } from \"./UnsupportedTokenScreen.js\";\n\nexport type TransactionWidgetProps = {\n  supportedTokens?: SupportedTokens;\n  /**\n   * A client is the entry point to the thirdweb SDK.\n   * It is required for all other actions.\n   * You can create a client using the `createThirdwebClient` function. Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   *\n   * You must provide a `clientId` or `secretKey` in order to initialize a client. Pass `clientId` if you want for client-side usage and `secretKey` for server-side usage.\n   *\n   * ```tsx\n   * import { createThirdwebClient } from \"thirdweb\";\n   *\n   * const client = createThirdwebClient({\n   *  clientId: \"<your_client_id>\",\n   * })\n   * ```\n   */\n  client: ThirdwebClient;\n  /**\n   * By default - ConnectButton UI uses the `en-US` locale for english language users.\n   *\n   * You can customize the language used in the ConnectButton UI by setting the `locale` prop.\n   *\n   * Refer to the [`LocaleId`](https://portal.thirdweb.com/references/typescript/v5/LocaleId) type for supported locales.\n   */\n  locale?: LocaleId;\n  /**\n   * Set the theme for the `TransactionWidget` component. By default it is set to `\"dark\"`\n   *\n   * theme can be set to either `\"dark\"`, `\"light\"` or a custom theme object.\n   * You can also import [`lightTheme`](https://portal.thirdweb.com/references/typescript/v5/lightTheme)\n   * or [`darkTheme`](https://portal.thirdweb.com/references/typescript/v5/darkTheme)\n   * functions from `thirdweb/react` to use the default themes as base and overrides parts of it.\n   * @example\n   * ```ts\n   * import { lightTheme } from \"thirdweb/react\";\n   *\n   * const customTheme = lightTheme({\n   *  colors: {\n   *    modalBg: 'red'\n   *  }\n   * })\n   *\n   * function Example() {\n   *  return <TransactionWidget client={client} theme={customTheme} />\n   * }\n   * ```\n   */\n  theme?: \"light\" | \"dark\" | Theme;\n\n  /**\n   * Customize the options for \"Connect\" Button showing in the TransactionWidget UI when the user is not connected to a wallet.\n   *\n   * Refer to the [`TransactionWidgetConnectOptions`](https://portal.thirdweb.com/references/typescript/v5/TransactionWidgetConnectOptions) type for more details.\n   */\n  connectOptions?: TransactionWidgetConnectOptions;\n\n  /**\n   * All wallet IDs included in this array will be hidden from wallet selection when connected.\n   */\n  hiddenWallets?: WalletId[];\n\n  /**\n   * The wallet that should be pre-selected in the TransactionWidget UI.\n   */\n  activeWallet?: Wallet;\n\n  style?: React.CSSProperties;\n\n  className?: string;\n\n  /**\n   * The token address needed to complete this transaction. Leave undefined if no token is required.\n   */\n  tokenAddress?: Address;\n\n  /**\n   * The price of the item **(as a decimal string)**, e.g. \"1.5\" for 1.5 tokens.\n   */\n  amount?: string;\n\n  /**\n   * A title for the transaction.\n   */\n  title?: string;\n\n  /**\n   * The transaction description.\n   */\n  description?: string;\n\n  /**\n   * An image URL to show on the widget, such as an NFT image.\n   */\n  image?: string;\n\n  /**\n   * Whether the user or the seller pays the protocol fees. Defaults to the user.\n   */\n  feePayer?: \"user\" | \"seller\";\n\n  /**\n   * Preset fiat amounts to display in the UI. Defaults to [5, 10, 20].\n   */\n  presetOptions?: [number, number, number];\n\n  /**\n   * Arbitrary data to be included in the returned status and webhook events.\n   */\n  purchaseData?: Record<string, unknown>;\n\n  /**\n   * Callback triggered when the purchase is successful.\n   */\n  onSuccess?: () => void;\n\n  /**\n   * Callback triggered when the purchase encounters an error.\n   */\n  onError?: (error: Error) => void;\n\n  /**\n   * Callback triggered when the user cancels the purchase.\n   */\n  onCancel?: () => void;\n\n  /**\n   * Arbitrary data to be included in the returned status and webhook events.\n   */\n  transaction: PreparedTransaction;\n\n  /**\n   * @hidden\n   */\n  paymentLinkId?: string;\n\n  /**\n   * Allowed payment methods\n   * @default [\"crypto\", \"card\"]\n   */\n  paymentMethods?: (\"crypto\" | \"card\")[];\n};\n\n// Enhanced UIOptions to handle unsupported token state\ntype UIOptionsResult =\n  | { type: \"success\"; data: UIOptions }\n  | {\n      type: \"indexing_token\";\n      token: Token;\n      chain: Chain;\n    }\n  | {\n      type: \"unsupported_token\";\n      tokenAddress: Address;\n      chain: Chain;\n    };\n\n/**\n * Widget a prebuilt UI for purchasing a specific token.\n *\n * @param props - Props of type [`TransactionWidgetProps`](https://portal.thirdweb.com/references/typescript/v5/TransactionWidgetProps) to configure the TransactionWidget component.\n *\n * @example\n * ### Default configuration\n *\n * By default, the `TransactionWidget` component will allows users to fund their wallets with crypto or fiat on any of the supported chains..\n *\n * ```tsx\n * <TransactionWidget\n *   client={client}\n *   transaction={prepareTransaction({\n *     to: \"0x...\",\n *     chain: ethereum,\n *     client: client,\n *   })}\n *   amount=\"0.1\"\n *  />\n * ```\n *\n * ### Customize the UI\n *\n * You can customize the UI of the `TransactionWidget` component by passing a custom theme object to the `theme` prop.\n *\n * ```tsx\n * <TransactionWidget\n *   client={client}\n *   transaction={prepareTransaction({\n *     to: \"0x...\",\n *     chain: ethereum,\n *     client: client,\n *     value: toUnits(\"0.001\", 18),\n *   })}\n *   theme={darkTheme({\n *     colors: {\n *       modalBg: \"red\",\n *     },\n *   })}\n * />\n * ```\n *\n * Refer to the [`Theme`](https://portal.thirdweb.com/references/typescript/v5/Theme) type for more details.\n *\n * ### Update the Title\n *\n * You can update the title of the widget by passing a `title` prop to the `TransactionWidget` component.\n *\n * ```tsx\n * <TransactionWidget\n *   transaction={prepareTransaction({\n *     to: \"0x...\",\n *     chain: ethereum,\n *     client: client,\n *     value: toUnits(\"0.001\", 18),\n *   })}\n *   client={client}\n *   title=\"Transaction ETH\"\n * />\n * ```\n *\n * ### Configure the wallet connection\n *\n * You can customize the wallet connection flow by passing a `connectOptions` object to the `TransactionWidget` component.\n *\n * ```tsx\n * <TransactionWidget\n *   client={client}\n *   transaction={prepareTransaction({\n *     to: \"0x...\",\n *     chain: ethereum,\n *     client: client,\n *     value: toUnits(\"0.001\", 18),\n *   })}\n *   connectOptions={{\n *     connectModal: {\n *       size: 'compact',\n *       title: \"Sign in\",\n *     }\n *   }}\n * />\n * ```\n *\n * Refer to the [`TransactionWidgetConnectOptions`](https://portal.thirdweb.com/references/typescript/v5/TransactionWidgetConnectOptions) type for more details.\n *\n * @bridge Widgets\n */\nexport function TransactionWidget(props: TransactionWidgetProps) {\n  const localeQuery = useConnectLocale(props.locale || \"en_US\");\n  const theme = props.theme || \"dark\";\n\n  useQuery({\n    queryFn: () => {\n      trackPayEvent({\n        chainId: props.transaction.chain.id,\n        client: props.client,\n        event: \"ub:ui:transaction_widget:render\",\n        toToken: props.tokenAddress,\n      });\n    },\n    queryKey: [\"transaction_widget:render\"],\n  });\n\n  const bridgeDataQuery = useQuery({\n    queryFn: async (): Promise<UIOptionsResult> => {\n      let erc20Value = props.transaction.erc20Value;\n\n      if (props.amount) {\n        // Get token decimals for conversion\n        const tokenAddress = props.tokenAddress || NATIVE_TOKEN_ADDRESS;\n        const token = await getToken(\n          props.client,\n          checksumAddress(tokenAddress),\n          props.transaction.chain.id,\n        ).catch((e) => {\n          if (e instanceof Error && e.message.includes(\"not supported\")) {\n            return null;\n          }\n          throw e;\n        });\n        if (!token) {\n          return {\n            chain: props.transaction.chain,\n            tokenAddress: checksumAddress(tokenAddress),\n            type: \"unsupported_token\",\n          };\n        }\n\n        erc20Value = {\n          amountWei: toUnits(props.amount, token.decimals),\n          tokenAddress: checksumAddress(tokenAddress),\n        };\n      }\n\n      const transaction = prepareTransaction({\n        ...props.transaction,\n        erc20Value,\n      });\n\n      return {\n        data: {\n          metadata: {\n            description: props.description,\n            image: props.image,\n            title: props.title,\n          },\n          mode: \"transaction\",\n          transaction,\n        },\n        type: \"success\",\n      };\n    },\n    queryKey: [\"bridgeData\", stringify(props)],\n    retry: 1,\n  });\n\n  let content = null;\n  if (!localeQuery.data || bridgeDataQuery.isLoading) {\n    content = (\n      <div\n        style={{\n          alignItems: \"center\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          minHeight: \"350px\",\n        }}\n      >\n        <Spinner color=\"secondaryText\" size=\"xl\" />\n      </div>\n    );\n  } else if (bridgeDataQuery.error) {\n    content = (\n      <div\n        style={{\n          alignItems: \"center\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          minHeight: \"350px\",\n        }}\n      >\n        <AccentFailIcon size={iconSize[\"3xl\"]} />\n        <Spacer y=\"lg\" />\n        <Text color=\"secondaryText\" size=\"md\">\n          {bridgeDataQuery.error.message}\n        </Text>\n      </div>\n    );\n  } else if (bridgeDataQuery.data?.type === \"unsupported_token\") {\n    // Show unsupported token screen\n    content = (\n      <UnsupportedTokenScreen\n        chain={bridgeDataQuery.data.chain}\n        client={props.client}\n        tokenAddress={props.tokenAddress}\n      />\n    );\n  } else if (bridgeDataQuery.data?.type === \"success\") {\n    // Show normal bridge orchestrator\n    content = (\n      <BridgeOrchestrator\n        client={props.client}\n        connectLocale={localeQuery.data}\n        connectOptions={props.connectOptions}\n        onCancel={() => {\n          props.onCancel?.();\n        }}\n        onComplete={() => {\n          props.onSuccess?.();\n        }}\n        onError={(err: Error) => {\n          props.onError?.(err);\n        }}\n        paymentLinkId={props.paymentLinkId}\n        paymentMethods={props.paymentMethods}\n        presetOptions={props.presetOptions}\n        purchaseData={props.purchaseData}\n        receiverAddress={undefined}\n        uiOptions={bridgeDataQuery.data.data}\n      />\n    );\n  }\n\n  return (\n    <CustomThemeProvider theme={theme}>\n      <EmbedContainer\n        className={props.className}\n        modalSize=\"compact\"\n        style={props.style}\n      >\n        <DynamicHeight>{content}</DynamicHeight>\n      </EmbedContainer>\n    </CustomThemeProvider>\n  );\n}\n\n/**\n * Connection options for the `TransactionWidget` component\n *\n * @example\n * ```tsx\n * <TransactionWidget client={client} connectOptions={{\n *    connectModal: {\n *      size: 'compact',\n *      title: \"Sign in\",\n *    }\n *  }}\n * />\n * ```\n */\ntype TransactionWidgetConnectOptions = {\n  /**\n   * Configurations for the `ConnectButton`'s Modal that is shown for connecting a wallet\n   * Refer to the [`ConnectButton_connectModalOptions`](https://portal.thirdweb.com/references/typescript/v5/ConnectButton_connectModalOptions) type for more details\n   */\n  connectModal?: ConnectButton_connectModalOptions;\n\n  /**\n   * Configure options for WalletConnect\n   *\n   * By default WalletConnect uses the thirdweb's default project id.\n   * Setting your own project id is recommended.\n   *\n   * You can create a project id by signing up on [walletconnect.com](https://walletconnect.com/)\n   */\n  walletConnect?: {\n    projectId?: string;\n  };\n\n  /**\n   * Enable Account abstraction for all wallets. This will connect to the users's smart account based on the connected personal wallet and the given options.\n   *\n   * This allows to sponsor gas fees for your user's transaction using the thirdweb account abstraction infrastructure.\n   *\n   */\n  accountAbstraction?: SmartWalletOptions;\n\n  /**\n   * Array of wallets to show in Connect Modal. If not provided, default wallets will be used.\n   */\n  wallets?: Wallet[];\n  /**\n   * When the user has connected their wallet to your site, this configuration determines whether or not you want to automatically connect to the last connected wallet when user visits your site again in the future.\n   *\n   * By default it is set to `{ timeout: 15000 }` meaning that autoConnect is enabled and if the autoConnection does not succeed within 15 seconds, it will be cancelled.\n   *\n   * If you want to disable autoConnect, set this prop to `false`.\n   *\n   * If you want to customize the timeout, you can assign an object with a `timeout` key to this prop.\n   * ```\n   */\n  autoConnect?:\n    | {\n        timeout: number;\n      }\n    | boolean;\n\n  /**\n   * Metadata of the app that will be passed to connected wallet. Setting this is highly recommended.\n   */\n  appMetadata?: AppMetadata;\n\n  /**\n   * The [`Chain`](https://portal.thirdweb.com/references/typescript/v5/Chain) object of the blockchain you want the wallet to connect to\n   *\n   * If a `chain` is not specified, Wallet will be connected to whatever is the default set in the wallet.\n   *\n   * If a `chain` is specified, Wallet will be prompted to switch to given chain after connection if it is not already connected to it.\n   * This ensures that the wallet is connected to the correct blockchain before interacting with your app.\n   *\n   * The `ConnectButton` also shows a \"Switch Network\" button until the wallet is connected to the specified chain. Clicking on the \"Switch Network\" button triggers the wallet to switch to the specified chain.\n   *\n   * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.\n   * At minimum, you need to pass the `id` of the blockchain to `defineChain` function to create a `Chain` object.\n   * ```\n   */\n  chain?: Chain;\n\n  /**\n   * Array of chains that your app supports.\n   *\n   * This is only relevant if your app is a multi-chain app and works across multiple blockchains.\n   * If your app only works on a single blockchain, you should only specify the `chain` prop.\n   *\n   * Given list of chains will used in various ways:\n   * - They will be displayed in the network selector in the `ConnectButton`'s details modal post connection\n   * - They will be sent to wallet at the time of connection if the wallet supports requesting multiple chains ( example: WalletConnect ) so that users can switch between the chains post connection easily\n   *\n   * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.\n   * At minimum, you need to pass the `id` of the blockchain to `defineChain` function to create a `Chain` object.\n   *\n   * ```tsx\n   * import { defineChain } from \"thirdweb/react\";\n   *\n   * const polygon = defineChain({\n   *   id: 137,\n   * });\n   * ```\n   */\n  chains?: Chain[];\n\n  /**\n   * Wallets to show as recommended in the `ConnectButton`'s Modal\n   */\n  recommendedWallets?: Wallet[];\n\n  /**\n   * By default, ConnectButton modal shows a \"All Wallets\" button that shows a list of 500+ wallets.\n   *\n   * You can disable this button by setting `showAllWallets` prop to `false`\n   */\n  showAllWallets?: boolean;\n\n  /**\n   * Enable SIWE (Sign in with Ethererum) by passing an object of type `SiweAuthOptions` to\n   * enforce the users to sign a message after connecting their wallet to authenticate themselves.\n   *\n   * Refer to the [`SiweAuthOptions`](https://portal.thirdweb.com/references/typescript/v5/SiweAuthOptions) for more details\n   */\n  auth?: SiweAuthOptions;\n};\n", "import { useCallback, useContext, useMemo, useState } from \"react\";\nimport type { Chain } from \"../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport { getDefaultWallets } from \"../../../../wallets/defaultWallets.js\";\nimport type { Wallet } from \"../../../../wallets/interfaces/wallet.js\";\nimport type { SmartWalletOptions } from \"../../../../wallets/smart/types.js\";\nimport type { AppMetadata } from \"../../../../wallets/types.js\";\nimport type { WalletId } from \"../../../../wallets/wallet-types.js\";\nimport type { Theme } from \"../../../core/design-system/index.js\";\nimport type { SiweAuthOptions } from \"../../../core/hooks/auth/useSiweAuth.js\";\nimport { SetRootElementContext } from \"../../../core/providers/RootElementContext.js\";\nimport { WalletUIStatesProvider } from \"../../providers/wallet-ui-states-provider.js\";\nimport { canFitWideModal } from \"../../utils/canFitWideModal.js\";\nimport type { LocaleId } from \"../types.js\";\nimport { getConnectLocale } from \"./locale/getConnectLocale.js\";\nimport type { ConnectLocale } from \"./locale/types.js\";\nimport ConnectModal from \"./Modal/ConnectModal.js\";\nimport type { WelcomeScreen } from \"./screens/types.js\";\n\n/**\n * hook that allows you to open the Connect UI in a Modal to prompt the user to connect wallet.\n * @example\n * ```tsx\n * import { createThirdwebClient } from \"thirdweb\";\n * import { useConnectModal } from \"thirdweb/react\";\n *\n * const client = createThirdwebClient({\n *  clientId: \"<your_client_id>\",\n * });\n *\n * function Example() {\n *   const { connect, isConnecting } = useConnectModal();\n *\n *   async function handleConnect() {\n *      const wallet = await connect({ client }); // opens the connect modal\n *      console.log('connected to', wallet);\n *   }\n *\n *   return <button onClick={handleConnect}> Connect </button>\n * }\n * ```\n *\n * The returned `connect` method takes an object of type [UseConnectModalOptions](https://portal.thirdweb.com/references/typescript/v5/ConnectButtonProps)\n * as an argument to customize the Connect Modal UI. Refer to [UseConnectModalOptions](https://portal.thirdweb.com/references/typescript/v5/ConnectButtonProps) to see the available options.\n *\n * @walletConnection\n */\nexport function useConnectModal() {\n  const setRootEl = useContext(SetRootElementContext);\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  const connect = useCallback(\n    (props: UseConnectModalOptions) => {\n      function cleanup() {\n        setIsConnecting(false);\n        setRootEl(undefined);\n      }\n\n      return new Promise<Wallet>((resolve, reject) => {\n        setIsConnecting(true);\n        getConnectLocale(props.locale || \"en_US\")\n          .then((locale) => {\n            setRootEl(\n              <Modal\n                {...props}\n                connectLocale={locale}\n                onClose={() => {\n                  reject();\n                  cleanup();\n                }}\n                onConnect={(w) => {\n                  if (props.auth) return;\n                  resolve(w);\n                  cleanup();\n                }}\n              />,\n            );\n          })\n          .catch(() => {\n            reject();\n            cleanup();\n          });\n      });\n    },\n    [setRootEl],\n  );\n\n  return { connect, isConnecting };\n}\n\nfunction Modal(\n  props: UseConnectModalOptions & {\n    onConnect: (wallet: Wallet) => void;\n    onClose: () => void;\n    connectLocale: ConnectLocale;\n  },\n) {\n  const wallets = useMemo(\n    () =>\n      props.wallets ||\n      getDefaultWallets({\n        appMetadata: props.appMetadata,\n        chains: props.chains,\n      }),\n    [props.wallets, props.appMetadata, props.chains],\n  );\n\n  const size = useMemo(() => {\n    return !canFitWideModal() || wallets.length === 1\n      ? \"compact\"\n      : props.size || \"wide\";\n  }, [props.size, wallets.length]);\n  const meta = useMemo(() => {\n    return {\n      privacyPolicyUrl: props.privacyPolicyUrl,\n      showThirdwebBranding: props.showThirdwebBranding,\n      termsOfServiceUrl: props.termsOfServiceUrl,\n      title: props.title,\n      titleIconUrl: props.titleIcon,\n    };\n  }, [\n    props.privacyPolicyUrl,\n    props.showThirdwebBranding,\n    props.termsOfServiceUrl,\n    props.title,\n    props.titleIcon,\n  ]);\n\n  return (\n    <WalletUIStatesProvider isOpen={true} theme={props.theme}>\n      <ConnectModal\n        accountAbstraction={props.accountAbstraction}\n        auth={props.auth}\n        chain={props.chain}\n        chains={props.chains}\n        client={props.client}\n        connectLocale={props.connectLocale}\n        hiddenWallets={props.hiddenWallets}\n        localeId={props.locale || \"en_US\"}\n        meta={meta}\n        onClose={props.onClose}\n        onConnect={props.onConnect}\n        recommendedWallets={props.recommendedWallets}\n        shouldSetActive={props.setActive === undefined ? true : props.setActive}\n        showAllWallets={props.showAllWallets}\n        size={size}\n        walletConnect={props.walletConnect}\n        wallets={wallets}\n        welcomeScreen={props.welcomeScreen}\n      />\n    </WalletUIStatesProvider>\n  );\n}\n\n/**\n * Options for configuring Connect Modal for [`useConnectModal`](https://portal.thirdweb.com/references/typescript/v5/useConnectModal) hook\n * @connectWallet\n */\nexport type UseConnectModalOptions = {\n  /**\n   * Whether to set the connected wallet as active wallet or not\n   *\n   * By default, It is set to `true`\n   *\n   * You can set it to `false` and use the retunred wallet from the `connect` method if you want to connect wallet without setting it as active wallet\n   *\n   * @example\n   * ```ts\n   * function Example() {\n   *  const { connect } = useConnectModal();\n   *  return <button> onClick={async () => {\n   *  const wallet = await connect({ setActive: false, client });\n   * }}>\n   *  Connect\n   * </button>\n   * }\n   * ```\n   */\n  setActive?: boolean;\n\n  /**\n   * A client is the entry point to the thirdweb SDK.\n   * It is required for all other actions.\n   * You can create a client using the `createThirdwebClient` function. Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   *\n   * You must provide a `clientId` or `secretKey` in order to initialize a client. Pass `clientId` if you want for client-side usage and `secretKey` for server-side usage.\n   *\n   * ```tsx\n   * import { createThirdwebClient } from \"thirdweb\";\n   *\n   * const client = createThirdwebClient({\n   *  clientId: \"<your_client_id>\",\n   * })\n   * ```\n   */\n  client: ThirdwebClient;\n\n  /**\n   * By default - Connect Modal UI uses the `en-US` locale for english language users.\n   *\n   * You can customize the language used in the Connect Modal UI by setting the `locale` prop.\n   *\n   * Refer to the [`LocaleId`](https://portal.thirdweb.com/references/typescript/v5/LocaleId) type for supported locales.\n   */\n  locale?: LocaleId;\n\n  /**\n   * Array of supported wallets. If not provided, default wallets will be used.\n   * @example\n   * ```tsx\n   * import { AutoConnect } from \"thirdweb/react\";\n   * import { createWallet, inAppWallet } from \"thirdweb/wallets\";\n   *\n   * const wallets = [\n   *   inAppWallet(),\n   *   createWallet(\"io.metamask\"),\n   *   createWallet(\"com.coinbase.wallet\"),\n   *   createWallet(\"me.rainbow\"),\n   * ];\n   *\n   * function Example() {\n   *  const { connect } = useConnectModal();\n   *  return <button> onClick={() => connect({ wallets, client })}> Connect </button>\n   * }\n   * ```\n   *\n   * If no wallets are specified. The component will show All the EIP-6963 compliant installed wallet extensions, as well as below default wallets:\n   *\n   * ```tsx\n   * const defaultWallets = [\n   *  inAppWallet(),\n   *  createWallet(\"io.metamask\"),\n   *  createWallet(\"com.coinbase.wallet\"),\n   *  createWallet(\"me.rainbow\"),\n   *  createWallet(\"io.zerion.wallet\"),\n   * ]\n   * ```\n   *\n   * Connect Modal also shows a \"All wallets\" button at the end of wallet list which allows user to connect to any of the 500+ wallets\n   */\n  wallets?: Wallet[];\n\n  /**\n   * Metadata of the app that will be passed to connected wallet. Setting this is highly recommended.\n   *\n   * Some wallets display this information to the user when they connect to your app.\n   * @example\n   * ```ts\n   * {\n   *   name: \"My App\",\n   *   url: \"https://my-app.com\",\n   *   description: \"some description about your app\",\n   *   logoUrl: \"https://path/to/my-app/logo.svg\",\n   * };\n   * ```\n   */\n  appMetadata?: AppMetadata;\n\n  /**\n   * The [`Chain`](https://portal.thirdweb.com/references/typescript/v5/Chain) object of the blockchain you want the wallet to connect to\n   *\n   * If a `chain` is not specified, Wallet will be connected to whatever is the default set in the wallet.\n   *\n   * If a `chain` is specified, Wallet will be prompted to switch to given chain after connection if it is not already connected to it.\n   * This ensures that the wallet is connected to the correct blockchain before interacting with your app.\n   *\n   * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.\n   * At minimum, you need to pass the `id` of the blockchain to `defineChain` function to create a `Chain` object.\n   * ```\n   */\n  chain?: Chain;\n\n  /**\n   * Array of chains that your app supports.\n   *\n   * This is only relevant if your app is a multi-chain app and works across multiple blockchains.\n   * If your app only works on a single blockchain, you should only specify the `chain` prop.\n   *\n   * Given list of chains will be sent to wallet at the time of connection if the wallet supports requesting multiple chains ( example: WalletConnect ) so that users can switch between the chains post connection easily\n   *\n   * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.\n   * At minimum, you need to pass the `id` of the blockchain to `defineChain` function to create a `Chain` object.\n   *\n   * ```tsx\n   * import { defineChain } from \"thirdweb/react\";\n   *\n   * const polygon = defineChain({\n   *   id: 137,\n   * });\n   * ```\n   */\n  chains?: Chain[];\n\n  /**\n   * Set the theme for the Connect Modal. By default it is set to `\"dark\"`\n   *\n   * theme can be set to either `\"dark\"`, `\"light\"` or a custom theme object.\n   * You can also import [`lightTheme`](https://portal.thirdweb.com/references/typescript/v5/lightTheme)\n   * or [`darkTheme`](https://portal.thirdweb.com/references/typescript/v5/darkTheme)\n   * functions from `thirdweb/react` to use the default themes as base and overrides parts of it.\n   * @example\n   * ```ts\n   * import { lightTheme } from \"thirdweb/react\";\n   *\n   * const customTheme = lightTheme({\n   *  colors: {\n   *    modalBg: 'red'\n   *  }\n   * })\n   * ```\n   */\n  theme?: \"dark\" | \"light\" | Theme;\n\n  /**\n   * Configure options for WalletConnect\n   *\n   * By default WalletConnect uses the thirdweb's default project id.\n   * Setting your own project id is recommended.\n   *\n   * You can create a project id by signing up on [walletconnect.com](https://walletconnect.com/)\n   */\n  walletConnect?: {\n    projectId?: string;\n  };\n\n  /**\n   * Enable Account abstraction for all wallets. This will connect to the users's smart account based on the connected personal wallet and the given options.\n   *\n   * This allows to sponsor gas fees for your user's transaction using the thirdweb account abstraction infrastructure.\n   *\n   * ```tsx\n   * * function Example() {\n   *  const { connect } = useConnectModal();\n   *\n   * async function handleConnect() {\n   *  await connect({\n   *    client,\n   *    accountAbstraction: {\n   *      factoryAddress: \"0x123...\",\n   *      chain: sepolia,\n   *      sponsorGas: true\n   *    }\n   *  })\n   * }\n   *\n   *  return (\n   *  <button> onClick={handleConnect}>\n   *    Connect\n   *  </button>\n   * )\n   *\n   * }\n   * ```\n   */\n  accountAbstraction?: SmartWalletOptions;\n\n  /**\n   * Wallets to show as recommended in the Connect Modal\n   */\n  recommendedWallets?: Wallet[];\n\n  /**\n   * By default, Connect modal shows a \"All Wallets\" button that shows a list of 500+ wallets.\n   *\n   * You can disable this button by setting `showAllWallets` prop to `false`\n   */\n  showAllWallets?: boolean;\n\n  /**\n   * All wallet IDs included in this array will be hidden from the wallet selection list.\n   */\n  hiddenWallets?: WalletId[];\n\n  /**\n   * Title to show in Connect Modal\n   *\n   * The default is `\"Connect\"`\n   */\n  title?: string;\n\n  /**\n   * Replace the default thirdweb icon next to Modal title with your own icon\n   *\n   * Set to empty string (`\"\"`) to hide the icon\n   */\n  titleIcon?: string;\n\n  /**\n   * Set the size of the connect modal on desktop - `\"compact\"` or `\"wide\"`\n   *\n   * Modal size is always `compact` on mobile\n   *\n   * By default it is `\"wide\"` for desktop.\n   */\n  size?: \"compact\" | \"wide\";\n\n  /**\n   * URL of the \"terms of service\" page\n   *\n   * If provided, Modal will show a Terms of Service message at the bottom with below link\n   */\n  termsOfServiceUrl?: string;\n\n  /**\n   * URL of the \"privacy policy\" page\n   *\n   * If provided, Modal will show a Privacy Policy message at the bottom with below link\n   */\n  privacyPolicyUrl?: string;\n\n  /**\n   * Customize the welcome screen. This prop is only applicable when modal size prop is set to \"wide\". On \"wide\" Modal size, a welcome screen is shown on the right side of the modal.\n   *\n   * This screen can be customized in two ways\n   *\n   * #### 1. Customize Metadata and Image\n   * ```tsx\n   * const welcomeScreen = {\n   *  title: \"your title\",\n   *  subtitle: \"your subtitle\",\n   *  img: {\n   *   src: \"https://your-image-url.png\",\n   *   width: 300,\n   *   height: 50,\n   *  },\n   * }\n   * ```\n   *\n   * #### 2. Render Custom Component\n   *\n   * ```tsx\n   * const welcomeScreen = () => <YourCustomComponent />\n   * ```\n   */\n  welcomeScreen?: WelcomeScreen;\n\n  /**\n   * By default Connect Modal shows \"Powered by Thirdweb\" branding at the bottom of the Modal.\n   *\n   * If you want to hide the branding, set this prop to `false`\n   */\n  showThirdwebBranding?: boolean;\n\n  /**\n   * Enable SIWE (Sign in with Ethererum) by passing an object of type `SiweAuthOptions` to\n   * enforce the users to sign a message after connecting their wallet to authenticate themselves.\n   *\n   * Refer to the [`SiweAuthOptions`](https://portal.thirdweb.com/references/typescript/v5/SiweAuthOptions) for more details\n   */\n  auth?: SiweAuthOptions;\n};\n\n// TODO: consilidate Button/Embed/Modal props into one type with extras\n", "\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport type { Chain } from \"../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../client/client.js\";\nimport type { Address } from \"../../../utils/address.js\";\nimport type { Wallet } from \"../../../wallets/interfaces/wallet.js\";\nimport type { SmartWalletOptions } from \"../../../wallets/smart/types.js\";\nimport type { AppMetadata } from \"../../../wallets/types.js\";\nimport type { WalletId } from \"../../../wallets/wallet-types.js\";\nimport { CustomThemeProvider } from \"../../core/design-system/CustomThemeProvider.js\";\nimport type { Theme } from \"../../core/design-system/index.js\";\nimport {\n  type SiweAuthOptions,\n  useSiweAuth,\n} from \"../../core/hooks/auth/useSiweAuth.js\";\nimport type {\n  ConnectButton_connectModalOptions,\n  PayUIOptions,\n} from \"../../core/hooks/connection/ConnectButtonProps.js\";\nimport { useActiveAccount } from \"../../core/hooks/wallets/useActiveAccount.js\";\nimport { useActiveWallet } from \"../../core/hooks/wallets/useActiveWallet.js\";\nimport { useConnectionManager } from \"../../core/providers/connection-manager.js\";\nimport type { SupportedTokens } from \"../../core/utils/defaultTokens.js\";\nimport { AutoConnect } from \"../../web/ui/AutoConnect/AutoConnect.js\";\nimport { BuyWidget } from \"./Bridge/BuyWidget.js\";\nimport { CheckoutWidget } from \"./Bridge/CheckoutWidget.js\";\nimport { TransactionWidget } from \"./Bridge/TransactionWidget.js\";\nimport { useConnectLocale } from \"./ConnectWallet/locale/getConnectLocale.js\";\nimport { EmbedContainer } from \"./ConnectWallet/Modal/ConnectEmbed.js\";\nimport BuyScreen from \"./ConnectWallet/screens/Buy/BuyScreen.js\";\nimport { DynamicHeight } from \"./components/DynamicHeight.js\";\nimport { Spinner } from \"./components/Spinner.js\";\nimport type { LocaleId } from \"./types.js\";\n\n/**\n * Props of [`PayEmbed`](https://portal.thirdweb.com/references/typescript/v5/PayEmbed) component\n */\nexport type PayEmbedProps = {\n  /**\n   * Override the default tokens shown in PayEmbed UI\n   * By default, PayEmbed shows a few popular tokens for Pay supported chains\n   * @example\n   *\n   * `supportedTokens` prop allows you to override this list as shown below.\n   *\n   * ```tsx\n   * import { PayEmbed } from 'thirdweb/react';\n   * import { NATIVE_TOKEN_ADDRESS } from 'thirdweb';\n   *\n   * function Example() {\n   *   return (\n   * \t\t<PayEmbed\n   * \t\t\tsupportedTokens={{\n   *        // Override the tokens for Base Mainnet ( chaid id 84532 )\n   * \t\t\t\t84532: [\n   * \t\t\t\t\t{\n   * \t\t\t\t\t\taddress: NATIVE_TOKEN_ADDRESS, // use NATIVE_TOKEN_ADDRESS for native token\n   * \t\t\t\t\t\tname: 'Base ETH',\n   * \t\t\t\t\t\tsymbol: 'ETH',\n   * \t\t\t\t\t\ticon: 'https://...',\n   * \t\t\t\t\t},\n   *          {\n   * \t\t\t\t\t\taddress: '0x...', // token contract address\n   * \t\t\t\t\t\tname: 'Dai Stablecoin',\n   * \t\t\t\t\t\tsymbol: 'DAI',\n   * \t\t\t\t\t\ticon: 'https://...',\n   * \t\t\t\t\t},\n   * \t\t\t\t],\n   * \t\t\t}}\n   * \t\t/>\n   * \t);\n   * }\n   * ```\n   */\n  supportedTokens?: SupportedTokens;\n  /**\n   * A client is the entry point to the thirdweb SDK.\n   * It is required for all other actions.\n   * You can create a client using the `createThirdwebClient` function. Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   *\n   * You must provide a `clientId` or `secretKey` in order to initialize a client. Pass `clientId` if you want for client-side usage and `secretKey` for server-side usage.\n   *\n   * ```tsx\n   * import { createThirdwebClient } from \"thirdweb\";\n   *\n   * const client = createThirdwebClient({\n   *  clientId: \"<your_client_id>\",\n   * })\n   * ```\n   */\n  client: ThirdwebClient;\n  /**\n   * By default - ConnectButton UI uses the `en-US` locale for english language users.\n   *\n   * You can customize the language used in the ConnectButton UI by setting the `locale` prop.\n   *\n   * Refer to the [`LocaleId`](https://portal.thirdweb.com/references/typescript/v5/LocaleId) type for supported locales.\n   */\n  locale?: LocaleId;\n  /**\n   * Customize the Pay UI options. Refer to the [`PayUIOptions`](https://portal.thirdweb.com/references/typescript/v5/PayUIOptions) type for more details.\n   */\n  payOptions?: PayUIOptions;\n\n  /**\n   * Set the theme for the `PayEmbed` component. By default it is set to `\"dark\"`\n   *\n   * theme can be set to either `\"dark\"`, `\"light\"` or a custom theme object.\n   * You can also import [`lightTheme`](https://portal.thirdweb.com/references/typescript/v5/lightTheme)\n   * or [`darkTheme`](https://portal.thirdweb.com/references/typescript/v5/darkTheme)\n   * functions from `thirdweb/react` to use the default themes as base and overrides parts of it.\n   * @example\n   * ```ts\n   * import { lightTheme } from \"thirdweb/react\";\n   *\n   * const customTheme = lightTheme({\n   *  colors: {\n   *    modalBg: 'red'\n   *  }\n   * })\n   *\n   * function Example() {\n   *  return <PayEmbed client={client} theme={customTheme} />\n   * }\n   * ```\n   */\n  theme?: \"light\" | \"dark\" | Theme;\n\n  /**\n   * Customize the options for \"Connect\" Button showing in the PayEmbed UI when the user is not connected to a wallet.\n   *\n   * Refer to the [`PayEmbedConnectOptions`](https://portal.thirdweb.com/references/typescript/v5/PayEmbedConnectOptions) type for more details.\n   */\n  connectOptions?: PayEmbedConnectOptions;\n\n  /**\n   * All wallet IDs included in this array will be hidden from wallet selection when connected.\n   */\n  hiddenWallets?: WalletId[];\n\n  /**\n   * The wallet that should be pre-selected in the PayEmbed UI.\n   */\n  activeWallet?: Wallet;\n\n  style?: React.CSSProperties;\n\n  className?: string;\n\n  /**\n   * @hidden\n   */\n  paymentLinkId?: string;\n};\n\n/**\n * Embed a prebuilt UI for funding wallets, purchases or transactions with crypto or fiat.\n *\n * @param props - Props of type [`PayEmbedProps`](https://portal.thirdweb.com/references/typescript/v5/PayEmbedProps) to configure the PayEmbed component.\n *\n * @example\n * ### Default configuration\n *\n * By default, the `PayEmbed` component will allows users to fund their wallets with crypto or fiat on any of the supported chains..\n *\n * ```tsx\n * <PayEmbed\n *   client={client}\n *  />\n * ```\n *\n * ### Top up wallets\n *\n * You can set the `mode` option to `\"fund_wallet\"` to allow users to top up their wallets with crypto or fiat.\n *\n * ```tsx\n * <PayEmbed\n *   client={client}\n *   payOptions={{\n *     mode: \"fund_wallet\",\n *     metadata: {\n *       name: \"Get funds\", // title of the payment modal\n *     },\n *     prefillBuy: {\n *       chain: base, // chain to prefill the buy screen with\n *       amount: \"0.01\", // amount to prefill the buy screen with\n *     },\n *   }}\n *  />\n * ```\n *\n * ### Direct Payments\n *\n * You can set the `mode` option to `\"direct_payment\"` to allow users to make a direct payment to a wallet address.\n *\n * ```tsx\n * <PayEmbed\n *   client={client}\n *   theme={\"light\"}\n *   payOptions={{\n *     mode: \"direct_payment\",\n *     paymentInfo: {\n *       amount: \"35\",\n *       chain: base,\n *       token: getDefaultToken(base, \"USDC\"),\n *       sellerAddress: \"0x...\", // the wallet address of the seller\n *     },\n *     metadata: {\n *       name: \"Black Hoodie (Size L)\",\n *       image: \"/drip-hoodie.png\",\n *     },\n *   }}\n *  />\n * ```\n *\n * ### Transactions\n *\n * You can set the `mode` option to `\"transaction\"` to allow users to execute a transaction with a different wallet, chain or token.\n *\n * ```tsx\n * <PayEmbed\n *   client={client}\n *   payOptions={{\n *     mode: \"transaction\",\n *     // can be any transaction\n *     transaction: claimTo({\n *       contract: nftContract,\n *       quantity: 1n,\n *       tokenId: 0n,\n *       to: \"0x...\",\n *     }),\n *     // this could be any metadata, including NFT metadata\n *     metadata: {\n *       name: \"VIP Ticket\",\n *       image: \"https://...\",\n *     },\n *   }}\n *  />\n * ```\n * You can also handle ERC20 payments by passing `erc20value` to your transaction:\n *\n * ```tsx\n * <PayEmbed\n *   client={client}\n *   payOptions={{\n *     mode: \"transaction\",\n *     transaction: prepareContractCall({\n *       contract: yourContract,\n *       functionName: \"purchase\",\n *       args: [arg1, arg2, ...],\n *       erc20value: {\n *         token: USDC_TOKEN_ADDRESS, // the erc20 token required to purchase\n *         amount: toUnits(\"100\", 6), // the amount of erc20 token required to purchase\n *       },\n *     }),\n *   }}\n *  />\n * ```\n *\n * ### Enable/Disable payment methods\n *\n * You can disable the use of crypto or fiat by setting the `buyWithCrypto` or `buyWithFiat` options to `false`.\n *\n * ```tsx\n * <PayEmbed\n *   client={client}\n *   payOptions={{\n *     buyWithFiat: false,\n *   }}\n *  />\n * ```\n *\n * ### Customize the UI\n *\n * You can customize the UI of the `PayEmbed` component by passing a custom theme object to the `theme` prop.\n *\n * ```tsx\n * <PayEmbed\n *   client={client}\n *   theme={darkTheme({\n *     colors: {\n *       modalBg: \"red\",\n *     },\n *   })}\n * />\n * ```\n *\n * Refer to the [`Theme`](https://portal.thirdweb.com/references/typescript/v5/Theme) type for more details.\n *\n * ### Configure the wallet connection\n *\n * You can customize the wallet connection flow by passing a `connectOptions` object to the `PayEmbed` component.\n *\n * ```tsx\n * <PayEmbed\n *   client={client}\n *   connectOptions={{\n *     connectModal: {\n *       size: 'compact',\n *       title: \"Sign in\",\n *     }\n *   }}\n * />\n * ```\n *\n * Refer to the [`PayEmbedConnectOptions`](https://portal.thirdweb.com/references/typescript/v5/PayEmbedConnectOptions) type for more details.\n *\n * @deprecated Use `BuyWidget`, `CheckoutWidget` or `TransactionWidget` instead.\n */\nexport function PayEmbed(props: PayEmbedProps) {\n  const localeQuery = useConnectLocale(props.locale || \"en_US\");\n  const [screen, setScreen] = useState<\"buy\" | \"execute-tx\">(\"buy\");\n  const theme = props.theme || \"dark\";\n  const connectionManager = useConnectionManager();\n  const activeAccount = useActiveAccount();\n  const activeWallet = useActiveWallet();\n  const siweAuth = useSiweAuth(\n    activeWallet,\n    activeAccount,\n    props.connectOptions?.auth,\n  );\n\n  // Add props.chain and props.chains to defined chains store\n  useEffect(() => {\n    if (props.connectOptions?.chain) {\n      connectionManager.defineChains([props.connectOptions?.chain]);\n    }\n  }, [props.connectOptions?.chain, connectionManager]);\n\n  useEffect(() => {\n    if (props.connectOptions?.chains) {\n      connectionManager.defineChains(props.connectOptions?.chains);\n    }\n  }, [props.connectOptions?.chains, connectionManager]);\n\n  useEffect(() => {\n    if (props.activeWallet) {\n      connectionManager.setActiveWallet(props.activeWallet);\n    }\n  }, [props.activeWallet, connectionManager]);\n\n  let content = null;\n  const metadata =\n    props.payOptions && \"metadata\" in props.payOptions\n      ? props.payOptions.metadata\n      : null;\n\n  if (\n    props.payOptions?.mode === \"fund_wallet\" &&\n    props.payOptions?.prefillBuy\n  ) {\n    return (\n      <BuyWidget\n        amount={props.payOptions.prefillBuy.amount || \"0.01\"}\n        chain={props.payOptions.prefillBuy.chain}\n        client={props.client}\n        onSuccess={() => props.payOptions?.onPurchaseSuccess?.()}\n        paymentMethods={\n          props.payOptions?.buyWithFiat === false\n            ? [\"crypto\"]\n            : props.payOptions?.buyWithCrypto === false\n              ? [\"card\"]\n              : [\"crypto\", \"card\"]\n        }\n        theme={theme}\n        title={metadata?.name || \"Buy\"}\n        tokenAddress={\n          props.payOptions.prefillBuy.token?.address as Address | undefined\n        }\n      />\n    );\n  }\n\n  if (props.payOptions?.mode === \"direct_payment\") {\n    return (\n      <CheckoutWidget\n        amount={(props.payOptions.paymentInfo as { amount: string }).amount}\n        chain={props.payOptions.paymentInfo.chain}\n        client={props.client}\n        description={metadata?.description}\n        image={metadata?.image}\n        name={metadata?.name || \"Checkout\"}\n        onSuccess={() => props.payOptions?.onPurchaseSuccess?.()}\n        paymentMethods={\n          props.payOptions?.buyWithFiat === false\n            ? [\"crypto\"]\n            : [\"crypto\", \"card\"]\n        }\n        seller={props.payOptions.paymentInfo.sellerAddress as Address}\n        theme={theme}\n        tokenAddress={\n          props.payOptions.paymentInfo.token?.address as Address | undefined\n        }\n      />\n    );\n  }\n\n  if (props.payOptions?.mode === \"transaction\") {\n    return (\n      <TransactionWidget\n        client={props.client}\n        description={metadata?.description}\n        image={metadata?.image}\n        onSuccess={() => props.payOptions?.onPurchaseSuccess?.()}\n        paymentMethods={\n          props.payOptions?.buyWithFiat === false\n            ? [\"crypto\"]\n            : [\"crypto\", \"card\"]\n        }\n        theme={theme}\n        title={metadata?.name}\n        transaction={props.payOptions.transaction}\n      />\n    );\n  }\n\n  if (!localeQuery.data) {\n    content = (\n      <div\n        style={{\n          alignItems: \"center\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          minHeight: \"350px\",\n        }}\n      >\n        <Spinner color=\"secondaryText\" size=\"xl\" />\n      </div>\n    );\n  } else {\n    content = (\n      <>\n        <AutoConnect client={props.client} siweAuth={siweAuth} />\n        {screen === \"buy\" && (\n          <BuyScreen\n            client={props.client}\n            connectLocale={localeQuery.data}\n            connectOptions={props.connectOptions}\n            hiddenWallets={props.hiddenWallets}\n            isEmbed={true}\n            onBack={undefined}\n            onDone={() => {\n              if (props.payOptions?.mode === \"transaction\") {\n                setScreen(\"execute-tx\");\n              }\n            }}\n            paymentLinkId={props.paymentLinkId}\n            payOptions={\n              props.payOptions || {\n                mode: \"fund_wallet\",\n              }\n            }\n            supportedTokens={props.supportedTokens}\n            theme={theme}\n            title={metadata?.name || \"Buy\"}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <CustomThemeProvider theme={theme}>\n      <EmbedContainer\n        className={props.className}\n        modalSize=\"compact\"\n        style={props.style}\n      >\n        <DynamicHeight>{content}</DynamicHeight>\n      </EmbedContainer>\n    </CustomThemeProvider>\n  );\n}\n\n/**\n * Connection options for the `PayEmbed` component\n *\n * @example\n * ```tsx\n * <PayEmbed client={client} connectOptions={{\n *    connectModal: {\n *      size: 'compact',\n *      title: \"Sign in\",\n *    }\n *  }}\n * />\n * ```\n */\nexport type PayEmbedConnectOptions = {\n  /**\n   * Configurations for the `ConnectButton`'s Modal that is shown for connecting a wallet\n   * Refer to the [`ConnectButton_connectModalOptions`](https://portal.thirdweb.com/references/typescript/v5/ConnectButton_connectModalOptions) type for more details\n   */\n  connectModal?: ConnectButton_connectModalOptions;\n\n  /**\n   * Configure options for WalletConnect\n   *\n   * By default WalletConnect uses the thirdweb's default project id.\n   * Setting your own project id is recommended.\n   *\n   * You can create a project id by signing up on [walletconnect.com](https://walletconnect.com/)\n   */\n  walletConnect?: {\n    projectId?: string;\n  };\n\n  /**\n   * Enable Account abstraction for all wallets. This will connect to the users's smart account based on the connected personal wallet and the given options.\n   *\n   * This allows to sponsor gas fees for your user's transaction using the thirdweb account abstraction infrastructure.\n   *\n   */\n  accountAbstraction?: SmartWalletOptions;\n\n  /**\n   * Array of wallets to show in Connect Modal. If not provided, default wallets will be used.\n   */\n  wallets?: Wallet[];\n  /**\n   * When the user has connected their wallet to your site, this configuration determines whether or not you want to automatically connect to the last connected wallet when user visits your site again in the future.\n   *\n   * By default it is set to `{ timeout: 15000 }` meaning that autoConnect is enabled and if the autoConnection does not succeed within 15 seconds, it will be cancelled.\n   *\n   * If you want to disable autoConnect, set this prop to `false`.\n   *\n   * If you want to customize the timeout, you can assign an object with a `timeout` key to this prop.\n   * ```\n   */\n  autoConnect?:\n    | {\n        timeout: number;\n      }\n    | boolean;\n\n  /**\n   * Metadata of the app that will be passed to connected wallet. Setting this is highly recommended.\n   */\n  appMetadata?: AppMetadata;\n\n  /**\n   * The [`Chain`](https://portal.thirdweb.com/references/typescript/v5/Chain) object of the blockchain you want the wallet to connect to\n   *\n   * If a `chain` is not specified, Wallet will be connected to whatever is the default set in the wallet.\n   *\n   * If a `chain` is specified, Wallet will be prompted to switch to given chain after connection if it is not already connected to it.\n   * This ensures that the wallet is connected to the correct blockchain before interacting with your app.\n   *\n   * The `ConnectButton` also shows a \"Switch Network\" button until the wallet is connected to the specified chain. Clicking on the \"Switch Network\" button triggers the wallet to switch to the specified chain.\n   *\n   * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.\n   * At minimum, you need to pass the `id` of the blockchain to `defineChain` function to create a `Chain` object.\n   * ```\n   */\n  chain?: Chain;\n\n  /**\n   * Array of chains that your app supports.\n   *\n   * This is only relevant if your app is a multi-chain app and works across multiple blockchains.\n   * If your app only works on a single blockchain, you should only specify the `chain` prop.\n   *\n   * Given list of chains will used in various ways:\n   * - They will be displayed in the network selector in the `ConnectButton`'s details modal post connection\n   * - They will be sent to wallet at the time of connection if the wallet supports requesting multiple chains ( example: WalletConnect ) so that users can switch between the chains post connection easily\n   *\n   * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.\n   * At minimum, you need to pass the `id` of the blockchain to `defineChain` function to create a `Chain` object.\n   *\n   * ```tsx\n   * import { defineChain } from \"thirdweb/react\";\n   *\n   * const polygon = defineChain({\n   *   id: 137,\n   * });\n   * ```\n   */\n  chains?: Chain[];\n\n  /**\n   * Wallets to show as recommended in the `ConnectButton`'s Modal\n   */\n  recommendedWallets?: Wallet[];\n\n  /**\n   * By default, ConnectButton modal shows a \"All Wallets\" button that shows a list of 500+ wallets.\n   *\n   * You can disable this button by setting `showAllWallets` prop to `false`\n   */\n  showAllWallets?: boolean;\n\n  /**\n   * Enable SIWE (Sign in with Ethererum) by passing an object of type `SiweAuthOptions` to\n   * enforce the users to sign a message after connecting their wallet to authenticate themselves.\n   *\n   * Refer to the [`SiweAuthOptions`](https://portal.thirdweb.com/references/typescript/v5/SiweAuthOptions) for more details\n   */\n  auth?: SiweAuthOptions;\n};\n", "\"use client\";\n\nimport { createContext, useContext } from \"react\";\nimport type { ThirdwebContract } from \"../../../../../contract/contract.js\";\n\n/**\n * Props for the <NFT> component\n * @component\n */\nexport type NFTProviderProps = {\n  /**\n   * The NFT contract address. Accepts both ERC721 and ERC1155 contracts\n   */\n  contract: ThirdwebContract;\n  /**\n   * The tokenId whose info you want to display\n   */\n  tokenId: bigint;\n};\n\n/**\n * @internal\n */\nexport const NFTProviderContext = /* @__PURE__ */ createContext<\n  NFTProviderProps | undefined\n>(undefined);\n\n/**\n * @internal\n */\nexport function useNFTContext() {\n  const ctx = useContext(NFTProviderContext);\n  if (!ctx) {\n    throw new Error(\n      \"NFTProviderContext not found. Make sure you are using NFTMedia, NFTDescription, etc. inside a <NFTProvider /> component\",\n    );\n  }\n  return ctx;\n}\n\n/**\n * A React context provider component that supplies NFT-related data to its child components.\n *\n * This component serves as a wrapper around the `NFTProviderContext.Provider` and passes\n * the provided NFT data down to all of its child components through the context API.\n *\n *\n * @param {React.PropsWithChildren<NFTProviderProps>} props - The props for the NFT provider\n *\n * @example\n * ```tsx\n * import { getContract } from \"thirdweb\";\n * import { NFTProvider, NFTMedia, NFTDescription, NFTName } from \"thirdweb/react\";\n *\n * const contract = getContract({\n *   address: \"0x...\",\n *   chain: ethereum,\n *   client: yourThirdwebClient,\n * });\n *\n * <NFTProvider contract={contract} tokenId={0n}>\n *    <NFTMedia />\n *    <NFTDescription />\n *    <NFTName />\n * </NFTProvider>\n * ```\n * @component\n * @nft\n * @beta\n */\nexport function NFTProvider(props: React.PropsWithChildren<NFTProviderProps>) {\n  return (\n    <NFTProviderContext.Provider value={props}>\n      {props.children}\n    </NFTProviderContext.Provider>\n  );\n}\n", "import { getNFT as getNFT721 } from \"../../../../../extensions/erc721/read/getNFT.js\";\nimport { getNFT as getNFT1155 } from \"../../../../../extensions/erc1155/read/getNFT.js\";\nimport type { NFT } from \"../../../../../utils/nft/parseNft.js\";\nimport { withCache } from \"../../../../../utils/promise/withCache.js\";\nimport type { NFTProviderProps } from \"./provider.js\";\n\n/**\n * @internal\n */\nexport async function getNFTInfo(options: NFTProviderProps): Promise<NFT> {\n  return withCache(\n    async () => {\n      const nft = await Promise.allSettled([\n        getNFT721({\n          ...options,\n          useIndexer: false, // TODO (insight): switch this call to only call insight once\n        }),\n        getNFT1155({\n          ...options,\n          useIndexer: false, // TODO (insight): switch this call to only call insight once\n        }),\n      ]).then(([possibleNFT721, possibleNFT1155]) => {\n        // getNFT extension always return an NFT object\n        // so we need to check if the tokenURI exists\n        if (\n          possibleNFT721.status === \"fulfilled\" &&\n          possibleNFT721.value.tokenURI\n        ) {\n          return possibleNFT721.value;\n        }\n        if (\n          possibleNFT1155.status === \"fulfilled\" &&\n          possibleNFT1155.value.tokenURI\n        ) {\n          return possibleNFT1155.value;\n        }\n        throw new Error(\"Failed to load NFT metadata\");\n      });\n      return nft;\n    },\n    {\n      cacheKey: `nft_info:${options.contract.chain.id}:${options.contract.address}:${options.tokenId.toString()}`,\n      cacheTime: 15 * 60 * 1000,\n    },\n  );\n}\n", "\"use client\";\n\nimport { type UseQueryOptions, useQuery } from \"@tanstack/react-query\";\nimport type { JSX } from \"react\";\nimport type { ThirdwebContract } from \"../../../../../contract/contract.js\";\nimport { getFunctionId } from \"../../../../../utils/function-id.js\";\nimport { useNFTContext } from \"./provider.js\";\nimport { getNFTInfo } from \"./utils.js\";\n\nexport interface NFTDescriptionProps\n  extends Omit<React.HTMLAttributes<HTMLSpanElement>, \"children\"> {\n  loadingComponent?: JSX.Element;\n  fallbackComponent?: JSX.Element;\n  /**\n   * Optional `useQuery` params\n   */\n  queryOptions?: Omit<UseQueryOptions<string>, \"queryFn\" | \"queryKey\">;\n  /**\n   * This prop can be a string or a (async) function that resolves to a string, representing the description of the NFT\n   * This is particularly useful if you already have a way to fetch the data.\n   */\n  descriptionResolver?: string | (() => string) | (() => Promise<string>);\n}\n\n/**\n * This component fetches and displays an NFT's description. It inherits all the attributes of a <span>\n * so you can style it just like how you would style a <span> element.\n * @returns A <span> element containing the description of the NFT\n *\n * @example\n * ### Basic usage\n * ```tsx\n * import { NFTProvider, NFTDescription } from \"thirdweb/react\";\n *\n * <NFTProvider>\n *   <NFTDescription />\n * </NFTProvider>\n * ```\n *\n * ### Show a loading sign while the description is being fetched\n * ```tsx\n * import { NFTProvider, NFTDescription } from \"thirdweb/react\";\n *\n * <NFTProvider>\n *   <NFTDescription loadingComponent={<YourLoadingSign />} />\n * </NFTProvider>\n * ```\n *\n * ### Show something in case the description failed to resolve\n * ```tsx\n * import { NFTProvider, NFTDescription } from \"thirdweb/react\";\n *\n * <NFTProvider>\n *   <NFTDescription fallbackComponent={<span>Failed to load description</span>} />\n * </NFTProvider>\n * ```\n *\n * ### Custom query options for useQuery (tanstack-query)\n * ```tsx\n * import { NFTProvider, NFTDescription } from \"thirdweb/react\";\n *\n * <NFTProvider>\n *   <NFTDescription queryOptions={{ retry: 3, enabled: false, }} />\n * </NFTProvider>\n * ```\n *\n * ### Override the description with the `descriptionResolver` prop\n * If you already have the url, you can skip the network requests and pass it directly to the NFTDescription\n * ```tsx\n * <NFTDescription descriptionResolver=\"The desc of the NFT\" />\n * ```\n *\n * You can also pass in your own custom (async) function that retrieves the description\n * ```tsx\n * const getDescription = async () => {\n *   // ...\n *   return description;\n * };\n *\n * <NFTDescription descriptionResolver={getDescription} />\n * ```\n * @component\n * @nft\n * @beta\n */\nexport function NFTDescription({\n  loadingComponent,\n  fallbackComponent,\n  queryOptions,\n  descriptionResolver,\n  ...restProps\n}: NFTDescriptionProps) {\n  const { contract, tokenId } = useNFTContext();\n  const descQuery = useQuery({\n    queryFn: async (): Promise<string> =>\n      fetchNftDescription({ contract, descriptionResolver, tokenId }),\n    queryKey: [\n      \"_internal_nft_description_\",\n      contract.chain.id,\n      contract.address,\n      tokenId.toString(),\n      {\n        resolver:\n          typeof descriptionResolver === \"string\"\n            ? descriptionResolver\n            : typeof descriptionResolver === \"function\"\n              ? getFunctionId(descriptionResolver)\n              : undefined,\n      },\n    ],\n    ...queryOptions,\n  });\n\n  if (descQuery.isLoading) {\n    return loadingComponent || null;\n  }\n\n  if (!descQuery.data) {\n    return fallbackComponent || null;\n  }\n\n  return <span {...restProps}>{descQuery.data}</span>;\n}\n\n/**\n * @internal Exported for tests\n */\nexport async function fetchNftDescription(props: {\n  descriptionResolver?: string | (() => string) | (() => Promise<string>);\n  contract: ThirdwebContract;\n  tokenId: bigint;\n}): Promise<string> {\n  const { descriptionResolver, contract, tokenId } = props;\n  if (typeof descriptionResolver === \"string\") {\n    return descriptionResolver;\n  }\n  if (typeof descriptionResolver === \"function\") {\n    return descriptionResolver();\n  }\n  const nft = await getNFTInfo({ contract, tokenId }).catch(() => undefined);\n  if (!nft) {\n    throw new Error(\"Failed to resolve NFT info\");\n  }\n  if (typeof nft.metadata.description !== \"string\") {\n    throw new Error(\"Failed to resolve NFT description\");\n  }\n  return nft.metadata.description;\n}\n", "\"use client\";\n\nimport { type UseQueryOptions, useQuery } from \"@tanstack/react-query\";\nimport type { JSX } from \"react\";\nimport type { ThirdwebContract } from \"../../../../../contract/contract.js\";\nimport { getFunctionId } from \"../../../../../utils/function-id.js\";\nimport { MediaRenderer } from \"../../MediaRenderer/MediaRenderer.js\";\nimport type { MediaRendererProps } from \"../../MediaRenderer/types.js\";\nimport { useNFTContext } from \"./provider.js\";\nimport { getNFTInfo } from \"./utils.js\";\n\n/**\n * @component\n * @beta\n * @wallet\n */\nexport type NFTMediaInfo = {\n  src: string;\n  poster: string | undefined;\n};\n\n/**\n * @component\n * @beta\n * @wallet\n * The props for the <NFTMedia /> component\n * It is similar to the [`MediaRendererProps`](https://portal.thirdweb.com/references/typescript/v5/MediaRendererProps)\n * (excluding `src`, `poster` and `client`) that you can\n * use to style the NFTMedia\n */\nexport type NFTMediaProps = Omit<\n  MediaRendererProps,\n  \"src\" | \"poster\" | \"client\"\n> & {\n  loadingComponent?: JSX.Element;\n  fallbackComponent?: JSX.Element;\n  /**\n   * Optional `useQuery` params\n   */\n  queryOptions?: Omit<UseQueryOptions<NFTMediaInfo>, \"queryFn\" | \"queryKey\">;\n  /**\n   * This prop can be a string or a (async) function that resolves to a string, representing the media url of the NFT\n   * This is particularly useful if you already have a way to fetch the image.\n   * In case of function, the function must resolve to an object of type `NFTMediaInfo`\n   */\n  mediaResolver?:\n    | NFTMediaInfo\n    | (() => NFTMediaInfo)\n    | (() => Promise<NFTMediaInfo>);\n};\n\n/**\n * This component fetches and displays an NFT's media. It uses thirdweb [`MediaRenderer`](https://portal.thirdweb.com/refernces/typescript/v5/MediaRenderer) under the hood\n * so you can style it just like how you would style a MediaRenderer.\n * @returns A MediaRenderer component\n *\n * @component\n *\n * @example\n * ### Basic usage\n * ```tsx\n * import { NFTProvider, NFTMedia } from \"thirdweb/react\";\n *\n * <NFTProvider>\n *   <NFTMedia />\n * </NFTProvider>\n * ```\n *\n * ### Show a loading sign while the media is being fetched\n * ```tsx\n * import { NFTProvider, NFTMedia } from \"thirdweb/react\";\n *\n * <NFTProvider>\n *   <NFTMedia loadingComponent={<YourLoadingSign />} />\n * </NFTProvider>\n * ```\n *\n * ### Show something in case the media failed to resolve\n * ```tsx\n * import { NFTProvider, NFTMedia } from \"thirdweb/react\";\n *\n * <NFTProvider>\n *   <NFTMedia fallbackComponent={<span>Failed to load media</span>} />\n * </NFTProvider>\n * ```\n *\n * ### Custom query options for useQuery (tanstack-query)\n * ```tsx\n * import { NFTProvider, NFTMedia } from \"thirdweb/react\";\n *\n * <NFTProvider>\n *   <NFTMedia queryOptions={{ retry: 3, enabled: false, }} />\n * </NFTProvider>\n * ```\n *\n * ### Basic stylings\n *\n * You can style NFTMedia with the `style` and `className` props.\n *\n * ```tsx\n * <NFTMedia style={{ borderRadius: \"8px\" }} className=\"mx-auto\" />\n * ```\n *\n * ### Override the media with the `mediaResolver` prop\n * If you already have the url, you can skip the network requests and pass it directly to the NFTMedia\n * ```tsx\n * <NFTMedia mediaResolver={{\n *   src: \"/cat_video.mp4\",\n *   // Poster is applicable to medias that are videos and audios\n *   poster: \"/cat-image.png\",\n * }} />\n * ```\n *\n * You can also pass in your own custom (async) function that retrieves the media url\n * ```tsx\n * const getMedia = async () => {\n *   const url = getNFTMedia(props);\n *   return url;\n * };\n *\n * <NFTMedia mediaResolver={getMedia} />\n * ```\n * @nft\n * @beta\n */\nexport function NFTMedia({\n  loadingComponent,\n  fallbackComponent,\n  queryOptions,\n  mediaResolver,\n  ...mediaRendererProps\n}: NFTMediaProps) {\n  const { contract, tokenId } = useNFTContext();\n  const mediaQuery = useQuery({\n    queryFn: async (): Promise<NFTMediaInfo> =>\n      fetchNftMedia({ contract, mediaResolver, tokenId }),\n    queryKey: getQueryKey({\n      chainId: contract.chain.id,\n      contractAddress: contract.address,\n      mediaResolver,\n      tokenId,\n    }),\n    ...queryOptions,\n  });\n\n  if (mediaQuery.isLoading) {\n    return loadingComponent || null;\n  }\n\n  if (!mediaQuery.data) {\n    return fallbackComponent || null;\n  }\n\n  return (\n    <MediaRenderer\n      client={contract.client}\n      poster={mediaQuery.data.poster}\n      src={mediaQuery.data.src}\n      {...mediaRendererProps}\n    />\n  );\n}\n\n/**\n * @internal\n */\nexport function getQueryKey(props: {\n  contractAddress: string;\n  chainId: number;\n  tokenId: bigint;\n  mediaResolver?:\n    | NFTMediaInfo\n    | (() => NFTMediaInfo)\n    | (() => Promise<NFTMediaInfo>);\n}) {\n  const { chainId, tokenId, mediaResolver, contractAddress } = props;\n  return [\n    \"_internal_nft_media_\",\n    chainId,\n    contractAddress,\n    tokenId.toString(),\n    {\n      resolver:\n        typeof mediaResolver === \"object\"\n          ? mediaResolver\n          : typeof mediaResolver === \"function\"\n            ? getFunctionId(mediaResolver)\n            : undefined,\n    },\n  ] as const;\n}\n\n/**\n * @internal Exported for tests only\n */\nexport async function fetchNftMedia(props: {\n  mediaResolver?:\n    | NFTMediaInfo\n    | (() => NFTMediaInfo)\n    | (() => Promise<NFTMediaInfo>);\n  contract: ThirdwebContract;\n  tokenId: bigint;\n}): Promise<{ src: string; poster: string | undefined }> {\n  const { mediaResolver, contract, tokenId } = props;\n  if (typeof mediaResolver === \"object\") {\n    return mediaResolver;\n  }\n  if (typeof mediaResolver === \"function\") {\n    return mediaResolver();\n  }\n  const nft = await getNFTInfo({ contract, tokenId }).catch(() => undefined);\n  if (!nft) {\n    throw new Error(\"Failed to resolve NFT info\");\n  }\n  const animation_url = nft.metadata.animation_url;\n  const image = nft.metadata.image || nft.metadata.image_url;\n  if (animation_url) {\n    return {\n      poster: image || undefined,\n      src: animation_url,\n    };\n  }\n  if (image) {\n    return {\n      poster: undefined,\n      src: image,\n    };\n  }\n  throw new Error(\"Failed to resolve NFT media\");\n}\n", "\"use client\";\n\nimport { type UseQueryOptions, useQuery } from \"@tanstack/react-query\";\nimport type { JSX } from \"react\";\nimport type { ThirdwebContract } from \"../../../../../contract/contract.js\";\nimport { getFunctionId } from \"../../../../../utils/function-id.js\";\nimport { useNFTContext } from \"./provider.js\";\nimport { getNFTInfo } from \"./utils.js\";\n\nexport interface NFTNameProps\n  extends Omit<React.HTMLAttributes<HTMLSpanElement>, \"children\"> {\n  loadingComponent?: JSX.Element;\n  fallbackComponent?: JSX.Element;\n  /**\n   * Optional `useQuery` params\n   */\n  queryOptions?: Omit<UseQueryOptions<string>, \"queryFn\" | \"queryKey\">;\n  /**\n   * This prop can be a string or a (async) function that resolves to a string, representing the name of the NFT\n   * This is particularly useful if you already have a way to fetch the name of the NFT.\n   */\n  nameResolver?: string | (() => string) | (() => Promise<string>);\n}\n\n/**\n * This component fetches and displays an NFT's name. It takes in a `className` and `style` props\n * so you can style it just like how you would style a <span> element.\n * @returns A <span> element containing the name of the NFT\n *\n * @example\n * ### Basic usage\n * ```tsx\n * import { NFTProvider, NFTName } from \"thirdweb/react\";\n *\n * <NFTProvider>\n *   <NFTName />\n * </NFTProvider>\n * ```\n *\n * ### Show a loading sign while the name is being fetched\n * ```tsx\n * import { NFTProvider, NFTName } from \"thirdweb/react\";\n *\n * <NFTProvider>\n *   <NFTName loadingComponent={<YourLoadingSign />} />\n * </NFTProvider>\n * ```\n *\n * ### Show something in case the name failed to resolve\n * ```tsx\n * import { NFTProvider, NFTName } from \"thirdweb/react\";\n *\n * <NFTProvider>\n *   <NFTName fallbackComponent={<span>Failed to load name</span>} />\n * </NFTProvider>\n * ```\n *\n * ### Custom query options for useQuery (tanstack-query)\n * ```tsx\n * import { NFTProvider, NFTName } from \"thirdweb/react\";\n *\n * <NFTProvider>\n *   <NFTName queryOptions={{ retry: 3, enabled: false, }} />\n * </NFTProvider>\n * ```\n *\n * ### Override the name with the `nameResolver` prop\n * If you already have the name, you can skip the network requests and pass it directly to the NFTName\n * ```tsx\n * <NFTName nameResolver=\"Doodles #1\" />\n * ```\n *\n * You can also pass in your own custom (async) function that retrieves the name\n * ```tsx\n * const getName = async () => {\n *   // ...\n *   return name;\n * };\n *\n * <NFTName nameResolver={getName} />\n * ```\n *\n * @nft\n * @component\n * @beta\n */\nexport function NFTName({\n  loadingComponent,\n  fallbackComponent,\n  queryOptions,\n  nameResolver,\n  ...restProps\n}: NFTNameProps) {\n  const { contract, tokenId } = useNFTContext();\n\n  const nameQuery = useQuery({\n    queryFn: async (): Promise<string> =>\n      fetchNftName({ contract, nameResolver, tokenId }),\n    queryKey: getQueryKey({\n      chainId: contract.chain.id,\n      contractAddress: contract.address,\n      nameResolver,\n      tokenId,\n    }),\n    ...queryOptions,\n  });\n\n  if (nameQuery.isLoading) {\n    return loadingComponent || null;\n  }\n\n  if (!nameQuery.data) {\n    return fallbackComponent || null;\n  }\n  return <span {...restProps}>{nameQuery.data}</span>;\n}\n\n/**\n * @internal\n */\nexport function getQueryKey(props: {\n  contractAddress: string;\n  chainId: number;\n  tokenId: bigint;\n  nameResolver?: string | (() => string) | (() => Promise<string>);\n}) {\n  const { chainId, tokenId, nameResolver, contractAddress } = props;\n  return [\n    \"_internal_nft_name_\",\n    chainId,\n    contractAddress,\n    tokenId.toString(),\n    {\n      resolver:\n        typeof nameResolver === \"string\"\n          ? nameResolver\n          : typeof nameResolver === \"function\"\n            ? getFunctionId(nameResolver)\n            : undefined,\n    },\n  ] as const;\n}\n\n/**\n * @internal Exported for tests\n */\nexport async function fetchNftName(props: {\n  nameResolver?: string | (() => string) | (() => Promise<string>);\n  contract: ThirdwebContract;\n  tokenId: bigint;\n}): Promise<string> {\n  const { nameResolver, contract, tokenId } = props;\n  if (typeof nameResolver === \"string\") {\n    return nameResolver;\n  }\n  if (typeof nameResolver === \"function\") {\n    return nameResolver();\n  }\n  const nft = await getNFTInfo({ contract, tokenId }).catch(() => undefined);\n  if (!nft) {\n    throw new Error(\"Failed to resolve NFT info\");\n  }\n  if (typeof nft.metadata.name !== \"string\") {\n    throw new Error(\"Failed to resolve NFT name\");\n  }\n  return nft.metadata.name;\n}\n", "\"use client\";\n\nimport type { Address } from \"abitype\";\nimport type React from \"react\";\nimport { createContext, useContext } from \"react\";\nimport type { Chain } from \"../../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../../client/client.js\";\n\n/**\n * Props for the <TokenProvider /> component\n * @component\n * @token\n */\nexport type TokenProviderProps = {\n  /**\n   * The token (ERC20) contract address\n   */\n  address: Address;\n  /**\n   * thirdweb Client\n   */\n  client: ThirdwebClient;\n  /**\n   * The chain (network) that the token is on\n   */\n  chain: Chain;\n};\n\nconst TokenProviderContext = /* @__PURE__ */ createContext<\n  TokenProviderProps | undefined\n>(undefined);\n\n/**\n * A React context provider component that supplies Token-related data to its child components.\n *\n * This component serves as a wrapper around the `TokenProviderContext.Provider` and passes\n * the provided token data down to all of its child components through the context API.\n *\n * @example\n * ### Basic usage\n * ```tsx\n * import { TokenProvider, TokenIcon, TokenName  } from \"thirdweb/react\";\n * import { ethereum } from \"thirdweb/chains\";\n *\n * <TokenProvider address=\"0x...\" client={...} chain={ethereum}>\n *   <TokenIcon />\n *   <TokenName />\n * </TokenProvider>\n * ```\n *\n * ### This component also works with native token!\n * ```tsx\n * import { NATIVE_TOKEN_ADDRESS} from \"thirdweb\";\n * import { ethereum } from \"thirdweb/chains\";\n *\n * <TokenProvider address={NATIVE_TOKEN_ADDRESS} chain={ethereum} client={client}>\n *   <TokenSymbol /> // \"ETH\"\n * </TokenProvider>\n * ```\n *\n * @component\n * @token\n * @beta\n */\nexport function TokenProvider(\n  props: React.PropsWithChildren<TokenProviderProps>,\n) {\n  return (\n    <TokenProviderContext.Provider value={props}>\n      {props.children}\n    </TokenProviderContext.Provider>\n  );\n}\n\n/**\n * @internal\n */\nexport function useTokenContext() {\n  const ctx = useContext(TokenProviderContext);\n  if (!ctx) {\n    throw new Error(\n      \"TokenProviderContext not found. Make sure you are using TokenName, TokenIcon, TokenSymbol etc. inside a <TokenProvider /> component\",\n    );\n  }\n  return ctx;\n}\n", "\"use client\";\n\nimport { type UseQueryOptions, useQuery } from \"@tanstack/react-query\";\nimport type { JSX } from \"react\";\nimport { getChainMetadata } from \"../../../../../chains/utils.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../constants/addresses.js\";\nimport { getContract } from \"../../../../../contract/contract.js\";\nimport { getContractMetadata } from \"../../../../../extensions/common/read/getContractMetadata.js\";\nimport { getFunctionId } from \"../../../../../utils/function-id.js\";\nimport { resolveScheme } from \"../../../../../utils/ipfs.js\";\nimport { useTokenContext } from \"./provider.js\";\n\n/**\n * Props for the TokenIcon component\n * @component\n * @token\n */\nexport interface TokenIconProps\n  extends Omit<React.ImgHTMLAttributes<HTMLImageElement>, \"src\"> {\n  /**\n   * This prop can be a string or a (async) function that resolves to a string, representing the icon url of the token\n   * This is particularly useful if you already have a way to fetch the token icon.\n   */\n  iconResolver?: string | (() => string) | (() => Promise<string>);\n  /**\n   * This component will be shown while the avatar of the icon is being fetched\n   * If not passed, the component will return `null`.\n   *\n   * You can pass a loading sign or spinner to this prop.\n   * @example\n   * ```tsx\n   * <TokenIcon loadingComponent={<Spinner />} />\n   * ```\n   */\n  loadingComponent?: JSX.Element;\n  /**\n   * This component will be shown if the request for fetching the avatar is done\n   * but could not retreive any result.\n   * You can pass a dummy avatar/image to this prop.\n   *\n   * If not passed, the component will return `null`\n   *\n   * @example\n   * ```tsx\n   * <TokenIcon fallbackComponent={<DummyImage />} />\n   * ```\n   */\n  fallbackComponent?: JSX.Element;\n\n  /**\n   * Optional query options for `useQuery`\n   */\n  queryOptions?: Omit<UseQueryOptions<string>, \"queryFn\" | \"queryKey\">;\n}\n\n/**\n * This component tries to resolve the icon of a given token, then return an image.\n * @returns an <img /> with the src of the token icon\n *\n * @example\n * ### Basic usage\n * ```tsx\n * import { TokenProvider, TokenIcon } from \"thirdweb/react\";\n *\n * <TokenProvider address=\"0x-token-address\" chain={chain} client={client}>\n *   <TokenIcon />\n * </TokenProvider>\n * ```\n *\n * Result: An <img /> component with the src of the icon\n * ```html\n * <img src=\"token-icon.png\" />\n * ```\n *\n * ### Override the icon with the `iconResolver` prop\n * If you already have the icon url, you can skip the network requests and pass it directly to the TokenIcon\n * ```tsx\n * <TokenIcon iconResolver=\"/usdc.png\" />\n * ```\n *\n * You can also pass in your own custom (async) function that retrieves the icon url\n * ```tsx\n * const getIcon = async () => {\n *   const icon = getIconFromCoinMarketCap(tokenAddress, etc);\n *   return icon;\n * };\n *\n * <TokenIcon iconResolver={getIcon} />\n * ```\n *\n * ### Show a loading sign while the icon is being loaded\n * ```tsx\n * <TokenIcon loadingComponent={<Spinner />} />\n * ```\n *\n * ### Fallback to a dummy image if the token icon fails to resolve\n * ```tsx\n * <TokenIcon fallbackComponent={<img src=\"blank-image.png\" />} />\n * ```\n *\n * ### Usage with queryOptions\n * TokenIcon uses useQuery() from tanstack query internally.\n * It allows you to pass a custom queryOptions of your choice for more control of the internal fetching logic\n * ```tsx\n * <TokenIcon queryOptions={{ enabled: someLogic, retry: 3, }} />\n * ```\n *\n * @component\n * @token\n * @beta\n */\nexport function TokenIcon({\n  iconResolver,\n  loadingComponent,\n  fallbackComponent,\n  queryOptions,\n  ...restProps\n}: TokenIconProps) {\n  const { address, client, chain } = useTokenContext();\n  const iconQuery = useQuery({\n    queryFn: async () => {\n      if (typeof iconResolver === \"string\") {\n        return iconResolver;\n      }\n      if (typeof iconResolver === \"function\") {\n        return iconResolver();\n      }\n      if (address.toLowerCase() === NATIVE_TOKEN_ADDRESS.toLowerCase()) {\n        const possibleUrl = await getChainMetadata(chain).then(\n          (data) => data.icon?.url,\n        );\n        if (!possibleUrl) {\n          throw new Error(\"Failed to resolve icon for native token\");\n        }\n        return resolveScheme({ client, uri: possibleUrl });\n      }\n\n      // Try to get the icon from the contractURI\n      const contractMetadata = await getContractMetadata({\n        contract: getContract({\n          address,\n          chain,\n          client,\n        }),\n      });\n\n      if (\n        !contractMetadata.image ||\n        typeof contractMetadata.image !== \"string\"\n      ) {\n        throw new Error(\"Failed to resolve token icon from contract metadata\");\n      }\n\n      return resolveScheme({\n        client,\n        uri: contractMetadata.image,\n      });\n    },\n    queryKey: [\n      \"_internal_token_icon_\",\n      chain.id,\n      address,\n      {\n        resolver:\n          typeof iconResolver === \"string\"\n            ? iconResolver\n            : typeof iconResolver === \"function\"\n              ? getFunctionId(iconResolver)\n              : undefined,\n      },\n    ] as const,\n    ...queryOptions,\n  });\n\n  if (iconQuery.isLoading) {\n    return loadingComponent || null;\n  }\n\n  if (!iconQuery.data) {\n    return fallbackComponent || null;\n  }\n\n  return <img src={iconQuery.data} {...restProps} alt={restProps.alt} />;\n}\n", "\"use client\";\n\nimport { type UseQueryOptions, useQuery } from \"@tanstack/react-query\";\nimport type React from \"react\";\nimport type { JSX } from \"react\";\nimport type { Chain } from \"../../../../../chains/types.js\";\nimport { getChainMetadata } from \"../../../../../chains/utils.js\";\nimport type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../constants/addresses.js\";\nimport { getContract } from \"../../../../../contract/contract.js\";\nimport { getContractMetadata } from \"../../../../../extensions/common/read/getContractMetadata.js\";\nimport { name } from \"../../../../../extensions/common/read/name.js\";\nimport { getFunctionId } from \"../../../../../utils/function-id.js\";\nimport { useTokenContext } from \"./provider.js\";\n\n/**\n * Props for the TokenName component\n * @component\n * @token\n */\nexport interface TokenNameProps\n  extends Omit<React.HTMLAttributes<HTMLSpanElement>, \"children\"> {\n  /**\n   * This prop can be a string or a (async) function that resolves to a string, representing the name of the token\n   * This is particularly useful if you already have a way to fetch the token name.\n   */\n  nameResolver?: string | (() => string) | (() => Promise<string>);\n  /**\n   * A function to format the name's display value\n   * Particularly useful to avoid overflowing-UI issues\n   *\n   * ```tsx\n   * <TokenName formatFn={(str: string) => doSomething()} />\n   * ```\n   */\n  formatFn?: (str: string) => string;\n  /**\n   * This component will be shown while the name of the token is being fetched\n   * If not passed, the component will return `null`.\n   *\n   * You can/should pass a loading sign or spinner to this prop.\n   * @example\n   * ```tsx\n   * <TokenName loadingComponent={<Spinner />} />\n   * ```\n   */\n  loadingComponent?: JSX.Element;\n  /**\n   * This component will be shown if the name fails to be retreived\n   * If not passed, the component will return `null`.\n   *\n   * You can/should pass a descriptive text/component to this prop, indicating that the\n   * name was not fetched successfully\n   * @example\n   * ```tsx\n   * <TokenName fallbackComponent={\"Failed to load\"}\n   * />\n   * ```\n   */\n  fallbackComponent?: JSX.Element;\n  /**\n   * Optional `useQuery` params\n   */\n  queryOptions?: Omit<UseQueryOptions<string>, \"queryFn\" | \"queryKey\">;\n}\n\n/**\n * This component fetches then shows the name of a token. For ERC20 tokens, it calls the `name` function in the ERC20 contract.\n * It inherits all the attributes of a HTML <span> component, hence you can style it just like how you would style a normal <span>\n *\n *\n * @example\n * ### Basic usage\n * ```tsx\n * import { TokenProvider, TokenName } from \"thirdweb/react\";\n * import { ethereum } from \"thirdweb/chains\";\n *\n * <TokenProvider {...props}>\n *   <TokenName  />\n * </TokenProvider>\n * ```\n * Result:\n * ```html\n * <span>Ether</span>\n * ```\n *\n * ### Custom name resolver\n * By default TokenName will call the `name` method of the token contract.\n * However if you have a different way to fetch the name, you can pass the function to the `nameResolver` prop.\n * Note: nameResolver should either be a string or a function (async) that returns a string.\n * ```tsx\n * async function fetchNameMethod() {\n *   // your own fetching logic\n *   return \"the token name\";\n * }\n *\n * <TokenName nameResolver={fetchNameMethod} />\n * ```\n *\n * Alternatively you can also pass in a string directly:\n * ```tsx\n * <TokenName nameResolver=\"USD Coin Circle\" />\n * ```\n *\n *\n * ### Format the name (capitalize, truncate, etc.)\n * The TokenName component accepts a `formatFn` which takes in a string and outputs a string\n * The function is used to modify the name of the token\n *\n * ```tsx\n * const concatStr = (str: string):string => str + \"Token\"\n *\n * <TokenName formatFn={concatStr} />\n * ```\n *\n * Result:\n * ```html\n * <span>Ether Token</span>\n * ```\n *\n * ### Show a loading sign when the name is being fetched\n * ```tsx\n * import { TokenProvider, TokenName } from \"thirdweb/react\";\n *\n * <TokenProvider address=\"0x...\">\n *   <TokenName loadingComponent={<Spinner />} />\n * </TokenProvider>\n * ```\n *\n * ### Fallback to something when the name fails to resolve\n * ```tsx\n * <TokenProvider address=\"0x...\">\n *   <TokenName fallbackComponent={\"Failed to load\"} />\n * </TokenProvider>\n * ```\n *\n * ### Custom query options for useQuery\n * This component uses `@tanstack-query`'s useQuery internally.\n * You can use the `queryOptions` prop for more fine-grained control\n * ```tsx\n * <TokenName\n *   queryOptions={{\n *     enabled: isEnabled,\n *     retry: 4,\n *   }}\n * />\n * ```\n *\n * @component\n * @token\n * @beta\n */\nexport function TokenName({\n  nameResolver,\n  formatFn,\n  loadingComponent,\n  fallbackComponent,\n  queryOptions,\n  ...restProps\n}: TokenNameProps) {\n  const { address, client, chain } = useTokenContext();\n  const nameQuery = useQuery({\n    queryFn: async () =>\n      fetchTokenName({ address, chain, client, nameResolver }),\n    queryKey: getQueryKeys({ address, chainId: chain.id, nameResolver }),\n    ...queryOptions,\n  });\n\n  if (nameQuery.isLoading) {\n    return loadingComponent || null;\n  }\n\n  if (!nameQuery.data) {\n    return fallbackComponent || null;\n  }\n\n  if (formatFn && typeof formatFn === \"function\") {\n    return <span {...restProps}>{formatFn(nameQuery.data)}</span>;\n  }\n\n  return <span {...restProps}>{nameQuery.data}</span>;\n}\n\n/**\n * @internal Exported for tests only\n */\nexport async function fetchTokenName(props: {\n  address: string;\n  client: ThirdwebClient;\n  chain: Chain;\n  nameResolver?: string | (() => string) | (() => Promise<string>);\n}) {\n  const { nameResolver, address, client, chain } = props;\n  if (typeof nameResolver === \"string\") {\n    return nameResolver;\n  }\n  if (typeof nameResolver === \"function\") {\n    return nameResolver();\n  }\n  if (address.toLowerCase() === NATIVE_TOKEN_ADDRESS.toLowerCase()) {\n    // Don't wanna use `getChainName` because it has some side effect (it catches error and defaults to \"ETH\")\n    return getChainMetadata(chain).then((data) => data.nativeCurrency.name);\n  }\n\n  // Try to fetch the name from both the `name` function and the contract metadata\n  // then prioritize its result\n  const contract = getContract({ address, chain, client });\n  const [_name, contractMetadata] = await Promise.all([\n    name({ contract }).catch(() => undefined),\n    getContractMetadata({ contract }).catch(() => undefined),\n  ]);\n  if (typeof _name === \"string\") {\n    return _name;\n  }\n  if (typeof contractMetadata?.name === \"string\") {\n    return contractMetadata.name;\n  }\n  throw new Error(\n    \"Failed to resolve name from both name() and contract metadata\",\n  );\n}\n\n/**\n * @internal\n */\nexport function getQueryKeys(props: {\n  chainId: number;\n  address: string;\n  nameResolver?: string | (() => string) | (() => Promise<string>);\n}) {\n  const { chainId, address, nameResolver } = props;\n  return [\n    \"_internal_token_name_\",\n    chainId,\n    address,\n    {\n      resolver:\n        typeof nameResolver === \"string\"\n          ? nameResolver\n          : typeof nameResolver === \"function\"\n            ? getFunctionId(nameResolver)\n            : undefined,\n    },\n  ] as const;\n}\n", "\"use client\";\n\nimport { type UseQueryOptions, useQuery } from \"@tanstack/react-query\";\nimport type React from \"react\";\nimport type { JSX } from \"react\";\nimport type { Chain } from \"../../../../../chains/types.js\";\nimport { getChainMetadata } from \"../../../../../chains/utils.js\";\nimport type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../constants/addresses.js\";\nimport { getContract } from \"../../../../../contract/contract.js\";\nimport { getContractMetadata } from \"../../../../../extensions/common/read/getContractMetadata.js\";\nimport { symbol } from \"../../../../../extensions/common/read/symbol.js\";\nimport { getFunctionId } from \"../../../../../utils/function-id.js\";\nimport { useTokenContext } from \"./provider.js\";\n\n/**\n * Props for the TokenSymbol component\n * @component\n * @token\n */\nexport interface TokenSymbolProps\n  extends Omit<React.HTMLAttributes<HTMLSpanElement>, \"children\"> {\n  /**\n   * This prop can be a string or a (async) function that resolves to a string, representing the symbol of the token\n   * This is particularly useful if you already have a way to fetch the token symbol.\n   */\n  symbolResolver?: string | (() => string) | (() => Promise<string>);\n  /**\n   * A function to format the symbol's value\n   * Particularly useful to avoid overflowing-UI issues\n   *\n   * ```tsx\n   * <TokenSymbol formatFn={(str: string) => doSomething()} />\n   * ```\n   */\n  formatFn?: (str: string) => string;\n  /**\n   * This component will be shown while the symbol of the token is being fetched\n   * If not passed, the component will return `null`.\n   *\n   * You can/should pass a loading sign or spinner to this prop.\n   * @example\n   * ```tsx\n   * <TokenSymbol loadingComponent={<Spinner />} />\n   * ```\n   */\n  loadingComponent?: JSX.Element;\n  /**\n   * This component will be shown if the symbol fails to be retreived\n   * If not passed, the component will return `null`.\n   *\n   * You can/should pass a descriptive text/component to this prop, indicating that the\n   * symbol was not fetched successfully\n   * @example\n   * ```tsx\n   * <TokenSymbol fallbackComponent={\"Failed to load\"}\n   * />\n   * ```\n   */\n  fallbackComponent?: JSX.Element;\n  /**\n   * Optional `useQuery` params\n   */\n  queryOptions?: Omit<UseQueryOptions<string>, \"queryFn\" | \"queryKey\">;\n}\n\n/**\n * This component fetches then shows the symbol of a token. For ERC20 tokens, it calls the `symbol` function in the ERC20 contract.\n * It inherits all the attributes of a HTML <span> component, hence you can style it just like how you would style a normal <span>\n *\n *\n * @example\n * ### Basic usage\n * ```tsx\n * import { TokenProvider, TokenSymbol } from \"thirdweb/react\";\n * import { ethereum } from \"thirdweb/chains\";\n *\n * <TokenProvider {...props}>\n *   <TokenSymbol  />\n * </TokenProvider>\n * ```\n * Result:\n * ```html\n * <span>ETH</span>\n * ```\n *\n * ### Custom symbol resolver\n * By default, TokenSymbol calls the `symbol` function of your contract,\n * however, if your token as an unconventional way to fetch the symbol, you can pass the custom logic to the `symbolResolver` prop.\n * It can either be a string or a function (async) that returns or resolves to a string.\n * ```tsx\n * async function getSymbol() {\n *   // your own fetching logic\n *   return \"the symbol\";\n * }\n *\n * <TokenSymbol symbolResolver={getSymbol} />\n * ```\n * Alternatively, you can pass in a string directly:\n * ```tsx\n * <TokenSymbol symbolResolver=\"USDC.e\" />\n * ```\n *\n * ### Format the symbol (capitalize, truncate, etc.)\n * The TokenSymbol component accepts a `formatFn` which takes in a string and outputs a string\n * The function is used to modify the symbol of the token\n *\n * ```tsx\n * const concatStr = (str: string):string => str + \"Token\"\n *\n * <TokenSymbol formatFn={concatStr} />\n * ```\n *\n * Result:\n * ```html\n * <span>Ether Token</span>\n * ```\n *\n * ### Show a loading sign when the symbol is being fetched\n * ```tsx\n * import { TokenProvider, TokenSymbol } from \"thirdweb/react\";\n *\n * <TokenProvider address=\"0x...\">\n *   <TokenSymbol loadingComponent={<Spinner />} />\n * </TokenProvider>\n * ```\n *\n * ### Fallback to something when the symbol fails to resolve\n * ```tsx\n * <TokenProvider address=\"0x...\">\n *   <TokenSymbol fallbackComponent={\"Failed to load\"} />\n * </TokenProvider>\n * ```\n *\n * ### Custom query options for useQuery\n * This component uses `@tanstack-query`'s useQuery internally.\n * You can use the `queryOptions` prop for more fine-grained control\n * ```tsx\n * <TokenSymbol queryOptions={{\n *     enabled: isEnabled,\n *     retry: 4,\n *   }}\n * />\n * ```\n *\n * @component\n * @token\n * @beta\n */\nexport function TokenSymbol({\n  symbolResolver,\n  formatFn,\n  loadingComponent,\n  fallbackComponent,\n  queryOptions,\n  ...restProps\n}: TokenSymbolProps) {\n  const { address, client, chain } = useTokenContext();\n  const symbolQuery = useQuery({\n    queryFn: async () =>\n      fetchTokenSymbol({ address, chain, client, symbolResolver }),\n    queryKey: getQueryKeys({ address, chainId: chain.id, symbolResolver }),\n    ...queryOptions,\n  });\n\n  if (symbolQuery.isLoading) {\n    return loadingComponent || null;\n  }\n\n  if (!symbolQuery.data) {\n    return fallbackComponent || null;\n  }\n\n  if (formatFn && typeof formatFn === \"function\") {\n    return <span {...restProps}>{formatFn(symbolQuery.data)}</span>;\n  }\n\n  return <span {...restProps}>{symbolQuery.data}</span>;\n}\n\n/**\n * @internal Exported for tests only\n */\nexport async function fetchTokenSymbol(props: {\n  address: string;\n  client: ThirdwebClient;\n  chain: Chain;\n  symbolResolver?: string | (() => string) | (() => Promise<string>);\n}): Promise<string> {\n  const { symbolResolver, address, client, chain } = props;\n  if (typeof symbolResolver === \"string\") {\n    return symbolResolver;\n  }\n  if (typeof symbolResolver === \"function\") {\n    return symbolResolver();\n  }\n  if (address.toLowerCase() === NATIVE_TOKEN_ADDRESS.toLowerCase()) {\n    // Don't wanna use `getChainSymbol` because it has some side effect (it catches error and defaults to \"ETH\")\n    return getChainMetadata(chain).then((data) => data.nativeCurrency.symbol);\n  }\n\n  // Try to fetch the symbol from both the `symbol` function and the contract metadata\n  // then prioritize its result\n  const contract = getContract({ address, chain, client });\n  const [_symbol, contractMetadata] = await Promise.all([\n    symbol({ contract }).catch(() => undefined),\n    getContractMetadata({ contract }).catch(() => undefined),\n  ]);\n  if (typeof _symbol === \"string\") {\n    return _symbol;\n  }\n  if (typeof contractMetadata?.symbol === \"string\") {\n    return contractMetadata.symbol;\n  }\n  throw new Error(\n    \"Failed to resolve symbol from both symbol() and contract metadata\",\n  );\n}\n\n/**\n * @internal\n */\nexport function getQueryKeys(props: {\n  chainId: number;\n  address: string;\n  symbolResolver?: string | (() => string) | (() => Promise<string>);\n}) {\n  const { chainId, address, symbolResolver } = props;\n  return [\n    \"_internal_token_symbol_\",\n    chainId,\n    address,\n    {\n      resolver:\n        typeof symbolResolver === \"string\"\n          ? symbolResolver\n          : typeof symbolResolver === \"function\"\n            ? getFunctionId(symbolResolver)\n            : undefined,\n    },\n  ] as const;\n}\n", "\"use client\";\n\nimport { useCallback } from \"react\";\nimport type { Chain } from \"../../../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../../../client/client.js\";\nimport { getContract } from \"../../../../../../contract/contract.js\";\nimport { getListing } from \"../../../../../../extensions/marketplace/direct-listings/read/getListing.js\";\nimport type { BaseTransactionOptions } from \"../../../../../../transaction/types.js\";\nimport { useReadContract } from \"../../../../../core/hooks/contract/useReadContract.js\";\nimport type { TransactionButtonProps } from \"../../../../../core/hooks/transaction/transaction-button-utils.js\";\nimport { useSendAndConfirmTransaction } from \"../../../../../core/hooks/transaction/useSendAndConfirmTransaction.js\";\nimport { useActiveAccount } from \"../../../../../core/hooks/wallets/useActiveAccount.js\";\nimport { TransactionButton } from \"../../../TransactionButton/index.js\";\n\nexport type BuyDirectListingButtonProps = Omit<\n  TransactionButtonProps,\n  \"transaction\"\n> & {\n  /**\n   * The contract address of the Marketplace v3 contract.\n   */\n  contractAddress: string;\n\n  /**\n   * The chain which the Drop contract is deployed on\n   */\n  chain: Chain;\n\n  /**\n   * thirdweb Client\n   */\n  client: ThirdwebClient;\n\n  /**\n   * ID of the marketplace's DirectListing\n   */\n  listingId: bigint;\n\n  /**\n   * Qty to buy (optional)\n   *\n   * - For ERC721 listing: the `quantity` is always hard-coded to 1n - passing this props doesn't do anything\n   *\n   * - For ERC1155 listing: the `quantity` defaults to the quantity of the listing if not specified.\n   *\n   * The component will also throw an error if  you pass a `quantity` and it's greater than the listing's quantity\n   */\n  quantity?: bigint;\n};\n\n/**\n * This button is used with thirdweb Marketplace v3 contract, for buying NFT(s) from a listing.\n *\n * Under the hood, it prepares a transaction using the [`buyFromListing` extension](https://portal.thirdweb.com/references/typescript/v5/marketplace/buyFromListing)\n * and then pass it to a <TransactionButton />\n *\n * Since it uses the TransactionButton, it can take in any props that can be passed\n * to the [`TransactionButton`](https://portal.thirdweb.com/references/typescript/v5/TransactionButton)\n *\n * @param props props of type [BuyDirectListingButtonProps](https://portal.thirdweb.com/references/typescript/v5/BuyDirectListingButtonProps)\n * @example\n * ```tsx\n * import { BuyDirectListingButton } from \"thirdweb/react\";\n *\n * <BuyDirectListingButton\n *   contractAddress=\"0x...\" // contract address of the marketplace v3\n *   chain={...} // the chain which the marketplace contract is deployed on\n *   client={...} // thirdweb client\n *   listingId={100n} // the listingId or the item you want to buy\n *   quantity={1n} // optional - see the docs to learn more\n * >\n *   Buy NFT\n * </BuyDirectListingButton>\n * ```\n *\n * For error handling & callbacks on transaction-sent and transaction-confirmed,\n * please refer to the TransactionButton docs.\n * @component\n * @transaction\n */\nexport function BuyDirectListingButton(props: BuyDirectListingButtonProps) {\n  const {\n    contractAddress,\n    listingId,\n    children,\n    chain,\n    client,\n    quantity,\n    payModal,\n  } = props;\n  const defaultPayModalMetadata = payModal ? payModal.metadata : undefined;\n  const account = useActiveAccount();\n  const contract = getContract({\n    address: contractAddress,\n    chain,\n    client,\n  });\n\n  const { data: payMetadata } = useReadContract(getPayMetadata, {\n    contract,\n    listingId,\n    queryOptions: {\n      enabled: !defaultPayModalMetadata,\n    },\n  });\n\n  const { mutateAsync } = useSendAndConfirmTransaction();\n\n  const prepareBuyTransaction = useCallback(async () => {\n    if (!account) {\n      throw new Error(\"No account detected\");\n    }\n    const [listing, { getApprovalForTransaction }, { buyFromListing }] =\n      await Promise.all([\n        getListing({\n          contract,\n          listingId,\n        }),\n        import(\n          \"../../../../../../extensions/erc20/write/getApprovalForTransaction.js\"\n        ),\n        import(\n          \"../../../../../../extensions/marketplace/direct-listings/write/buyFromListing.js\"\n        ),\n      ]);\n    if (!listing) {\n      throw new Error(`Could not retrieve listing with ID: ${listingId}`);\n    }\n\n    let _quantity = 1n;\n    // For ERC721 the quantity should always be 1n. We throw an error if user passes a different props\n    if (listing.asset.type === \"ERC721\") {\n      if (typeof quantity === \"bigint\" && (quantity !== 1n || quantity < 0n)) {\n        throw new Error(\n          \"Invalid quantity. This is an ERC721 listing & quantity is always `1n`\",\n        );\n      }\n    } else if (listing.asset.type === \"ERC1155\") {\n      if (typeof quantity === \"bigint\") {\n        if (quantity > listing.quantity) {\n          throw new Error(\n            `quantity exceeds available amount. Available: ${listing.quantity.toString()}`,\n          );\n        }\n        if (quantity < 0n) {\n          throw new Error(\"Invalid quantity. Should be at least 1n\");\n        }\n        _quantity = quantity;\n      }\n      _quantity = listing.quantity;\n    }\n\n    const buyTx = buyFromListing({\n      contract,\n      listingId,\n      quantity: _quantity,\n      recipient: account?.address || \"\",\n    });\n\n    const approveTx = await getApprovalForTransaction({\n      account,\n      transaction: buyTx,\n    });\n\n    if (approveTx) {\n      await mutateAsync(approveTx);\n    }\n\n    return buyTx;\n  }, [account, contract, quantity, listingId, mutateAsync]);\n\n  return (\n    <TransactionButton\n      payModal={{\n        metadata: defaultPayModalMetadata || payMetadata,\n        ...payModal,\n      }}\n      transaction={() => prepareBuyTransaction()}\n      {...props}\n    >\n      {children}\n    </TransactionButton>\n  );\n}\n\n/**\n * @internal\n */\nasync function getPayMetadata(\n  options: BaseTransactionOptions<{ listingId: bigint }>,\n): Promise<{ name?: string; image?: string }> {\n  const listing = await getListing(options);\n  if (!listing) {\n    return { image: undefined, name: undefined };\n  }\n  return {\n    image: listing.asset?.metadata?.image,\n    name: listing.asset?.metadata?.name,\n  };\n}\n", "import { useMutation } from \"@tanstack/react-query\";\nimport type { TransactionReceipt } from \"viem\";\nimport type { GaslessOptions } from \"../../../../transaction/actions/gasless/types.js\";\nimport {\n  type WaitForReceiptOptions,\n  waitForReceipt,\n} from \"../../../../transaction/actions/wait-for-tx-receipt.js\";\nimport type { PreparedTransaction } from \"../../../../transaction/prepare-transaction.js\";\nimport { stringify } from \"../../../../utils/json.js\";\nimport type { Theme } from \"../../design-system/index.js\";\nimport type {\n  SendTransactionPayModalConfig,\n  useSendTransactionCore,\n} from \"./useSendTransaction.js\";\n\n/**\n * Props for the [`TransactionButton`](https://portal.thirdweb.com/references/typescript/v5/TransactionButton) component.\n * @transaction\n */\nexport type TransactionButtonProps = {\n  /**\n   * The a function returning a prepared transaction of type [`PreparedTransaction`](https://portal.thirdweb.com/references/typescript/v5/PreparedTransaction) to be sent when the button is clicked\n   */\n  transaction: () => // biome-ignore lint/suspicious/noExplicitAny: TODO: fix any\n    | PreparedTransaction<any>\n    // biome-ignore lint/suspicious/noExplicitAny: TODO: fix any\n    | Promise<PreparedTransaction<any>>;\n\n  /**\n   * Callback that will be called when the transaction is submitted onchain\n   * @param transactionResult - The object of type [`WaitForReceiptOptions`](https://portal.thirdweb.com/references/typescript/v5/WaitForReceiptOptions)\n   */\n  onTransactionSent?: (transactionResult: WaitForReceiptOptions) => void;\n  /**\n   *\n   * Callback that will be called when the transaction is confirmed onchain.\n   * If this callback is set, the component will wait for the transaction to be confirmed.\n   * @param receipt - The transaction receipt object of type [`TransactionReceipt`](https://portal.thirdweb.com/references/typescript/v5/TransactionReceipt)\n   */\n  onTransactionConfirmed?: (receipt: TransactionReceipt) => void;\n  /**\n   * The Error thrown when trying to send the transaction\n   * @param error - The `Error` object thrown\n   */\n  onError?: (error: Error) => void;\n  /**\n   * Callback to be called when the button is clicked\n   * This function is provoked before the transaction is sent\n   */\n  onClick?: () => void;\n  /**\n   * The className to apply to the button element for custom styling\n   */\n  className?: string;\n  /**\n   * The style to apply to the button element for custom styling\n   */\n  style?: React.CSSProperties;\n  /**\n   * Remove all default styling from the button\n   */\n  unstyled?: boolean;\n  /**\n   * The `React.ReactNode` to be rendered inside the button\n   */\n  children: React.ReactNode;\n\n  /**\n   * Configuration for gasless transactions.\n   * Refer to [`GaslessOptions`](https://portal.thirdweb.com/references/typescript/v5/GaslessOptions) for more details.\n   */\n  gasless?: GaslessOptions;\n\n  /**\n   * The button's disabled state\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the \"Pay Modal\" that opens when the user doesn't have enough funds to send a transaction.\n   * Set `payModal: false` to disable the \"Pay Modal\" popup\n   *\n   * This configuration object includes the following properties to configure the \"Pay Modal\" UI:\n   *\n   * ### `locale`\n   * The language to use for the \"Pay Modal\" UI. Defaults to `\"en_US\"`.\n   *\n   * ### `supportedTokens`\n   * An object of type [`SupportedTokens`](https://portal.thirdweb.com/references/typescript/v5/SupportedTokens) to configure the tokens to show for a chain.\n   *\n   * ### `theme`\n   * The theme to use for the \"Pay Modal\" UI. Defaults to `\"dark\"`.\n   *\n   * It can be set to `\"light\"` or `\"dark\"` or an object of type [`Theme`](https://portal.thirdweb.com/references/typescript/v5/Theme) for a custom theme.\n   *\n   * Refer to [`lightTheme`](https://portal.thirdweb.com/references/typescript/v5/lightTheme)\n   * or [`darkTheme`](https://portal.thirdweb.com/references/typescript/v5/darkTheme) helper functions to use the default light or dark theme and customize it.\n   */\n  payModal?: SendTransactionPayModalConfig;\n\n  /**\n   * The theme to use for the button\n   */\n  theme?: \"dark\" | \"light\" | Theme;\n\n  /**\n   * Set the type attribute of the button element.\n   *\n   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/type)\n   */\n  type?: HTMLButtonElement[\"type\"];\n};\n\nexport const useTransactionButtonMutation = (\n  props: TransactionButtonProps,\n  sendTransactionFn: ReturnType<typeof useSendTransactionCore>[\"mutateAsync\"],\n) => {\n  const {\n    transaction,\n    onTransactionSent,\n    onTransactionConfirmed,\n    onError,\n    onClick,\n  } = props;\n  return useMutation({\n    mutationFn: async () => {\n      if (onClick) {\n        onClick();\n      }\n      try {\n        const resolvedTx = await transaction();\n        const result = await sendTransactionFn(resolvedTx);\n\n        if (onTransactionSent) {\n          onTransactionSent(result);\n        }\n\n        if (onTransactionConfirmed) {\n          const receipt = await waitForReceipt(result);\n          if (receipt.status === \"reverted\") {\n            throw new Error(\n              `Execution reverted: ${stringify(receipt, null, 2)}`,\n            );\n          }\n          onTransactionConfirmed(receipt);\n        }\n      } catch (error) {\n        if (onError) {\n          onError(error as Error);\n        }\n      } finally {\n      }\n    },\n  });\n};\n", "\"use client\";\nimport { CustomThemeProvider } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport {\n  type TransactionButtonProps,\n  useTransactionButtonMutation,\n} from \"../../../core/hooks/transaction/transaction-button-utils.js\";\nimport { useActiveAccount } from \"../../../core/hooks/wallets/useActiveAccount.js\";\nimport { useSendTransaction } from \"../../hooks/transaction/useSendTransaction.js\";\nimport { Button } from \"../components/buttons.js\";\nimport { Spinner } from \"../components/Spinner.js\";\n\n/**\n * TransactionButton component is used to render a button that triggers a transaction.\n * It shows a \"Switch Network\" button if the connected wallet is on a different chain than the transaction.\n * @param props - The props for this component.\n * Refer to [TransactionButtonProps](https://portal.thirdweb.com/references/typescript/v5/TransactionButtonProps) for details.\n * @example\n *\n * ### Basic usage\n * ```tsx\n * <TransactionButton\n *   transaction={() => {}}\n *   onTransactionConfirmed={handleSuccess}\n *   onError={handleError}\n * >\n *   Confirm Transaction\n * </TransactionButton>\n * ```\n *\n * ### Customize the styling by passing the `unstyled` prop and your inline styles and/or classes:\n * ```tsx\n * <TransactionButton\n *   transaction={() => {}}\n *   unstyled\n *   className=\"bg-white text-black rounded-md p-4 flex items-center justify-center\"\n * >\n *   Confirm Transaction\n * </TransactionButton>\n * ```\n *\n * ### Handle errors\n * ```tsx\n * <TransactionButton\n *   transaction={() => ...}\n *   onError={(err) => {\n *     alert(err.message);\n *     // Add your own logic here\n *   }}\n * >\n *   Confirm Transaction\n * </TransactionButton>\n * ```\n *\n * ### Alert when a transaction is sent\n * ```tsx\n * <TransactionButton\n *   transaction={() => ...}\n *   onTransactionSent={(tx) => {\n *     alert(\"transaction sent!\");\n *     // Add your own logic here. For example, a toast\n *   }}\n * >\n *   Confirm Transaction\n * </TransactionButton>\n * ```\n *\n * ### Alert when a transaction is completed\n * ```tsx\n * <TransactionButton\n *   transaction={() => ...}\n *   onTransactionConfirmed={(tx) => {\n *     alert(\"transaction sent!\");\n *     console.log(tx);\n *     // Add your own logic here. For example, a toast\n *   }}\n * >\n *   Confirm Transaction\n * </TransactionButton>\n * ```\n *\n * ### The onClick prop, if provided, will be called before the transaction is sent.\n * ```tsx\n * <TransactionButton\n *   onClick={() => alert(\"Transaction is about to be sent\")}\n *   transaction={...}\n * >\n *   ...\n * </TransactionButton>\n * ```\n *\n * ### Attach custom Pay metadata\n * ```tsx\n * <TransactionButton\n *   payModal={{\n *     // This image & title will show up in the Pay modal\n *     metadata: {\n *       name: \"Van Gogh Starry Night\",\n *       image: \"https://unsplash.com/starry-night.png\"\n *     }\n *   }}\n * >\n *   ...\n * </TransactionButton>\n * ```\n *\n * ### Gasless usage with [thirdweb Engine](https://portal.thirdweb.com/engine)\n * ```tsx\n * <TransactionButton\n *   gasless={{\n *     provider: \"engine\",\n *     relayerUrl: \"https://thirdweb.engine-***.thirdweb.com/relayer/***\",\n *     relayerForwarderAddress: \"0x...\",\n *   }}\n * >\n *   ...\n * </TransactionButton>\n * ```\n *\n * ### Gasless usage with OpenZeppelin\n * ```tsx\n * <TransactionButton\n *   gasless={{\n *     provider: \"openzeppelin\",\n *     relayerUrl: \"https://...\",\n *     relayerForwarderAddress: \"0x...\",\n *   }}\n * >\n *   ...\n * </TransactionButton>\n * ```\n * @component\n * @transaction\n */\nexport function TransactionButton(props: TransactionButtonProps) {\n  const {\n    children,\n    // biome-ignore lint/correctness/noUnusedVariables: TODO\n    transaction,\n    // biome-ignore lint/correctness/noUnusedVariables: TODO\n    onTransactionSent,\n    // biome-ignore lint/correctness/noUnusedVariables: TODO\n    onTransactionConfirmed,\n    // biome-ignore lint/correctness/noUnusedVariables: TODO\n    onError,\n    // biome-ignore lint/correctness/noUnusedVariables: TODO\n    onClick,\n    gasless,\n    payModal,\n    disabled,\n    unstyled,\n    ...buttonProps\n  } = props;\n  const account = useActiveAccount();\n  const sendTransaction = useSendTransaction({ gasless, payModal });\n  const { mutate: handleClick, isPending } = useTransactionButtonMutation(\n    props,\n    sendTransaction.mutateAsync,\n  );\n\n  return (\n    <CustomThemeProvider theme={props.theme}>\n      <Button\n        data-is-loading={isPending}\n        disabled={!account || disabled || isPending}\n        gap=\"xs\"\n        onClick={() => handleClick()}\n        unstyled={unstyled}\n        variant=\"primary\"\n        {...buttonProps}\n        style={\n          !unstyled\n            ? {\n                minWidth: \"165px\",\n                opacity: !account || disabled ? 0.5 : 1,\n                position: \"relative\",\n                ...buttonProps.style,\n              }\n            : {\n                position: \"relative\",\n                ...buttonProps.style,\n              }\n        }\n      >\n        <span style={{ visibility: isPending ? \"hidden\" : \"visible\" }}>\n          {children}\n        </span>\n        {isPending && (\n          <div\n            style={{\n              alignItems: \"center\",\n              bottom: 0,\n              display: \"flex\",\n              height: \"100%\",\n              margin: \"auto\",\n              position: \"absolute\",\n              top: 0,\n            }}\n          >\n            <Spinner color=\"primaryButtonText\" size=\"md\" />\n          </div>\n        )}\n      </Button>\n    </CustomThemeProvider>\n  );\n}\n", "\"use client\";\n\nimport {\n  getContract,\n  type ThirdwebContract,\n} from \"../../../../../../contract/contract.js\";\nimport { getContractMetadata } from \"../../../../../../extensions/common/read/getContractMetadata.js\";\nimport { getNFT } from \"../../../../../../extensions/erc1155/read/getNFT.js\";\nimport type { PreparedTransaction } from \"../../../../../../transaction/prepare-transaction.js\";\nimport type { BaseTransactionOptions } from \"../../../../../../transaction/types.js\";\nimport type { Account } from \"../../../../../../wallets/interfaces/wallet.js\";\nimport { useReadContract } from \"../../../../../core/hooks/contract/useReadContract.js\";\nimport { useSendAndConfirmTransaction } from \"../../../../../core/hooks/transaction/useSendAndConfirmTransaction.js\";\nimport { useActiveAccount } from \"../../../../../core/hooks/wallets/useActiveAccount.js\";\nimport { TransactionButton } from \"../../../TransactionButton/index.js\";\nimport type {\n  ClaimButtonProps,\n  ClaimParams,\n  Erc20ClaimParams,\n  Erc721ClaimParams,\n  Erc1155ClaimParams,\n} from \"./types.js\";\n\n/**\n * This button is used to claim tokens (NFT or ERC20) from a given thirdweb Drop contract.\n *\n * there are 3 type of Drop contract: NFT Drop (DropERC721), Edition Drop (DropERC1155) and Token Drop (DropERC20)\n *\n * Learn more: https://thirdweb.com/explore/drops\n *\n *\n * Note: This button only works with thirdweb Drop contracts.\n * For custom contract, please use [`TransactionButton`](https://portal.thirdweb.com/references/typescript/v5/TransactionButton)\n * @param props\n * @returns A wrapper for TransactionButton\n *\n * @component\n * @example\n *\n * Example for claiming NFT from an NFT Drop contract\n * ```tsx\n * import { ClaimButton } from \"thirdweb/react\";\n * import { ethereum } from \"thirdweb/chains\";\n *\n * <ClaimButton\n *   contractAddress=\"0x...\" // contract address of the NFT Drop\n *   chain={ethereum}\n *   client={client}\n *   claimParams={{\n *     type: \"ERC721\",\n *     quantity: 1n, // claim 1 token\n *   }}\n * >\n *   Claim now\n * </ClaimButton>\n * ```\n *\n * For Edition Drop (ERC1155)\n * ```tsx\n * <ClaimButton\n *   contractAddress=\"0x...\" // contract address of the Edition Drop\n *   chain={ethereum}\n *   client={client}\n *   claimParams={{\n *     type: \"ERC1155\",\n *     quantity: 1n,\n *     tokenId: 0n,\n *   }}\n * >\n *   Claim now\n * </ClaimButton>\n * ```\n *\n * For Token Drop (ERC20)\n * ```tsx\n * <ClaimButton\n *   contractAddress=\"0x...\" // contract address of the Token Drop\n *   chain={ethereum}\n *   client={client}\n *   claimParams={{\n *     type: \"ERC20\",\n *     quantity: \"100\", // claim 100 ERC20 tokens\n *     // instead of `quantity`, you can also use `quantityInWei` (bigint)\n *   }}\n * >\n *   Claim now\n * </ClaimButton>\n * ```\n *\n * Attach custom Pay metadata\n * ```tsx\n * <ClaimButton\n *   payModal={{\n *     metadata: {\n *       name: \"Van Gogh Starry Night\",\n *       image: \"https://unsplash.com/starry-night.png\"\n *     }\n *   }}\n * >...</ClaimButton>\n *\n * ```\n *\n * Since this button uses the `TransactionButton`, it can take in any props that can be passed\n * to the [`TransactionButton`](https://portal.thirdweb.com/references/typescript/v5/TransactionButton)\n *\n *\n * For error handling & callbacks on transaction-sent and transaction-confirmed,\n * please refer to the TransactionButton docs.\n * @transaction\n */\nexport function ClaimButton(props: ClaimButtonProps) {\n  const { children, contractAddress, client, chain, claimParams, payModal } =\n    props;\n  const defaultPayModalMetadata = payModal ? payModal.metadata : undefined;\n  const contract = getContract({\n    address: contractAddress,\n    chain,\n    client,\n  });\n\n  const { data: payMetadata } = useReadContract(getPayMetadata, {\n    contract,\n    queryOptions: {\n      enabled: !defaultPayModalMetadata,\n    },\n    tokenId: claimParams.type === \"ERC1155\" ? claimParams.tokenId : undefined,\n  });\n  const account = useActiveAccount();\n  const { mutateAsync } = useSendAndConfirmTransaction();\n  return (\n    <TransactionButton\n      payModal={{\n        metadata: defaultPayModalMetadata || payMetadata,\n        ...payModal,\n      }}\n      transaction={async () => {\n        if (!account) {\n          throw new Error(\"No account detected\");\n        }\n        const [claimTx, { getApprovalForTransaction }] = await Promise.all([\n          getClaimTransaction({\n            account,\n            claimParams,\n            contract,\n          }),\n          import(\n            \"../../../../../../extensions/erc20/write/getApprovalForTransaction.js\"\n          ),\n        ]);\n        const approveTx = await getApprovalForTransaction({\n          account,\n          transaction: claimTx,\n        });\n        if (approveTx) {\n          await mutateAsync(approveTx);\n        }\n        return claimTx;\n      }}\n      {...props}\n    >\n      {children}\n    </TransactionButton>\n  );\n}\n\n/**\n * We can only get the image and name for Edition Drop\n * For NFT Drop and Token Drop we fall back to the name & image of the contract\n * @internal\n */\nasync function getPayMetadata(\n  options: BaseTransactionOptions<{ tokenId?: bigint }>,\n): Promise<{ name?: string; image?: string }> {\n  const { contract, tokenId } = options;\n  const [contractMetadata, nft] = await Promise.all([\n    getContractMetadata(options),\n    tokenId ? getNFT({ contract, tokenId }) : undefined,\n  ]);\n  if (tokenId) {\n    return {\n      image: nft?.metadata?.image,\n      name: nft?.metadata?.name,\n    };\n  }\n  return {\n    image: contractMetadata?.image,\n    name: contractMetadata?.name,\n  };\n}\n\n/**\n * @internal Export for test\n */\nasync function getClaimTransaction({\n  contract,\n  account,\n  claimParams,\n}: {\n  contract: ThirdwebContract;\n  account: Account | undefined;\n  claimParams: ClaimParams;\n}): Promise<PreparedTransaction> {\n  switch (claimParams.type) {\n    case \"ERC721\":\n      return await getERC721ClaimTo({ account, claimParams, contract });\n    case \"ERC1155\":\n      return await getERC1155ClaimTo({ account, claimParams, contract });\n    case \"ERC20\": {\n      return await getERC20ClaimTo({ account, claimParams, contract });\n    }\n    default:\n      throw new Error(\n        \"Invalid contract type. Must be either NFT Drop (ERC721), Edition Drop (ERC1155) or Token Drop (ERC20)\",\n      );\n  }\n}\n\n/**\n * @internal\n */\nexport async function getERC721ClaimTo({\n  contract,\n  account,\n  claimParams,\n}: {\n  contract: ThirdwebContract;\n  account: Account | undefined;\n  claimParams: Erc721ClaimParams;\n}) {\n  const { claimTo } = await import(\n    \"../../../../../../extensions/erc721/drops/write/claimTo.js\"\n  );\n\n  return claimTo({\n    contract,\n    from: claimParams.from,\n    quantity: claimParams.quantity,\n    to: claimParams.to || account?.address || \"\",\n  });\n}\n\n/**\n * @internal\n */\nexport async function getERC1155ClaimTo({\n  contract,\n  account,\n  claimParams,\n}: {\n  contract: ThirdwebContract;\n  account: Account | undefined;\n  claimParams: Erc1155ClaimParams;\n}) {\n  const { claimTo } = await import(\n    \"../../../../../../extensions/erc1155/drops/write/claimTo.js\"\n  );\n\n  return claimTo({\n    contract,\n    from: claimParams.from,\n    quantity: claimParams.quantity,\n    to: claimParams.to || account?.address || \"\",\n    tokenId: claimParams.tokenId,\n  });\n}\n\n/**\n * @internal\n */\nexport async function getERC20ClaimTo({\n  contract,\n  account,\n  claimParams,\n}: {\n  contract: ThirdwebContract;\n  account: Account | undefined;\n  claimParams: Erc20ClaimParams;\n}) {\n  // Ideally we should check if the contract is ERC20 using `isERC20`\n  // however TokenDrop doesn't have `supportsInterface` so it doesn't work\n  const { claimTo } = await import(\n    \"../../../../../../extensions/erc20/drops/write/claimTo.js\"\n  );\n\n  if (\"quantity\" in claimParams) {\n    return claimTo({\n      contract,\n      from: claimParams.from,\n      quantity: claimParams.quantity,\n      to: claimParams.to || account?.address || \"\",\n    });\n  }\n  if (\"quantityInWei\" in claimParams) {\n    return claimTo({\n      contract,\n      from: claimParams.from,\n      quantityInWei: claimParams.quantityInWei,\n      to: claimParams.to || account?.address || \"\",\n    });\n  }\n  throw new Error(\"Missing quantity or quantityInWei\");\n}\n", "\"use client\";\n\nimport { useCallback } from \"react\";\nimport type { Chain } from \"../../../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../../../client/client.js\";\nimport { getContract } from \"../../../../../../contract/contract.js\";\nimport { isERC721 } from \"../../../../../../extensions/erc721/read/isERC721.js\";\nimport { isERC1155 } from \"../../../../../../extensions/erc1155/read/isERC1155.js\";\nimport {\n  type CreateListingParams,\n  createListing,\n} from \"../../../../../../extensions/marketplace/direct-listings/write/createListing.js\";\nimport type { BaseTransactionOptions } from \"../../../../../../transaction/types.js\";\nimport { useReadContract } from \"../../../../../core/hooks/contract/useReadContract.js\";\nimport type { TransactionButtonProps } from \"../../../../../core/hooks/transaction/transaction-button-utils.js\";\nimport { useSendAndConfirmTransaction } from \"../../../../../core/hooks/transaction/useSendAndConfirmTransaction.js\";\nimport { useActiveAccount } from \"../../../../../core/hooks/wallets/useActiveAccount.js\";\nimport { TransactionButton } from \"../../../TransactionButton/index.js\";\n\nexport type CreateDirectListingButtonProps = Omit<\n  TransactionButtonProps,\n  \"transaction\"\n> &\n  CreateListingParams & {\n    contractAddress: string;\n    chain: Chain;\n    client: ThirdwebClient;\n  };\n\n/**\n * This button is used to create Direct listings for the thirdweb Marketplace v3 contract\n *\n * It uses the [`TransactionButton`](https://portal.thirdweb.com/references/typescript/v5/TransactionButton)\n * and the [`createListing` extension](https://portal.thirdweb.com/references/typescript/v5/marketplace/createListing) under the hood\n * which means it inherits all the props of those 2 components.\n *\n * @example\n * ```tsx\n * import { CreateDirectListingButton } from \"thirdweb/react\";\n *\n * <CreateDirectListingButton\n *   contractAddress=\"0x...\" // contract address for the marketplace-v3\n *   chain={...} // the chain which the marketplace contract is deployed on\n *\n *   // These props below are the same props for `createListing`\n *   // to get the full list, check the docs link above\n *   tokenId={0n}\n *   assetContractAddress=\"0x...\" // The NFT contract address whose NFT(s) you want to sell\n *   pricePerToken={\"0.1\"} // sell for 0.1 <native token>\n * >\n *   Sell NFT\n * </CreateDirectListingButton>\n * ```\n *\n * For error handling & callbacks on transaction-sent and transaction-confirmed,\n * please refer to the TransactionButton docs.\n * @component\n * @transaction\n */\nexport function CreateDirectListingButton(\n  props: CreateDirectListingButtonProps,\n) {\n  const {\n    contractAddress,\n    chain,\n    client,\n    children,\n    payModal,\n    assetContractAddress,\n    tokenId,\n  } = props;\n  const marketplaceContract = getContract({\n    address: contractAddress,\n    chain,\n    client,\n  });\n  const account = useActiveAccount();\n  const defaultPayModalMetadata = payModal ? payModal.metadata : undefined;\n  const nftContract = getContract({\n    address: assetContractAddress,\n    chain,\n    client,\n  });\n  const { data: payMetadata } = useReadContract(getPayMetadata, {\n    contract: nftContract,\n    queryOptions: {\n      enabled: !defaultPayModalMetadata,\n    },\n    tokenId,\n  });\n  const { mutateAsync } = useSendAndConfirmTransaction();\n\n  const prepareTransaction = useCallback(async () => {\n    if (!account) {\n      throw new Error(\"No account detected\");\n    }\n    const [is721, is1155] = await Promise.all([\n      isERC721({ contract: nftContract }),\n      isERC1155({ contract: nftContract }),\n    ]);\n    if (!is1155 && !is721) {\n      throw new Error(\"Asset must either be ERC721 or ERC1155\");\n    }\n    // Check for token approval\n    if (is1155) {\n      const [{ isApprovedForAll }, { setApprovalForAll }] = await Promise.all([\n        import(\n          \"../../../../../../extensions/erc1155/__generated__/IERC1155/read/isApprovedForAll.js\"\n        ),\n        import(\n          \"../../../../../../extensions/erc1155/__generated__/IERC1155/write/setApprovalForAll.js\"\n        ),\n      ]);\n      const isApproved = await isApprovedForAll({\n        contract: nftContract,\n        operator: marketplaceContract.address,\n        owner: account.address,\n      });\n      if (!isApproved) {\n        const transaction = setApprovalForAll({\n          approved: true,\n          contract: nftContract,\n          operator: marketplaceContract.address,\n        });\n        await mutateAsync(transaction);\n      }\n    } else {\n      const [{ isApprovedForAll }, { setApprovalForAll }, { getApproved }] =\n        await Promise.all([\n          import(\n            \"../../../../../../extensions/erc721/__generated__/IERC721A/read/isApprovedForAll.js\"\n          ),\n          import(\n            \"../../../../../../extensions/erc721/__generated__/IERC721A/write/setApprovalForAll.js\"\n          ),\n          import(\n            \"../../../../../../extensions/erc721/__generated__/IERC721A/read/getApproved.js\"\n          ),\n        ]);\n      const [isApproved, tokenApproved] = await Promise.all([\n        isApprovedForAll({\n          contract: nftContract,\n          operator: marketplaceContract.address,\n          owner: account.address,\n        }),\n        getApproved({ contract: nftContract, tokenId: props.tokenId }),\n      ]);\n\n      if (\n        !isApproved &&\n        tokenApproved.toLowerCase() !==\n          marketplaceContract.address.toLowerCase()\n      ) {\n        const transaction = setApprovalForAll({\n          approved: true,\n          contract: nftContract,\n          operator: marketplaceContract.address,\n        });\n        await mutateAsync(transaction);\n      }\n    }\n    const listingTx = createListing({\n      contract: marketplaceContract,\n      ...props,\n    });\n\n    return listingTx;\n  }, [marketplaceContract, props, account, mutateAsync, nftContract]);\n\n  return (\n    <TransactionButton\n      payModal={{\n        metadata: defaultPayModalMetadata || payMetadata,\n        ...payModal,\n      }}\n      transaction={() => prepareTransaction()}\n      {...props}\n    >\n      {children}\n    </TransactionButton>\n  );\n}\n\n/**\n * @internal\n */\nasync function getPayMetadata(\n  options: BaseTransactionOptions<{\n    tokenId: bigint;\n  }>,\n): Promise<{ name?: string; image?: string }> {\n  const [\n    { getContractMetadata },\n    { getNFT: getERC721 },\n    { getNFT: getERC1155 },\n  ] = await Promise.all([\n    import(\"../../../../../../extensions/common/read/getContractMetadata.js\"),\n    import(\"../../../../../../extensions/erc721/read/getNFT.js\"),\n    import(\"../../../../../../extensions/erc1155/read/getNFT.js\"),\n  ]);\n  const [is721, is1155, contractMetadata] = await Promise.all([\n    isERC721(options),\n    isERC1155(options),\n    getContractMetadata(options),\n  ]);\n  if (is721) {\n    const nft = await getERC721(options);\n    return {\n      image: nft?.metadata?.image,\n      name: nft?.metadata?.name,\n    };\n  }\n\n  if (is1155) {\n    const nft = await getERC1155(options);\n    return {\n      image: nft?.metadata?.image,\n      name: nft?.metadata?.name,\n    };\n  }\n\n  return {\n    image: contractMetadata?.image,\n    name: contractMetadata?.name,\n  };\n}\n", "import type { AbiParameterToPrimitiveType } from \"abitype\";\nimport { prepareContractCall } from \"../../../../../transaction/prepare-contract-call.js\";\nimport type {\n  BaseTransactionOptions,\n  WithOverrides,\n} from \"../../../../../transaction/types.js\";\nimport { encodeAbiParameters } from \"../../../../../utils/abi/encodeAbiParameters.js\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\nimport { once } from \"../../../../../utils/promise/once.js\";\n\n/**\n * Represents the parameters for the \"createListing\" function.\n */\nexport type CreateListingParams = WithOverrides<{\n  params: AbiParameterToPrimitiveType<{\n    type: \"tuple\";\n    name: \"_params\";\n    components: [\n      { type: \"address\"; name: \"assetContract\" },\n      { type: \"uint256\"; name: \"tokenId\" },\n      { type: \"uint256\"; name: \"quantity\" },\n      { type: \"address\"; name: \"currency\" },\n      { type: \"uint256\"; name: \"pricePerToken\" },\n      { type: \"uint128\"; name: \"startTimestamp\" },\n      { type: \"uint128\"; name: \"endTimestamp\" },\n      { type: \"bool\"; name: \"reserved\" },\n    ];\n  }>;\n}>;\n\nexport const FN_SELECTOR = \"0x746415b5\" as const;\nconst FN_INPUTS = [\n  {\n    components: [\n      {\n        name: \"assetContract\",\n        type: \"address\",\n      },\n      {\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n      {\n        name: \"quantity\",\n        type: \"uint256\",\n      },\n      {\n        name: \"currency\",\n        type: \"address\",\n      },\n      {\n        name: \"pricePerToken\",\n        type: \"uint256\",\n      },\n      {\n        name: \"startTimestamp\",\n        type: \"uint128\",\n      },\n      {\n        name: \"endTimestamp\",\n        type: \"uint128\",\n      },\n      {\n        name: \"reserved\",\n        type: \"bool\",\n      },\n    ],\n    name: \"_params\",\n    type: \"tuple\",\n  },\n] as const;\nconst FN_OUTPUTS = [\n  {\n    name: \"listingId\",\n    type: \"uint256\",\n  },\n] as const;\n\n/**\n * Checks if the `createListing` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `createListing` method is supported.\n * @extension MARKETPLACE\n * @example\n * ```ts\n * import { isCreateListingSupported } from \"thirdweb/extensions/marketplace\";\n *\n * const supported = isCreateListingSupported([\"0x...\"]);\n * ```\n */\nexport function isCreateListingSupported(availableSelectors: string[]) {\n  return detectMethod({\n    availableSelectors,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n  });\n}\n\n/**\n * Encodes the parameters for the \"createListing\" function.\n * @param options - The options for the createListing function.\n * @returns The encoded ABI parameters.\n * @extension MARKETPLACE\n * @example\n * ```ts\n * import { encodeCreateListingParams } from \"thirdweb/extensions/marketplace\";\n * const result = encodeCreateListingParams({\n *  params: ...,\n * });\n * ```\n */\nexport function encodeCreateListingParams(options: CreateListingParams) {\n  return encodeAbiParameters(FN_INPUTS, [options.params]);\n}\n\n/**\n * Encodes the \"createListing\" function into a Hex string with its parameters.\n * @param options - The options for the createListing function.\n * @returns The encoded hexadecimal string.\n * @extension MARKETPLACE\n * @example\n * ```ts\n * import { encodeCreateListing } from \"thirdweb/extensions/marketplace\";\n * const result = encodeCreateListing({\n *  params: ...,\n * });\n * ```\n */\nexport function encodeCreateListing(options: CreateListingParams) {\n  // we do a \"manual\" concat here to avoid the overhead of the \"concatHex\" function\n  // we can do this because we know the specific formats of the values\n  return (FN_SELECTOR +\n    encodeCreateListingParams(options).slice(\n      2,\n    )) as `${typeof FN_SELECTOR}${string}`;\n}\n\n/**\n * Prepares a transaction to call the \"createListing\" function on the contract.\n * @param options - The options for the \"createListing\" function.\n * @returns A prepared transaction object.\n * @extension MARKETPLACE\n * @example\n * ```ts\n * import { sendTransaction } from \"thirdweb\";\n * import { createListing } from \"thirdweb/extensions/marketplace\";\n *\n * const transaction = createListing({\n *  contract,\n *  params: ...,\n *  overrides: {\n *    ...\n *  }\n * });\n *\n * // Send the transaction\n * await sendTransaction({ transaction, account });\n * ```\n */\nexport function createListing(\n  options: BaseTransactionOptions<\n    | CreateListingParams\n    | {\n        asyncParams: () => Promise<CreateListingParams>;\n      }\n  >,\n) {\n  const asyncOptions = once(async () => {\n    return \"asyncParams\" in options ? await options.asyncParams() : options;\n  });\n\n  return prepareContractCall({\n    accessList: async () => (await asyncOptions()).overrides?.accessList,\n    authorizationList: async () =>\n      (await asyncOptions()).overrides?.authorizationList,\n    contract: options.contract,\n    erc20Value: async () => (await asyncOptions()).overrides?.erc20Value,\n    extraGas: async () => (await asyncOptions()).overrides?.extraGas,\n    gas: async () => (await asyncOptions()).overrides?.gas,\n    gasPrice: async () => (await asyncOptions()).overrides?.gasPrice,\n    maxFeePerGas: async () => (await asyncOptions()).overrides?.maxFeePerGas,\n    maxPriorityFeePerGas: async () =>\n      (await asyncOptions()).overrides?.maxPriorityFeePerGas,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n    nonce: async () => (await asyncOptions()).overrides?.nonce,\n    params: async () => {\n      const resolvedOptions = await asyncOptions();\n      return [resolvedOptions.params] as const;\n    },\n    value: async () => (await asyncOptions()).overrides?.value,\n  });\n}\n", "import type { Address } from \"abitype\";\nimport {\n  isNativeTokenAddress,\n  NATIVE_TOKEN_ADDRESS,\n} from \"../../../../constants/addresses.js\";\nimport { getContract } from \"../../../../contract/contract.js\";\nimport { eth_getBlockByNumber } from \"../../../../rpc/actions/eth_getBlockByNumber.js\";\nimport { getRpcClient } from \"../../../../rpc/rpc.js\";\nimport type { BaseTransactionOptions } from \"../../../../transaction/types.js\";\nimport { toUnits } from \"../../../../utils/units.js\";\nimport { isERC721 } from \"../../../erc721/read/isERC721.js\";\nimport { isERC1155 } from \"../../../erc1155/read/isERC1155.js\";\nimport * as CreateListing from \"../../__generated__/IDirectListings/write/createListing.js\";\n\n/**\n * @extension MARKETPLACE\n */\nexport type CreateListingParams = {\n  /**\n   * The contract address of the asset being listed\n   */\n  assetContractAddress: Address;\n  /**\n   * The ID of the token being listed\n   */\n  tokenId: bigint;\n  /**\n   * The quantity of tokens to list\n   *\n   * For ERC721s, this value can be omitted.\n   * @default 1\n   */\n  quantity?: bigint;\n  /**\n   * The contract address of the currency to accept for the listing\n   * @default NATIVE_TOKEN_ADDRESS\n   */\n  currencyContractAddress?: Address;\n  /**\n   * The start time of the listing\n   * @default new Date()\n   */\n  startTimestamp?: Date;\n  /**\n   * The end time of the listing\n   * @default new Date() + 10 years\n   */\n  endTimestamp?: Date;\n  /**\n   * Whether the listing is reserved to be bought from a specific set of buyers\n   * @default false\n   */\n  isReservedListing?: boolean;\n} & (\n  | {\n      /**\n       * The price per token (in Ether)\n       */\n      pricePerToken: string;\n    }\n  | {\n      /**\n       * The price per token (in wei)\n       */\n      pricePerTokenWei: string;\n    }\n);\n\n/**\n * Creates a direct listing.\n * @param options The options for creating the direct listing.\n * @returns The result of creating the direct listing.\n * @extension MARKETPLACE\n * @example\n * ```typescript\n * import { createListing } from \"thirdweb/extensions/marketplace\";\n * import { sendTransaction } from \"thirdweb\";\n *\n * const transaction = createListing({\n *   assetContractAddress: \"0x...\", // the NFT contract address that you want to sell\n *   tokenId={0n}, // the token id you want to sell\n *   pricePerToken=\"0.1\" // sell for 0.1 <native token>\n * });\n *\n * await sendTransaction({ transaction, account });\n * ```\n */\nexport function createListing(\n  options: BaseTransactionOptions<CreateListingParams>,\n) {\n  return CreateListing.createListing({\n    asyncParams: async () => {\n      const assetContract = getContract({\n        ...options.contract,\n        address: options.assetContractAddress,\n      });\n\n      const rpcClient = getRpcClient(options.contract);\n\n      const [assetIsERC721, assetIsERC1155, lastestBlock] = await Promise.all([\n        isERC721({ contract: assetContract }),\n        isERC1155({ contract: assetContract }),\n        eth_getBlockByNumber(rpcClient, { blockTag: \"latest\" }),\n      ]);\n\n      // validate valid asset\n      if (!assetIsERC721 && !assetIsERC1155) {\n        throw new Error(\"AssetContract must implement ERC 1155 or ERC 721.\");\n      }\n\n      // validate the timestamps\n      let startTimestamp = BigInt(\n        Math.floor((options.startTimestamp ?? new Date()).getTime() / 1000),\n      );\n      const endTimestamp = BigInt(\n        Math.floor(\n          (\n            options.endTimestamp ??\n            new Date(Date.now() + 10 * 365 * 24 * 60 * 60 * 1000)\n          ).getTime() / 1000,\n        ),\n      );\n\n      if (startTimestamp <= lastestBlock.timestamp) {\n        // set the start time to the next block if it is in the past\n        startTimestamp = lastestBlock.timestamp + 1n;\n      }\n      if (startTimestamp >= endTimestamp) {\n        throw new Error(\"Start time must be before end time.\");\n      }\n\n      // valdiate quantity\n      let quantity: bigint;\n      if (assetIsERC721) {\n        // force quantity to 1 for ERC721s\n        quantity = 1n;\n      } else {\n        // otherwise use the provided quantity or default to 1\n        quantity = options.quantity ?? 1n;\n      }\n\n      // validate price\n      const currencyAddress =\n        options.currencyContractAddress ?? NATIVE_TOKEN_ADDRESS;\n      let pricePerToken: bigint;\n      if (\"pricePerToken\" in options) {\n        // for native token, we know decimals are 18\n        if (isNativeTokenAddress(currencyAddress)) {\n          pricePerToken = toUnits(options.pricePerToken, 18);\n        } else {\n          // otherwise get the decimals of the currency\n          const currencyContract = getContract({\n            ...options.contract,\n            address: currencyAddress,\n          });\n          const { decimals } = await import(\"../../../erc20/read/decimals.js\");\n          const currencyDecimals = await decimals({\n            contract: currencyContract,\n          });\n          pricePerToken = toUnits(options.pricePerToken, currencyDecimals);\n        }\n      } else {\n        pricePerToken = BigInt(options.pricePerTokenWei);\n      }\n\n      return {\n        overrides: {\n          extraGas: 50_000n, // add extra gas to account for router call\n        },\n        params: {\n          assetContract: options.assetContractAddress,\n          currency: options.currencyContractAddress ?? NATIVE_TOKEN_ADDRESS,\n          endTimestamp,\n          pricePerToken,\n          quantity,\n          reserved: options.isReservedListing ?? false,\n          startTimestamp,\n          tokenId: options.tokenId,\n        },\n      } as const;\n    },\n    contract: options.contract,\n  });\n}\n\n/**\n * Checks if the `createListing` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `createListing` method is supported.\n * @extension MARKETPLACE\n * @example\n * ```ts\n * import { isCreateAuctionSupported } from \"thirdweb/extensions/marketplace\";\n *\n * const supported = isCreateAuctionSupported([\"0x...\"]);\n * ```\n */\nexport function isCreateListingSupported(availableSelectors: string[]) {\n  return CreateListing.isCreateListingSupported(availableSelectors);\n}\n", "\"use client\";\n\nimport type { UseQueryOptions } from \"@tanstack/react-query\";\nimport type { JSX } from \"react\";\nimport type { AuthOption } from \"../../../../../wallets/types.js\";\nimport {\n  getSocialIcon,\n  useWalletIcon,\n} from \"../../../../core/utils/walletIcon.js\";\n\nexport interface WalletIconProps\n  extends Omit<React.ImgHTMLAttributes<HTMLImageElement>, \"src\"> {\n  /**\n   * This component will be shown while the icon of the wallet is being fetched\n   * If not passed, the component will return `null`.\n   *\n   * You can/should pass a loading sign or spinner to this prop.\n   * @example\n   * ```tsx\n   * <WalletIcon loadingComponent={<Spinner />} />\n   * ```\n   */\n  loadingComponent?: JSX.Element;\n  /**\n   * This component will be shown if the icon fails to be retrieved\n   * If not passed, the component will return `null`.\n   *\n   * You can/should pass a descriptive text/component to this prop, indicating that the\n   * icon was not fetched successfully\n   * @example\n   * ```tsx\n   * <WalletIcon fallbackComponent={<span>Failed to load</span>}\n   * />\n   * ```\n   */\n  fallbackComponent?: JSX.Element;\n  /**\n   * Optional `useQuery` params\n   */\n  queryOptions?: Omit<UseQueryOptions<string>, \"queryFn\" | \"queryKey\">;\n}\n\n/**\n * This component tries to resolve the icon of a given wallet, then return an image.\n * @returns an <img /> with the src of the wallet icon\n *\n * @example\n * ### Basic usage\n * ```tsx\n * import { WalletProvider, WalletIcon } from \"thirdweb/react\";\n *\n * <WalletProvider id=\"io.metamask\">\n *   <WalletIcon />\n * </WalletProvider>\n * ```\n *\n * Result: An <img /> component with the src of the icon\n * ```html\n * <img src=\"metamask-icon.png\" />\n * ```\n *\n * ### Show a loading sign while the icon is being loaded\n * ```tsx\n * <WalletIcon loadingComponent={<Spinner />} />\n * ```\n *\n * ### Fallback to a dummy image if the wallet icon fails to resolve\n * ```tsx\n * <WalletIcon fallbackComponent={<img src=\"blank-image.png\" />} />\n * ```\n *\n * ### Usage with queryOptions\n * WalletIcon uses useQuery() from tanstack query internally.\n * It allows you to pass a custom queryOptions of your choice for more control of the internal fetching logic\n * ```tsx\n * <WalletIcon queryOptions={{ enabled: someLogic, retry: 3, }} />\n * ```\n *\n * @component\n * @wallet\n * @beta\n */\nexport function WalletIcon({\n  loadingComponent,\n  fallbackComponent,\n  queryOptions,\n  ...restProps\n}: WalletIconProps) {\n  const imageQuery = useWalletIcon({ queryOptions });\n  if (imageQuery.isLoading) {\n    return loadingComponent || null;\n  }\n  if (!imageQuery.data) {\n    return fallbackComponent || null;\n  }\n  return <img src={imageQuery.data} {...restProps} alt={restProps.alt} />;\n}\n\nexport interface SocialIconProps\n  extends Omit<React.ImgHTMLAttributes<HTMLImageElement>, \"src\"> {\n  provider: AuthOption | string;\n}\n\n/**\n * Social auth provider icon\n * @returns an <img /> component with the src set to the svg\n *\n * @example\n * ```tsx\n * import { SocialIcon } from \"thirdweb/react\";\n *\n * <SocialIcon provider=\"google\" />\n * ```\n *\n * Result: An <img /> component with the src of the icon\n * ```html\n * <img src=\"google-icon-svg\" />\n * ```\n *\n * @component\n * @wallet\n * @beta\n */\nexport function SocialIcon({ provider, ...restProps }: SocialIconProps) {\n  const src = getSocialIcon(provider);\n  return <img src={src} {...restProps} alt={restProps.alt} />;\n}\n", "import type { UseQueryOptions } from \"@tanstack/react-query\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { getFunctionId } from \"../../../utils/function-id.js\";\nimport { getWalletInfo } from \"../../../wallets/__generated__/getWalletInfo.js\";\nimport type { WalletId } from \"../../../wallets/wallet-types.js\";\nimport { useWalletContext } from \"../wallet/provider.js\";\n\n/**\n * @internal\n */\nexport function useWalletName(props: {\n  formatFn?: (str: string) => string;\n  queryOptions?: Omit<UseQueryOptions<string>, \"queryFn\" | \"queryKey\">;\n}) {\n  const { id } = useWalletContext();\n  const nameQuery = useQuery({\n    queryFn: async () => fetchWalletName({ formatFn: props.formatFn, id }),\n    queryKey: getQueryKeys({ formatFn: props.formatFn, id }),\n    ...props.queryOptions,\n  });\n  return nameQuery;\n}\n\n/**\n * @internal Exported for tests only\n */\nexport function getQueryKeys(props: {\n  id: WalletId;\n  formatFn?: (str: string) => string;\n}) {\n  if (typeof props.formatFn === \"function\") {\n    return [\n      \"walletName\",\n      props.id,\n      { resolver: getFunctionId(props.formatFn) },\n    ] as const;\n  }\n  return [\"walletName\", props.id] as const;\n}\n\n/**\n * @internal Exported for tests only\n */\nexport async function fetchWalletName(props: {\n  id: WalletId;\n  formatFn?: (str: string) => string;\n}) {\n  const info = await getWalletInfo(props.id);\n  if (typeof props.formatFn === \"function\") {\n    return props.formatFn(info.name);\n  }\n  return info.name;\n}\n", "\"use client\";\n\nimport type { UseQueryOptions } from \"@tanstack/react-query\";\nimport type { JSX } from \"react\";\nimport { useWalletName } from \"../../../../core/utils/walletname.js\";\n\n/**\n * Props for the WalletName component\n * @component\n * @wallet\n */\nexport interface WalletNameProps\n  extends Omit<React.HTMLAttributes<HTMLSpanElement>, \"children\"> {\n  /**\n   * This component will be shown while the name of the wallet name is being fetched\n   * If not passed, the component will return `null`.\n   *\n   * You can/should pass a loading sign or spinner to this prop.\n   * @example\n   * ```tsx\n   * <WalletName loadingComponent={<Spinner />} />\n   * ```\n   */\n  loadingComponent?: JSX.Element;\n  /**\n   * This component will be shown if the name fails to be retreived\n   * If not passed, the component will return `null`.\n   *\n   * You can/should pass a descriptive text/component to this prop, indicating that the\n   * name was not fetched successfully\n   * @example\n   * ```tsx\n   * <WalletName fallbackComponent={<span>Failed to load</span>}\n   * />\n   * ```\n   */\n  fallbackComponent?: JSX.Element;\n  /**\n   * Optional `useQuery` params\n   */\n  queryOptions?: Omit<UseQueryOptions<string>, \"queryFn\" | \"queryKey\">;\n  /**\n   * A function to format the name's display value\n   * ```tsx\n   * <WalletName formatFn={(str: string) => doSomething()} />\n   * ```\n   */\n  formatFn?: (str: string) => string;\n}\n\n/**\n * This component fetches then shows the name of a wallet.\n * It inherits all the attributes of a HTML <span> component, hence you can style it just like how you would style a normal <span>\n *\n * @example\n * ### Basic usage\n * ```tsx\n * import { WalletProvider, WalletName } from \"thirdweb/react\";\n *\n * <WalletProvider id=\"io.metamask\">\n *   <WalletName  />\n * </WalletProvider>\n * ```\n * Result:\n * ```html\n * <span>MetaMask</span>\n * ```\n *\n * ### Show a loading sign when the name is being fetched\n * ```tsx\n * import { WalletProvider, WalletName } from \"thirdweb/react\";\n *\n * <WalletProvider {...props}>\n *   <WalletName loadingComponent={<Spinner />} />\n * </WalletProvider>\n * ```\n *\n * ### Fallback to something when the name fails to resolve\n * ```tsx\n * <WalletProvider {...props}>\n *   <WalletName fallbackComponent={<span>Failed to load</span>} />\n * </WalletProvider>\n * ```\n *\n * ### Custom query options for useQuery\n * This component uses `@tanstack-query`'s useQuery internally.\n * You can use the `queryOptions` prop for more fine-grained control\n * ```tsx\n * <WalletName\n *   queryOptions={{\n *     enabled: isEnabled,\n *     retry: 4,\n *   }}\n * />\n * @component\n * @beta\n * @wallet\n */\nexport function WalletName({\n  loadingComponent,\n  fallbackComponent,\n  queryOptions,\n  formatFn,\n  ...restProps\n}: WalletNameProps) {\n  const nameQuery = useWalletName({ formatFn, queryOptions });\n  if (nameQuery.isLoading) {\n    return loadingComponent || null;\n  }\n  if (!nameQuery.data) {\n    return fallbackComponent || null;\n  }\n  return <span {...restProps}>{nameQuery.data}</span>;\n}\n", "\"use client\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { ThirdwebClient } from \"../../../client/client.js\";\nimport { getLastAuthProvider } from \"../../../react/core/utils/storage.js\";\nimport { webLocalStorage } from \"../../../utils/storage/webStorage.js\";\nimport { isEcosystemWallet } from \"../../../wallets/ecosystem/is-ecosystem-wallet.js\";\nimport { ClientScopedStorage } from \"../../../wallets/in-app/core/authentication/client-scoped-storage.js\";\nimport type { Ecosystem } from \"../../../wallets/in-app/core/wallet/types.js\";\nimport { useActiveWallet } from \"../../core/hooks/wallets/useActiveWallet.js\";\n\n/**\n * Embeds another thirdweb-supported site for seamless in-app and ecosystem wallet connection.\n *\n *  Make sure the embedded site includes <AutoConnect /> and supports frame ancestors, see [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors) for more information.\n *\n *  The embedded site must support the connected wallet (ecosystem or in-app).\n *\n * @param {Object} props - The props to pass to the iframe\n * @param {String} props.src - The URL of the site to embed\n * @param {ThirdwebClient} props.client - The current site's thirdweb client\n * @param {Ecosystem} [props.ecosystem] - The ecosystem to use for the wallet connection in the embedded site\n *\n * @example\n * ```tsx\n * import { SiteEmbed } from \"thirdweb/react\";\n *\n * <SiteEmbed src=\"https://thirdweb.com\" client={thirdwebClient} ecosystem={{ id: \"ecosystem.thirdweb\" }} />\n * ```\n * @walletConnection\n */\nexport function SiteEmbed({\n  src,\n  client,\n  ecosystem,\n  ...props\n}: {\n  src: string;\n  client: ThirdwebClient;\n  ecosystem?: Ecosystem;\n} & React.DetailedHTMLProps<\n  React.IframeHTMLAttributes<HTMLIFrameElement>,\n  HTMLIFrameElement\n>) {\n  if (!client.clientId) {\n    throw new Error(\"The SiteEmbed client must have a clientId\");\n  }\n\n  const activeWallet = useActiveWallet();\n  const walletId = activeWallet?.id;\n\n  const { data: { authProvider, authCookie } = {} } = useQuery({\n    enabled:\n      activeWallet &&\n      (isEcosystemWallet(activeWallet) ||\n        walletId === \"inApp\" ||\n        walletId === \"smart\"),\n    queryFn: async () => {\n      const storage = new ClientScopedStorage({\n        clientId: client.clientId,\n        ecosystem,\n        storage: webLocalStorage,\n      });\n\n      const authProvider = await getLastAuthProvider(webLocalStorage);\n      const authCookie = await storage.getAuthCookie();\n\n      return { authCookie, authProvider };\n    },\n    queryKey: [\"site-embed\", walletId, src, client.clientId, ecosystem],\n  });\n\n  const url = new URL(src);\n  if (walletId) {\n    url.searchParams.set(\"walletId\", walletId === \"smart\" ? \"inApp\" : walletId);\n  }\n  if (authProvider) {\n    url.searchParams.set(\"authProvider\", authProvider);\n  }\n  if (authCookie) {\n    url.searchParams.set(\"authCookie\", authCookie);\n  }\n\n  return (\n    <iframe\n      allowFullScreen\n      height=\"100%\"\n      src={encodeURI(url.toString())}\n      width=\"100%\"\n      {...props}\n    />\n  );\n}\n", "\"use client\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { ThirdwebClient } from \"../../../client/client.js\";\nimport { getLastAuthProvider } from \"../../../react/core/utils/storage.js\";\nimport { webLocalStorage } from \"../../../utils/storage/webStorage.js\";\nimport { isEcosystemWallet } from \"../../../wallets/ecosystem/is-ecosystem-wallet.js\";\nimport { ClientScopedStorage } from \"../../../wallets/in-app/core/authentication/client-scoped-storage.js\";\nimport type { Ecosystem } from \"../../../wallets/in-app/core/wallet/types.js\";\nimport { useActiveWallet } from \"../../core/hooks/wallets/useActiveWallet.js\";\n\n/**\n * Creates a link to another thirdweb-supported site with wallet connection parameters.\n *\n *  The target site must support the connected wallet (ecosystem or in-app).\n *\n * @param {Object} props - The props to pass to the anchor tag\n * @param {String} props.href - The URL of the site to link to\n * @param {ThirdwebClient} props.client - The current site's thirdweb client\n * @param {Ecosystem} [props.ecosystem] - The ecosystem to use for the wallet connection in the target site\n * @param {React.ReactNode} props.children - The content to render inside the link\n *\n * @example\n * ```tsx\n * import { SiteLink } from \"thirdweb/react\";\n *\n * <SiteLink href=\"https://thirdweb.com\" client={thirdwebClient} ecosystem={{ id: \"ecosystem.thirdweb\" }}>\n *   Visit Site\n * </SiteLink>\n * ```\n * @walletConnection\n */\nexport function SiteLink({\n  href,\n  client,\n  ecosystem,\n  children,\n  ...props\n}: {\n  href: string;\n  client: ThirdwebClient;\n  ecosystem?: Ecosystem;\n  children: React.ReactNode;\n} & Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\">) {\n  if (!client.clientId) {\n    throw new Error(\"The SiteLink client must have a clientId\");\n  }\n\n  const activeWallet = useActiveWallet();\n  const walletId = activeWallet?.id;\n\n  const { data: { authProvider, authCookie } = {} } = useQuery({\n    enabled:\n      activeWallet &&\n      (isEcosystemWallet(activeWallet) ||\n        walletId === \"inApp\" ||\n        walletId === \"smart\"),\n    queryFn: async () => {\n      const storage = new ClientScopedStorage({\n        clientId: client.clientId,\n        ecosystem,\n        storage: webLocalStorage,\n      });\n\n      const authProvider = await getLastAuthProvider(webLocalStorage);\n      const authCookie = await storage.getAuthCookie();\n\n      return { authCookie, authProvider };\n    },\n    queryKey: [\"site-link\", walletId, href, client.clientId, ecosystem],\n  });\n\n  const url = new URL(href);\n  if (walletId) {\n    url.searchParams.set(\"walletId\", walletId === \"smart\" ? \"inApp\" : walletId);\n  }\n  if (authProvider) {\n    url.searchParams.set(\"authProvider\", authProvider);\n  }\n  if (authCookie) {\n    url.searchParams.set(\"authCookie\", authCookie);\n  }\n\n  return (\n    <a href={encodeURI(url.toString())} {...props}>\n      {children}\n    </a>\n  );\n}\n", "import { webLocalStorage } from \"../../../utils/storage/webStorage.js\";\nimport { getLastAuthProvider as getLastAuthProviderCore } from \"../../core/utils/storage.js\";\n\n/**\n * Retrieves the last authentication provider used from local storage.\n *\n * This function is designed to work only in a browser environment.\n *\n * @returns {Promise<AuthArgsType[\"strategy\"] | null>} A promise that resolves to the last\n * authentication provider strategy used, or `null` if none is found.\n *\n * @example\n * ```typescript\n * import { getLastAuthProvider } from \"thirdweb/react\";\n *\n * const lastAuthProvider = await getLastAuthProvider();\n * ```\n *\n * @utils\n */\nexport async function getLastAuthProvider() {\n  return getLastAuthProviderCore(webLocalStorage);\n}\n"],
  "mappings": "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",
  "names": ["queryOptions", "queryOptions", "import_react", "chainId", "import_react", "statusCode", "call", "_a", "call", "queryOptions", "import_react", "import_react", "import_react", "import_react", "import_react", "_jsxs", "_jsx", "_Fragment", "import_react", "_jsxs", "_jsx", "ChainIcon", "ChainName", "_a", "_jsxs", "_jsx", "_Fragment", "_jsxs", "_jsx", "ChainIcon", "ChainName", "_jsx", "_jsxs", "import_react", "_jsxs", "_jsx", "_Fragment", "amount", "import_react", "name", "_a", "_jsxs", "StyledButton", "_jsx", "_jsxs", "_jsx", "_a", "_jsxs", "_jsx", "_Fragment", "import_react", "_a", "import_react", "queryOptions", "_jsx", "_Fragment", "quote", "_jsxs", "prepare", "quote", "quote", "_jsx", "_jsxs", "_Fragment", "_jsxs", "_jsx", "_jsxs", "_Fragment", "_jsx", "_jsx", "_jsxs", "import_react", "import_react", "_jsxs", "_jsx", "_jsx", "_jsxs", "import_react", "_jsxs", "_jsx", "import_react", "prepareTransaction", "sendTransaction", "sendBatchTransaction", "_jsx", "_jsxs", "ChainName", "_jsxs", "_jsx", "ChainIcon", "ChainName", "_Fragment", "_a", "quote", "receiverAddress", "_jsxs", "_jsx", "_jsx", "_jsxs", "CopyIcon", "_Fragment", "_jsx", "_jsx", "import_react", "import_react", "_jsx", "_jsxs", "_jsx", "import_react", "_jsx", "_jsxs", "_Fragment", "_jsxs", "_jsx", "_jsx", "_a", "_jsx", "_a", "_jsx", "_jsxs", "_a", "import_react", "_jsx", "Modal", "import_react", "_a", "_b", "_jsx", "_jsxs", "_Fragment", "import_react", "_jsx", "getNFT", "queryOptions", "_jsx", "queryOptions", "_jsx", "queryOptions", "getQueryKey", "_jsx", "import_react", "_jsx", "queryOptions", "_jsx", "queryOptions", "_jsx", "TokenSymbol", "queryOptions", "getQueryKeys", "_jsx", "import_react", "sendTransaction", "_jsx", "_jsxs", "_jsx", "getPayMetadata", "_jsx", "getNFT", "import_react", "createListing", "decimals", "getPayMetadata", "prepareTransaction", "createListing", "_jsx", "getContractMetadata", "queryOptions", "_jsx", "getQueryKeys", "queryOptions", "_jsx", "authProvider", "authCookie", "_jsx", "authProvider", "authCookie", "_jsx", "getLastAuthProvider"]
}
